<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Science, meet productivity</title><link href="/" rel="alternate"></link><link href="/feeds/sciencemeetproductivity.atom.xml" rel="self"></link><id>/</id><updated>2014-05-01T10:52:00-07:00</updated><entry><title>Implementing annotation-free quantification of splice junction usage via RNA-STAR and Python+Pandas magic</title><link href="/blog/2014/05/01/2014-05-01-implementing-annotation-free-quantification-of-splice/" rel="alternate"></link><updated>2014-05-01T10:52:00-07:00</updated><author><name>sciencemeetproductivity</name></author><id>tag:,2014-05-01:blog/2014/05/01/2014-05-01-implementing-annotation-free-quantification-of-splice/</id><summary type="html">&lt;p&gt;If you've been reading my blog for general python/productivity stuff, you are in for a TREAT! Here is some REAL SCIENCE! I'll give a quick intro but please let me know if anything is unclear. I spend most of my time talking to a few people who study this stuff in painful detail, so I'd love to know where my explanation becomes cloudy.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;tl;dr: I wrote a small tool for quantifying alternative junction usage from RNA-STAR alignment output: https://github.com/olgabot/sj2psi And it's on PyPI so you can &lt;code&gt;pip install sj2psi&lt;/code&gt; as well.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Alternative splicing is a method of creating different versions of a gene using the same DNA. It is awesome because it increases the possible number of genes in say the human genome from just 30,000 to millions. An extreme example is the &lt;em&gt;Drosoephila&lt;/em&gt; (fruit fly) gene &lt;em&gt;Dscam&lt;/em&gt;, which has over 60,000 potential versions, more than the genes in the &lt;em&gt;Drosophila&lt;/em&gt; genome! Alternative splicing happens by combining different "&lt;em&gt;exons&lt;/em&gt;" together (always in linear order) to create different proteins (or other gene products like &lt;a href="http://en.wikipedia.org/wiki/Non-coding_RNA"&gt;ncRNAs&lt;/a&gt; but we won't go into that)&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://upload.wikimedia.org/wikipedia/commons/0/0a/DNA_alternative_splicing.gif" /&gt;&lt;/p&gt;
&lt;p&gt;These different versions of the same gene are called "isoforms." What we care about is looking at individual events because we study &lt;a href="http://en.wikipedia.org/wiki/RNA-binding_protein"&gt;RNA binding proteins&lt;/a&gt; (RBPs), some of which have an effect on alternative splicing when they bind RNA. So maybe we know that an RBP binds some gene's RNA, but it (most likely) only has an effect on the exon(s) immediately before or after. For example, the RBP FOX2 is one of &lt;a href="http://yeolab.ucsd.edu/yeolab/Home.html"&gt;our lab's&lt;/a&gt; favorites, partly because our boss found that if FOX2 binds upstream ("before" in DNA terms) of an exon, it suppresses inclusion of it. HOWEVER! FOX2 binding downstream ("after") an exon promotes inclusion! Check out this figure from &lt;a href="http://www.ncbi.nlm.nih.gov/pmc/articles/PMC2735254/"&gt;Yeo et al, &lt;em&gt;Nat Struct Mol Bio&lt;/em&gt; (2009)&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://31.media.tumblr.com/8749e1c26cb36237e1d8d2ea874327f1/tumblr_inline_n4wpkodHzT1rw6gvj.png" /&gt;&lt;/p&gt;
&lt;p&gt;Quantifying alternative exon usage and changes is always a challenge, and this is especially difficult for unannotated splicing events. Which is why I was excited when I read &lt;a href="http://genome.cshlp.org/content/early/2013/12/03/gr.161034.113?top=1"&gt;a single-cell paper&lt;/a&gt; learned of &lt;a href="https://github.com/pervouchine/bam2ssj"&gt;&lt;code&gt;bam2ssj&lt;/code&gt;&lt;/a&gt; (Paper: &lt;a href="http://www.ncbi.nlm.nih.gov/pubmed/23172860"&gt;Pervouchine et al, &lt;em&gt;Bioinformatics&lt;/em&gt; (2013)&lt;/a&gt; and its successor, &lt;a href="https://github.com/pervouchine/sjcount"&gt;&lt;code&gt;sjcount&lt;/code&gt;&lt;/a&gt;. The promise is that instead of quantifying whole splicing events which have to fall into some specific category (SE/MXE/RI/A5SS/A3SS/AFE/ALE/TandemUTR, see this figure from &lt;a href="http://www.nature.com/nature/journal/v456/n7221/abs/nature07509.html"&gt;Wang ET et al, &lt;em&gt;Nature&lt;/em&gt; (2008)&lt;/a&gt;. Each "box" is an exon and the lines in between exons are stretches of DNA that are removed (called "introns" because they "interrupt" the exons)&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.nature.com/nature/journal/v456/n7221/images/nature07509-f2.2.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Plus these events have to be annotated for use with my splicing quantifier of choice (&lt;a href="http://miso.readthedocs.org/en/fastmiso/"&gt;MISO&lt;/a&gt;), or you could try to pull them out from the aligned file. However, I work with single-cell data and since splicing is mostly binary in single cells (i.e. you have mostly isoform A and not both isoform A and B, citation: &lt;a href="http://www.ncbi.nlm.nih.gov/pubmed/23685454"&gt;Shalek et al, &lt;em&gt;Nature&lt;/em&gt; (2013)&lt;/a&gt;), it becomes a pain to make these annotations, because you have to merge ALL the files together to create like a terrabyte-sized alignment file (usually a &lt;a href="http://genome.sph.umich.edu/wiki/BAM"&gt;&lt;code&gt;*.bam&lt;/code&gt; file&lt;/a&gt;) and then you are introducing all kinds of craziness because what could have been noise in a few cells gets added up together and becomes signal.&lt;/p&gt;
&lt;p&gt;Sigh.&lt;/p&gt;
&lt;p&gt;So I'd much rather use something that quantifies splicing of all junctions, arbitrarily. But when I tried using &lt;code&gt;sjcount&lt;/code&gt; I couldn't figure out what one of the outputs was (like what's the difference between a "splice junction" and a "splice boundary?"). Plus I realized that the "splice junction counts" (&lt;code&gt;*.ssj&lt;/code&gt;) file was really similar to the "&lt;code&gt;SJ.out.tab&lt;/code&gt;" file created by the &lt;a href="https://code.google.com/p/rna-star/"&gt;RNA-STAR&lt;/a&gt; aligner.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.ssj&lt;/code&gt; files look like (I added the column names):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;chrom&lt;/span&gt;   &lt;span class="n"&gt;start&lt;/span&gt;   &lt;span class="n"&gt;stop&lt;/span&gt;    &lt;span class="n"&gt;strand&lt;/span&gt;  &lt;span class="n"&gt;overhang&lt;/span&gt;    &lt;span class="n"&gt;count&lt;/span&gt;
&lt;span class="n"&gt;chr1&lt;/span&gt;    &lt;span class="mi"&gt;146509&lt;/span&gt;  &lt;span class="mi"&gt;155767&lt;/span&gt;  &lt;span class="p"&gt;.&lt;/span&gt;       &lt;span class="mi"&gt;20&lt;/span&gt;      &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;chr1&lt;/span&gt;    &lt;span class="mi"&gt;146509&lt;/span&gt;  &lt;span class="mi"&gt;155767&lt;/span&gt;  &lt;span class="p"&gt;.&lt;/span&gt;       &lt;span class="mi"&gt;34&lt;/span&gt;      &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;chr1&lt;/span&gt;    &lt;span class="mi"&gt;146509&lt;/span&gt;  &lt;span class="mi"&gt;155767&lt;/span&gt;  &lt;span class="p"&gt;.&lt;/span&gt;       &lt;span class="mi"&gt;49&lt;/span&gt;      &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;chr1&lt;/span&gt;    &lt;span class="mi"&gt;168165&lt;/span&gt;  &lt;span class="mi"&gt;169049&lt;/span&gt;  &lt;span class="p"&gt;.&lt;/span&gt;       &lt;span class="mi"&gt;10&lt;/span&gt;      &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;chr1&lt;/span&gt;    &lt;span class="mi"&gt;168165&lt;/span&gt;  &lt;span class="mi"&gt;169049&lt;/span&gt;  &lt;span class="p"&gt;.&lt;/span&gt;       &lt;span class="mi"&gt;49&lt;/span&gt;      &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;chr1&lt;/span&gt;    &lt;span class="mi"&gt;694503&lt;/span&gt;  &lt;span class="mi"&gt;700103&lt;/span&gt;  &lt;span class="p"&gt;.&lt;/span&gt;       &lt;span class="mi"&gt;29&lt;/span&gt;      &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;chr1&lt;/span&gt;    &lt;span class="mi"&gt;694503&lt;/span&gt;  &lt;span class="mi"&gt;700103&lt;/span&gt;  &lt;span class="p"&gt;.&lt;/span&gt;       &lt;span class="mi"&gt;41&lt;/span&gt;      &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;chr1&lt;/span&gt;    &lt;span class="mi"&gt;694503&lt;/span&gt;  &lt;span class="mi"&gt;700103&lt;/span&gt;  &lt;span class="p"&gt;.&lt;/span&gt;       &lt;span class="mi"&gt;49&lt;/span&gt;      &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;chr1&lt;/span&gt;    &lt;span class="mi"&gt;894461&lt;/span&gt;  &lt;span class="mi"&gt;894595&lt;/span&gt;  &lt;span class="p"&gt;.&lt;/span&gt;       &lt;span class="mi"&gt;7&lt;/span&gt;       &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;chr1&lt;/span&gt;    &lt;span class="mi"&gt;894461&lt;/span&gt;  &lt;span class="mi"&gt;894595&lt;/span&gt;  &lt;span class="p"&gt;.&lt;/span&gt;       &lt;span class="mi"&gt;9&lt;/span&gt;       &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;"overhang" is the number of base pairs of the sequencing read that overlaps with the upstream exon of the splicing event. The rest of the read is on the downstream exon. In our case, our reads are 100 base pairs ("100bp") so if there's 20bp overhanging on one exon, the other 80bp are on the other exon.&lt;/p&gt;
&lt;p&gt;While &lt;code&gt;SJ.out.tab&lt;/code&gt; files are (again I added column names):&lt;/p&gt;
&lt;table border="1" class="dataframe"&gt;\n  &lt;thead&gt;\n    &lt;tr style="text-align: right;"&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;chrom&lt;/th&gt;\n      &lt;th&gt;first_bp_intron&lt;/th&gt;\n      &lt;th&gt;last_bp_intron&lt;/th&gt;\n      &lt;th&gt;strand&lt;/th&gt;\n      &lt;th&gt;intron_motif&lt;/th&gt;\n      &lt;th&gt;annotated&lt;/th&gt;\n      &lt;th&gt;unique_junction_reads&lt;/th&gt;\n      &lt;th&gt;multimap_junction_reads&lt;/th&gt;\n      &lt;th&gt;max_overhang&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th&gt;0&lt;/th&gt;\n      &lt;td&gt; chr1&lt;/td&gt;\n      &lt;td&gt; 135332&lt;/td&gt;\n      &lt;td&gt; 138297&lt;/td&gt;\n      &lt;td&gt; 1&lt;/td&gt;\n      &lt;td&gt; GC/AG&lt;/td&gt;\n      &lt;td&gt; False&lt;/td&gt;\n      &lt;td&gt; 0&lt;/td&gt;\n      &lt;td&gt; 1&lt;/td&gt;\n      &lt;td&gt; 38&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;1&lt;/th&gt;\n      &lt;td&gt; chr1&lt;/td&gt;\n      &lt;td&gt; 146510&lt;/td&gt;\n      &lt;td&gt; 155766&lt;/td&gt;\n      &lt;td&gt; 2&lt;/td&gt;\n      &lt;td&gt; CT/AC&lt;/td&gt;\n      &lt;td&gt;  True&lt;/td&gt;\n      &lt;td&gt; 5&lt;/td&gt;\n      &lt;td&gt; 1&lt;/td&gt;\n      &lt;td&gt; 34&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;2&lt;/th&gt;\n      &lt;td&gt; chr1&lt;/td&gt;\n      &lt;td&gt; 156895&lt;/td&gt;\n      &lt;td&gt; 158300&lt;/td&gt;\n      &lt;td&gt; 1&lt;/td&gt;\n      &lt;td&gt; GC/AG&lt;/td&gt;\n      &lt;td&gt; False&lt;/td&gt;\n      &lt;td&gt; 0&lt;/td&gt;\n      &lt;td&gt; 2&lt;/td&gt;\n      &lt;td&gt; 17&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;3&lt;/th&gt;\n      &lt;td&gt; chr1&lt;/td&gt;\n      &lt;td&gt; 168166&lt;/td&gt;\n      &lt;td&gt; 169048&lt;/td&gt;\n      &lt;td&gt; 2&lt;/td&gt;\n      &lt;td&gt; CT/AC&lt;/td&gt;\n      &lt;td&gt;  True&lt;/td&gt;\n      &lt;td&gt; 5&lt;/td&gt;\n      &lt;td&gt; 3&lt;/td&gt;\n      &lt;td&gt; 46&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;4&lt;/th&gt;\n      &lt;td&gt; chr1&lt;/td&gt;\n      &lt;td&gt; 169265&lt;/td&gt;\n      &lt;td&gt; 172556&lt;/td&gt;\n      &lt;td&gt; 2&lt;/td&gt;\n      &lt;td&gt; CT/AC&lt;/td&gt;\n      &lt;td&gt;  True&lt;/td&gt;\n      &lt;td&gt; 0&lt;/td&gt;\n      &lt;td&gt; 2&lt;/td&gt;\n      &lt;td&gt; 13&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;

&lt;p&gt;The start/stop are off by one here because &lt;code&gt;.ssj&lt;/code&gt;'s index is from the exon end/exon start, and this is from the intron start/intron end. So the SJ.out.tab coordinates are (start from &lt;code&gt;.ssj&lt;/code&gt;+1) and (end from &lt;code&gt;.ssj&lt;/code&gt;-1).&lt;/p&gt;
&lt;p&gt;FYI, the &lt;code&gt;.ssc&lt;/code&gt; files looked like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;chr1&lt;/span&gt;    &lt;span class="mi"&gt;894595&lt;/span&gt;  &lt;span class="mi"&gt;894595&lt;/span&gt;  &lt;span class="p"&gt;.&lt;/span&gt;       &lt;span class="mi"&gt;8&lt;/span&gt;       &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;chr1&lt;/span&gt;    &lt;span class="mi"&gt;1228468&lt;/span&gt; &lt;span class="mi"&gt;1228468&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;       &lt;span class="mi"&gt;1&lt;/span&gt;       &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;chr1&lt;/span&gt;    &lt;span class="mi"&gt;1228468&lt;/span&gt; &lt;span class="mi"&gt;1228468&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;       &lt;span class="mi"&gt;3&lt;/span&gt;       &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;chr1&lt;/span&gt;    &lt;span class="mi"&gt;1228468&lt;/span&gt; &lt;span class="mi"&gt;1228468&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;       &lt;span class="mi"&gt;5&lt;/span&gt;       &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;chr1&lt;/span&gt;    &lt;span class="mi"&gt;1228468&lt;/span&gt; &lt;span class="mi"&gt;1228468&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;       &lt;span class="mi"&gt;6&lt;/span&gt;       &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;chr1&lt;/span&gt;    &lt;span class="mi"&gt;1228468&lt;/span&gt; &lt;span class="mi"&gt;1228468&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;       &lt;span class="mi"&gt;7&lt;/span&gt;       &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;chr1&lt;/span&gt;    &lt;span class="mi"&gt;1228468&lt;/span&gt; &lt;span class="mi"&gt;1228468&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;       &lt;span class="mi"&gt;12&lt;/span&gt;      &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;chr1&lt;/span&gt;    &lt;span class="mi"&gt;1228468&lt;/span&gt; &lt;span class="mi"&gt;1228468&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;       &lt;span class="mi"&gt;13&lt;/span&gt;      &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;chr1&lt;/span&gt;    &lt;span class="mi"&gt;1228468&lt;/span&gt; &lt;span class="mi"&gt;1228468&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;       &lt;span class="mi"&gt;16&lt;/span&gt;      &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;chr1&lt;/span&gt;    &lt;span class="mi"&gt;1228468&lt;/span&gt; &lt;span class="mi"&gt;1228468&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;       &lt;span class="mi"&gt;27&lt;/span&gt;      &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This claims to have the same columns as &lt;code&gt;.ssj&lt;/code&gt; files except instead of start/stop it's position/position. I was very confused by how you can have a count at a position. Why does &lt;code&gt;chr1:894595&lt;/code&gt; have one line while &lt;code&gt;chr1:1228468&lt;/code&gt; have a bunch? If you search for &lt;code&gt;894595&lt;/code&gt; in the &lt;code&gt;.ssj&lt;/code&gt; file, you get:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;chr1&lt;/span&gt;    &lt;span class="mi"&gt;894461&lt;/span&gt;  &lt;span class="mi"&gt;894595&lt;/span&gt;  &lt;span class="p"&gt;.&lt;/span&gt;       &lt;span class="mi"&gt;7&lt;/span&gt;       &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;chr1&lt;/span&gt;    &lt;span class="mi"&gt;894461&lt;/span&gt;  &lt;span class="mi"&gt;894595&lt;/span&gt;  &lt;span class="p"&gt;.&lt;/span&gt;       &lt;span class="mi"&gt;9&lt;/span&gt;       &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="n"&gt;chr1&lt;/span&gt;    &lt;span class="mi"&gt;894461&lt;/span&gt;  &lt;span class="mi"&gt;894595&lt;/span&gt;  &lt;span class="p"&gt;.&lt;/span&gt;       &lt;span class="mi"&gt;10&lt;/span&gt;      &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;chr1&lt;/span&gt;    &lt;span class="mi"&gt;894461&lt;/span&gt;  &lt;span class="mi"&gt;894595&lt;/span&gt;  &lt;span class="p"&gt;.&lt;/span&gt;       &lt;span class="mi"&gt;11&lt;/span&gt;      &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;chr1&lt;/span&gt;    &lt;span class="mi"&gt;894461&lt;/span&gt;  &lt;span class="mi"&gt;894595&lt;/span&gt;  &lt;span class="p"&gt;.&lt;/span&gt;       &lt;span class="mi"&gt;12&lt;/span&gt;      &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;chr1&lt;/span&gt;    &lt;span class="mi"&gt;894461&lt;/span&gt;  &lt;span class="mi"&gt;894595&lt;/span&gt;  &lt;span class="p"&gt;.&lt;/span&gt;       &lt;span class="mi"&gt;14&lt;/span&gt;      &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;chr1&lt;/span&gt;    &lt;span class="mi"&gt;894461&lt;/span&gt;  &lt;span class="mi"&gt;894595&lt;/span&gt;  &lt;span class="p"&gt;.&lt;/span&gt;       &lt;span class="mi"&gt;16&lt;/span&gt;      &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;chr1&lt;/span&gt;    &lt;span class="mi"&gt;894461&lt;/span&gt;  &lt;span class="mi"&gt;894595&lt;/span&gt;  &lt;span class="p"&gt;.&lt;/span&gt;       &lt;span class="mi"&gt;19&lt;/span&gt;      &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;chr1&lt;/span&gt;    &lt;span class="mi"&gt;894461&lt;/span&gt;  &lt;span class="mi"&gt;894595&lt;/span&gt;  &lt;span class="p"&gt;.&lt;/span&gt;       &lt;span class="mi"&gt;20&lt;/span&gt;      &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;chr1&lt;/span&gt;    &lt;span class="mi"&gt;894461&lt;/span&gt;  &lt;span class="mi"&gt;894595&lt;/span&gt;  &lt;span class="p"&gt;.&lt;/span&gt;       &lt;span class="mi"&gt;21&lt;/span&gt;      &lt;span class="mi"&gt;13&lt;/span&gt;
&lt;span class="n"&gt;chr1&lt;/span&gt;    &lt;span class="mi"&gt;894461&lt;/span&gt;  &lt;span class="mi"&gt;894595&lt;/span&gt;  &lt;span class="p"&gt;.&lt;/span&gt;       &lt;span class="mi"&gt;22&lt;/span&gt;      &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;chr1&lt;/span&gt;    &lt;span class="mi"&gt;894461&lt;/span&gt;  &lt;span class="mi"&gt;894595&lt;/span&gt;  &lt;span class="p"&gt;.&lt;/span&gt;       &lt;span class="mi"&gt;42&lt;/span&gt;      &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;chr1&lt;/span&gt;    &lt;span class="mi"&gt;894461&lt;/span&gt;  &lt;span class="mi"&gt;894595&lt;/span&gt;  &lt;span class="p"&gt;.&lt;/span&gt;       &lt;span class="mi"&gt;49&lt;/span&gt;      &lt;span class="mi"&gt;14&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;How did all these counts in the last column (which sum to 46 by my calculation) become &lt;strong&gt;1&lt;/strong&gt; in the &lt;code&gt;.ssc&lt;/code&gt; file? I was pretty lost.&lt;/p&gt;
&lt;p&gt;ANYWAYS all of this is a buildup to say that I used Pervouchine et al's method of quantifying alternative junctions as asking, when this upstream exon (splicing &lt;em&gt;donor&lt;/em&gt;, &lt;em&gt;D&lt;/em&gt; in figure below) is used with this downstream exon (splicing &lt;em&gt;acceptor&lt;/em&gt;, &lt;em&gt;A&lt;/em&gt; in figure below), how often does that happen relative to all other donors and acceptors? In the figure below, the splicing event of interest is a thick, bold line, joined by a solid arc representing the spliced read. The dotted lines represent that this donor could be spliced to a bunch of different acceptor sites. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Donor with alternative acceptors on left, Acceptor with alternative donors on right" src="http://bioinformatics.oxfordjournals.org/content/29/2/273/F2.medium.gif" /&gt;&lt;/p&gt;
&lt;p&gt;This is quantified with a $\Psi_5$ ("Percent spliced-in", or "Psi" of the donor, which is at the 5' end of the RNA) and $\Psi_3$ ("Psi" of the acceptor, located at the 3' end of the RNA) scores:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://bioinformatics.oxfordjournals.org/content/29/2/273/embed/graphic-3.gif" /&gt;&lt;/p&gt;
&lt;p&gt;Where the summation is over all other possible acceptors (in the case of &lt;em&gt;A'&lt;/em&gt;) or all other possible donors (in the case of &lt;em&gt;D'&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;So using the SJ.out.tab files from RNA-STAR and the magic of &lt;a href="http://pandas.pydata.org/"&gt;&lt;code&gt;pandas&lt;/code&gt;&lt;/a&gt;, and a &lt;a href="https://github.com/olgabot/sj2psi/blob/master/sj2psi/__init__.py#L64"&gt;bit of filtering&lt;/a&gt;, you can calculate these scores very easily:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;psi5&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;chrom&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;first_bp_intron&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;total_filtered_reads&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;While this does $\Psi$ scores from raw counts which is frequentist and I prefer to be Bayesian, this is a reasonable start.&lt;/p&gt;
&lt;p&gt;Check out the package I wrote for this: https://github.com/olgabot/sj2psi I'd love your feedback and contribution. It's also &lt;a href="https://pypi.python.org/pypi/sj2psi/0.0.1"&gt;available on PyPI&lt;/a&gt;, so you can &lt;code&gt;pip install sj2psi&lt;/code&gt; and start using it today! It's under the MIT license so just attribute me :)&lt;/p&gt;</summary><category term="rna splicing"></category><category term="alternative splicing"></category><category term="python"></category><category term="pandas"></category><category term="rna"></category><category term="science"></category></entry><entry><title>Did you take physics or chemistry classes as undergrad? (Re hertz fellowship interview)</title><link href="/blog/2014/03/04/2014-03-04-did-you-take-physics-or-chemistry-classes-as-undergrad/" rel="alternate"></link><updated>2014-03-04T11:25:29-08:00</updated><author><name>sciencemeetproductivity</name></author><id>tag:,2014-03-04:blog/2014/03/04/2014-03-04-did-you-take-physics-or-chemistry-classes-as-undergrad/</id><summary type="html">&lt;p&gt;&lt;a href="Anonymous" rel="external nofollow"&gt;None&lt;/a&gt;: Did you take physics or chemistry classes as undergrad? (Re hertz fellowship interview)&lt;/p&gt;

&lt;p&gt;Yes, we were required to take Physics 1 (Mechanics) and 2 (Electricity and Magnetism) and Chemistry. I also took Organic Chemistry and Biochemistry as part of the Biological Engineering major.&lt;/p&gt;</summary></entry><entry><title>PYTHONPATH is a liar. site.py and easy-install.pth tell the truth</title><link href="/blog/2014/03/03/2014-03-03-pythonpath-is-a-liar-site-py-and-easy-install-pth-tell/" rel="alternate"></link><updated>2014-03-03T20:15:41-08:00</updated><author><name>sciencemeetproductivity</name></author><id>tag:,2014-03-03:blog/2014/03/03/2014-03-03-pythonpath-is-a-liar-site-py-and-easy-install-pth-tell/</id><summary type="html">&lt;p&gt;Lately I've been working in &lt;a href="http://www.virtualenv.org/en/latest/"&gt;virtualenvs&lt;/a&gt; which as been &lt;strong&gt;great&lt;/strong&gt; for developing but not so great for installing. I've run into numerous issues where I prepend my &lt;code&gt;PYTHONPATH&lt;/code&gt; with the directory I want to get imported first, but to no avail. You've run into this: you &lt;code&gt;export PYTHONPATH&lt;/code&gt; exactly as you want, only to see that &lt;code&gt;import sys; sys.path&lt;/code&gt; includes all kinds of other junk before it!&lt;/p&gt;
&lt;p&gt;So, after watching a &lt;a href="http://blip.tv/pycon-us-videos-2009-2010-2011/pycon-2011-reverse-engineering-ian-bicking-s-brain-inside-pip-and-virtualenv-4899496"&gt;talk&lt;/a&gt; about reverse-engineering &lt;code&gt;virtualenv&lt;/code&gt;. I realized I actually don't understand anything about what python does at startup. So after a lot of searching, I found out that to load packages, Python reads the &lt;code&gt;site.py&lt;/code&gt; file. I read about &lt;a href="http://docs.python.org/2/library/site.html"&gt;&lt;code&gt;site.py&lt;/code&gt;&lt;/a&gt;. And I found out.....&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TURNS OUT PYTHON SECRETLY LOADS PACKAGES BEFORE LOOKING AT PYTHONPATH.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Shocking!" src="http://media0.giphy.com/media/aCpmM0W4tfG48/giphy.gif" /&gt;&lt;/p&gt;
&lt;p&gt;And where it looks is the &lt;code&gt;*.pth&lt;/code&gt; files found in &lt;code&gt;path/to/python/lib/site-packages/*.pth&lt;/code&gt;. The biggest culprit is usually &lt;code&gt;easy_-nstall.pth&lt;/code&gt;. Mine had all kinds of absolute paths to the bigger Python install that I had to remove.&lt;/p&gt;
&lt;p&gt;On my computer, &lt;code&gt;easy-install.pth&lt;/code&gt; looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__plen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pytz&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2013.8&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;py2&lt;/span&gt;&lt;span class="mf"&gt;.7&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;egg&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;brewer2mpl&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.3.2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;py2&lt;/span&gt;&lt;span class="mf"&gt;.7&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;egg&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pybedtools&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.6.2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;py2&lt;/span&gt;&lt;span class="mf"&gt;.7&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;macosx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;10.9&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x86_64&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;egg&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;olga&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;workspace&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pandas&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;olga&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;workspace&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;prettyplotlib&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;olga&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;workspace&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;statsmodels&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;olga&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;workspace&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;seaborn&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;husl&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2.1.0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;py2&lt;/span&gt;&lt;span class="mf"&gt;.7&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;egg&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;olga&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;workspace&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gffutils&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;simplejson&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;3.3.1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;py2&lt;/span&gt;&lt;span class="mf"&gt;.7&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;macosx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;10.9&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x86_64&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;egg&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;argcomplete&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.6.5&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;py2&lt;/span&gt;&lt;span class="mf"&gt;.7&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;egg&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;argh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.23.3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;py2&lt;/span&gt;&lt;span class="mf"&gt;.7&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;egg&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;moss&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.2.0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;py2&lt;/span&gt;&lt;span class="mf"&gt;.7&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;egg&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;olga&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;workspace&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;scikit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;learn&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;olga&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;workspace&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Theano&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.6.0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;py2&lt;/span&gt;&lt;span class="mf"&gt;.7&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;egg&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pysam&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.7.7&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;py2&lt;/span&gt;&lt;span class="mf"&gt;.7&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;macosx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;10.9&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x86_64&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;egg&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;olga&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;workspace&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;YeoLab&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gscripts&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__plen&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="n"&gt;del&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__plen&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;__egginsert&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__egginsert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So let's say I never wanted to use my development versions of something, then I'd remove that line from the file. Although eventually this got so much of a problem in my &lt;code&gt;virtualenv&lt;/code&gt; at work that at I added the &lt;code&gt;site-packages&lt;/code&gt; directory of that python distribution indirectly with &lt;code&gt;./&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__plen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;distribute&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.6.14&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;py2&lt;/span&gt;&lt;span class="mf"&gt;.7&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;egg&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;obotvinnik&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;workspace&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gscripts&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;obotvinnik&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;workspace&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rnaseqlib&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__plen&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="n"&gt;del&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__plen&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;__egginsert&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__egginsert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Because I &lt;em&gt;always&lt;/em&gt; wanted to import from the &lt;code&gt;virtualenv&lt;/code&gt; FIRST and never look at any other packages if I could help it. &lt;/p&gt;
&lt;p&gt;I honestly don't know how kosher this is but it worked for me. Hope it helps you!&lt;/p&gt;</summary><category term="pythonpath"></category><category term="python"></category></entry><entry><title>Most of the time, you fail</title><link href="/blog/2014/01/08/2014-01-08-most-of-the-time-you-fail/" rel="alternate"></link><updated>2014-01-08T10:54:13-08:00</updated><author><name>sciencemeetproductivity</name></author><id>tag:,2014-01-08:blog/2014/01/08/2014-01-08-most-of-the-time-you-fail/</id><summary type="html">&lt;p&gt;This year, I only applied to two fellowships: &lt;a href="http://www.hertzfoundation.org/"&gt;Hertz&lt;/a&gt; and &lt;a href="http://www.pdsoros.org/"&gt;Paul and Daisy Soros&lt;/a&gt;. And I didn't even get to the interview stage of either of them. But I'm gonna keep on trucking. After all, it's &lt;a href="http://www.pbs.org/wnet/ted-talks-education/speaker/dr-angela-lee-duckworth/"&gt;grit and determination that lead to success&lt;/a&gt;. So I'll have a lot more failures before I get to the success, but that's okay.&lt;/p&gt;</summary><category term="failure"></category><category term="fail"></category><category term="fellowships"></category><category term="persistence"></category><category term="grit"></category></entry><entry><title>How a Developer Learned Not to Be Racist and Sexist</title><link href="/blog/2013/12/25/2013-12-25-how-a-developer-learned-not-to-be-racist-and-sexist/" rel="alternate"></link><updated>2013-12-25T18:59:32-08:00</updated><author><name>sciencemeetproductivity</name></author><id>tag:,2013-12-25:blog/2013/12/25/2013-12-25-how-a-developer-learned-not-to-be-racist-and-sexist/</id><summary type="html">&lt;p&gt;&lt;a href="http://blog.epicodus.com/post/69888087443/how-a-developer-learned-not-to-be-racist-and-sexist"&gt;via&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.epicodus.com/post/69888087443/how-a-developer-learned-not-to-be-racist-and-sexist" class="tumblr_blog"&gt;epicodus&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I’m a developer. A few years ago, I moved to a new city and met some new friends who talked about racism and sexism more than I had ever thought about before. At first I was uncomfortable and didn’t like a lot what they were saying - and I definitely didn’t like when they told me something I said...&lt;/p&gt;&lt;/blockquote&gt;</summary></entry><entry><title>Prettyplotlib update!</title><link href="/blog/2013/12/23/2013-12-23-prettyplotlib-update/" rel="alternate"></link><updated>2013-12-23T18:06:00-08:00</updated><author><name>sciencemeetproductivity</name></author><id>tag:,2013-12-23:blog/2013/12/23/2013-12-23-prettyplotlib-update/</id><summary type="html">&lt;p&gt;&lt;a href="http://nbviewer.ipython.org/github/olgabot/prettyplotlib/blob/master/ipython_notebooks/Examples%20of%20everything%20pretty%20and%20plotted!.ipynb?create=1"&gt;Check it out!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Major changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Don't have to supply &lt;code&gt;ax&lt;/code&gt; object to everything&lt;/li&gt;
&lt;li&gt;All functions return an &lt;code&gt;ax&lt;/code&gt; object (let me know if this is not true!)&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;fill_between&lt;/code&gt; and &lt;code&gt;fill_betweenx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pcolormesh&lt;/code&gt; accepts &lt;code&gt;center_value&lt;/code&gt; keyword argument ('kwarg') to re-center diverging colormaps&lt;/li&gt;
&lt;li&gt;Don't change &lt;code&gt;rcParams&lt;/code&gt; upon import, do everything programmatically&lt;/li&gt;
&lt;li&gt;Major refactoring - every function is now in its own file, java-style (we'll see how that goes..)&lt;/li&gt;
&lt;/ul&gt;</summary><category term="python"></category><category term="dataviz"></category><category term="prettyplotlib"></category><category term="pydata"></category></entry><entry><title>You can code, too!</title><link href="/blog/2013/11/22/2013-11-22-you-can-code-too/" rel="alternate"></link><updated>2013-11-22T14:48:00-08:00</updated><author><name>sciencemeetproductivity</name></author><id>tag:,2013-11-22:blog/2013/11/22/2013-11-22-you-can-code-too/</id><summary type="html">&lt;p&gt;Recently, I've had several conversations with biologists who know they should probably learn to code, but the whole concept is so daunting and they're too busy with their research anyway. I've tried to convince them to pursue programming, not just because it'll make their research analyses faster and better, but because it's an incredibly powerful skill that anyone can learn.&lt;/p&gt;
&lt;p&gt;I see programming and engineering as just other methods of creating things that never were, like writing or art or music or dance. Before &lt;a href="http://en.wikipedia.org/wiki/Grace_Hopper"&gt;Grace Hopper&lt;/a&gt;, there were no compilers for computers, and everything had to be written in machine- and architecture-specific instructions. Before &lt;a href="http://www-cs-faculty.stanford.edu/~knuth/"&gt;Donald Knuth&lt;/a&gt; (also see his &lt;a href="http://www.youtube.com/watch?v=75Ju0eM5T2c"&gt;advice for young people video&lt;/a&gt;), typesetting math equations was a huge pain, and now we have &lt;a href="http://www.tug.org/texlive/"&gt;TeX&lt;/a&gt;, &lt;a href="http://en.wikipedia.org/wiki/LaTeX"&gt;LaTeX&lt;/a&gt; and derivatives to painlessly create beautiful equations. Before &lt;a href="http://en.wikipedia.org/wiki/Linus_Torvalds"&gt;Linus Torvalds&lt;/a&gt; and &lt;a href="http://en.wikipedia.org/wiki/Richard_stallman"&gt;Richard Stallman&lt;/a&gt;, creators of &lt;a href="https://www.gnu.org/gnu/linux-and-gnu.html"&gt;GNU/Linux&lt;/a&gt; (this is the operating systema upon which Mac OS is built), there was no unifying operating system that could be modified and changed for each user's needs. Before Microsoft and Apple computer, the concept of the personal computer didn't even exist, and it was thought to be just a fad that wouldn't hold.&lt;/p&gt;
&lt;p&gt;The reason I got into programming wasn't to make games or to hack into things. I started because I was working in a biology lab on protein binding microarrays, and I ran a graduate student's code which turned this glass slide with polka dots of where proteins bound to double-stranded DNA, into the information of the letters bound by this protein. Then, I took my first programming class in my sophomore year of college, and I only took it because it was required for Biological Engineering. It was in &lt;a href="http://www.python.org/"&gt;Python&lt;/a&gt;. I thought it was pretty cool, but the moment where I truly became a computational biologist was my second research experience where I coded up &lt;a href="http://www.nature.com/nbt/journal/v22/n10/full/nbt1004-1315.html"&gt;Hidden Markov Models&lt;/a&gt; in Python. The lab I was working in was a C-language lab so I decided to learn C and "translate" my program from Python to C. It was awesome. As much as &lt;code&gt;malloc&lt;/code&gt; and &lt;code&gt;free&lt;/code&gt; were annoying (though &lt;code&gt;valgrind&lt;/code&gt; helped!), it was so satisfying to see my program run 100x faster in C, and have the satisfaction that I learned this difficult language. Keep in mind that I had been coding for less than a year when I attempted this project.&lt;/p&gt;
&lt;p&gt;When I did my &lt;a href="http://bme.soe.ucsc.edu/"&gt;MS in bioinformatics&lt;/a&gt; at &lt;a href="http://www.ucsc.edu/"&gt;UC-Santa Cruz&lt;/a&gt;, I met Paola. She had studied biochemistry at &lt;a href="http://www.ucla.edu/"&gt;UCLA&lt;/a&gt; and came to UCSC for the program's bimolecular side, since it technically was &lt;em&gt;biomolecular engineering and&lt;/em&gt; bioinformatics. The first class we took for the program was a bioinformatics algorithms course, and this was the first time she had coded in her life. And she did &lt;em&gt;awesome.&lt;/em&gt; She fell in love with coding as I had, and left gel electrophoresis behind to take discrete math courses to boost her CS knowledge. She now works as an engineer at &lt;a href="https://www.surveymonkey.com/"&gt;Survey Monkey&lt;/a&gt;, getting hired after just over a year of coding. &lt;/p&gt;
&lt;p&gt;Another friend of mine, &lt;a href="http://www.nehalita.com/"&gt;Neha&lt;/a&gt; studied mechanical engineering in undergrad, went into consulting, but hated it. She applied to &lt;a href="https://www.hackerschool.com/"&gt;Hacker School&lt;/a&gt; twice &lt;a href="http://nerdneha.tumblr.com/post/48064403230/try-try-again-a-lesson-in-persistence"&gt;but didn't get in&lt;/a&gt;. She took &lt;a href="https://www.udacity.com/"&gt;Udacity&lt;/a&gt; classes on programming and applied again, this time getting in. Through three months of intensive programming and software development at Hacker School, Neha learned more than many people learn in years. She quickly found a job as a software engineer at &lt;a href="http://www.renttherunway.com/rtr_home"&gt;Rent the Runway&lt;/a&gt; and adores it.&lt;/p&gt;
&lt;p&gt;I'm incredibly proud of Paola and Neha for reinventing themselves. And the task of learning programming is not impossible, it just takes time and &lt;a href="http://www.huffingtonpost.com/tedtalks/angela-lee-duckworth-tedtalk_b_4277459.html"&gt;grit&lt;/a&gt;. And you can do it, too.&lt;/p&gt;
&lt;p&gt;Next time you sit down to analyze some differential expression or calculate some statistics, force yourself to do it in Python, specifically &lt;a href="http://pandas.pydata.org"&gt;pandas&lt;/a&gt;. Feel free to tweet at me with questions! My handle is &lt;a href="https://twitter.com/olgabot"&gt;@olgabot&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;EDIT:&lt;/h2&gt;
&lt;p&gt;I forgot to mention that one of my mentors, &lt;a href="http://en.wikipedia.org/wiki/Sean_Eddy"&gt;Sean Eddy&lt;/a&gt;, studied molecular biology for his PhD, and only after he earned his PhD did he get into coding. And he's made significant contributions to the field of computational biology through the sequence homology comparison program, &lt;a href="http://hmmer.janelia.org/"&gt;HMMER&lt;/a&gt;, RNA structure prediction through &lt;a href="http://infernal.janelia.org/"&gt;Infernal&lt;/a&gt;. If you can do it after a PhD, it's truly never too late!&lt;/p&gt;
&lt;p&gt;On the flip side, at both UC-Santa Cruz and UC-San Diego there are lifelong software engineers who have spent decades coding up programs, and have decided that they want to apply their programming skills to something else. So they go do a PhD in bioinformatics! Either way, from biology to coding, or from coding to biology, you end up in bioinformatics! Clearly the best field :)&lt;/p&gt;
&lt;h3&gt;Resources for learning to code&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.codecademy.com/"&gt;Codecademy&lt;/a&gt; (like a "code-academy"... get it??): Codecademy is an awesome resource for getting started with a language. I used it to learn Javascript!&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rosalind.info/problems/locations/"&gt;Rosalind.info&lt;/a&gt;: Named after Rosalind Franklin, whose X-ray crystallography experiments helped Watson and Crick discover that DNA is a double helix, Rosalind.info is an awesome resource for bioinformatics-specific problems. You start with translating DNA to RNA to Protein, then eventually you build your own genome assembler!&lt;/li&gt;
&lt;li&gt;&lt;a href="http://try.github.io/levels/1/challenges/1"&gt;try.github.io&lt;/a&gt;: Cool way to start learning code versioning (keeping backups of your code), which is ultra-important so you don't have to try to remember what you did six months ago.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.coursera.org/"&gt;Coursera&lt;/a&gt;: An online learning platform with tons of classes, including the awesome (Bioinformatics Algorithms)[https://www.coursera.org/course/bioinformatics] class that I helped design. I've also taken the &lt;a href="https://www.coursera.org/course/pgm"&gt;Probabalistic Graphical Models&lt;/a&gt; and &lt;a href="https://www.coursera.org/course/ml"&gt;Machine Learning&lt;/a&gt; courses. PGMs was good, but ML was a little watered down for my math major self, but it's a good intro overall.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.udacity.com/"&gt;Udacity&lt;/a&gt;: Another online learning platform. They have tons of courses on &lt;a href="https://www.udacity.com/course/cs101"&gt;Computer Science&lt;/a&gt;, &lt;a href="https://www.udacity.com/course/cs253"&gt;Web Development&lt;/a&gt;, &lt;a href="https://www.udacity.com/course/cs212"&gt;Design of Computer Programs&lt;/a&gt; (taught by &lt;a href="http://en.wikipedia.org/wiki/Peter_Norvig"&gt;Peter Norvig&lt;/a&gt;!!!), and many, many, more.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="python"></category><category term="programming"></category><category term="bioinformatics"></category></entry><entry><title>Succinct loop testing in Python</title><link href="/blog/2013/11/21/2013-11-21-succinct-loop-testing-in-python/" rel="alternate"></link><updated>2013-11-21T11:00:54-08:00</updated><author><name>sciencemeetproductivity</name></author><id>tag:,2013-11-21:blog/2013/11/21/2013-11-21-succinct-loop-testing-in-python/</id><summary type="html">&lt;p&gt;Since I'm a data scientist and all, my datasets can be too big to deal with when I'm initially testing an idea. So to test a for loop in Python with just a few examples, I used to do this kind of stuff:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;thing&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;things&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="n"&gt;thing&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But python's &lt;code&gt;zip&lt;/code&gt; is smart in that it stops when the shortest item in the zip stops!&lt;/p&gt;
&lt;p&gt;So you can do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;thing&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;things&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="n"&gt;thing&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And it will only show you the first 5 things! And it's so succinct! This is especially pertinent when your &lt;code&gt;things&lt;/code&gt; is a generator and you can't necessarily get the &lt;code&gt;len&lt;/code&gt; of it.&lt;/p&gt;
&lt;p&gt;Hope that helps you out! It saves me some headache, KeyboardInterrupts, and keystrokes.&lt;/p&gt;</summary><category term="python"></category><category term="for loops"></category><category term="testing"></category><category term="data science"></category></entry><entry><title>Everything is a performance: Make your fifteen minutes count</title><link href="/blog/2013/10/29/2013-10-29-everything-is-a-performance-make-your-fifteen-minutes/" rel="alternate"></link><updated>2013-10-29T12:41:29-07:00</updated><author><name>sciencemeetproductivity</name></author><id>tag:,2013-10-29:blog/2013/10/29/2013-10-29-everything-is-a-performance-make-your-fifteen-minutes/</id><summary type="html">&lt;p&gt;Musicians, actors, dancers, and other performers know how much preparation and practice goes into their few minutes (or a few hours) of actual performing. Consider a single dancer in a 1.5 hour performance. A professional 25-year-old dancer has probably been dancing since they were around 5, and they've logged thousands of hours practicing dance, and probably another few hundred preparing for this single performance. Before they learned the dance, the choreographer, who has also probably been dancing for the same amount of time, but has spent significant amount practicing coming up with new choreography, spent tens if not hundreds of hours coming with the choreography to be taught for this performance.&lt;/p&gt;
&lt;p&gt;Same with scientists - hours of work and preparation go into just the technical aspects of a manuscript, grant, or technical presentation, and even more time goes into editing, wordsmithing, and perfecting the delivery. But here the performance is the text, which must stand alone for all eternity as the written manifestation of this work.&lt;/p&gt;
&lt;p&gt;Why do we spend so much time before the actual performance? Because it's only the performance that people see and remember. If they see an uninspired performance of dull choreography, they'll remember that and not want to see that show/dancers/choreographer again. If they see a crappy paper, they'll remember the authors and know not to take their work too seriously in the future. And, in my case, if they see a crappy fellowship application, they'll toss it out.&lt;/p&gt;</summary><category term="performance"></category></entry><entry><title>UCSD Scientific Python User Group</title><link href="/blog/2013/10/07/2013-10-07-ucsd-scientific-python-user-group/" rel="alternate"></link><updated>2013-10-07T05:37:15-07:00</updated><author><name>sciencemeetproductivity</name></author><id>tag:,2013-10-07:blog/2013/10/07/2013-10-07-ucsd-scientific-python-user-group/</id><summary type="html">&lt;p&gt;Some of us grad students at UCSD who use primarily Python for our scientific research have created a user group, UCSD Scientific Python User Group. If you're interested, check out the github account and add yourself to the google group:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Github: https://github.com/ucsd-scientific-python/user-group&lt;/li&gt;
&lt;li&gt;Google groups: ucsd-scientific-python@googlegroups.com (add yourself here: https://groups.google.com/forum/#!forum/ucsd-scientific-python)&lt;/li&gt;
&lt;/ul&gt;</summary><category term="ucsd"></category><category term="python"></category><category term="scipy"></category></entry><entry><title>assets</title><link href="/blog/2013/08/31/2013-08-31-science-meet-productivity-turned-1-today-thank/" rel="alternate"></link><updated>2013-08-31T08:46:22-07:00</updated><author><name>sciencemeetproductivity</name></author><id>tag:,2013-08-31:blog/2013/08/31/2013-08-31-science-meet-productivity-turned-1-today-thank/</id><summary type="html">&lt;p&gt;&lt;img alt="" src="http://38.media.tumblr.com/7a3fd66b8615313896a779e15e10e32b/birthday1_1280.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Science, meet productivity turned 1 today! Thank you to YOU, the readers for taking time to look at my blog!&lt;/p&gt;</summary><category term="tumblr birthday"></category></entry><entry><title>prettyplotlib: Painlessly create beautiful matplotlib plots</title><link href="/blog/2013/08/21/2013-08-21-prettyplotlib-painlessly-create-beautiful-matplotlib/" rel="alternate"></link><updated>2013-08-21T13:20:00-07:00</updated><author><name>sciencemeetproductivity</name></author><id>tag:,2013-08-21:blog/2013/08/21/2013-08-21-prettyplotlib-painlessly-create-beautiful-matplotlib/</id><summary type="html">&lt;p&gt;A while back I wrote a few tutorials about how to work with Python's plotting library, &lt;code&gt;matplotlib&lt;/code&gt;, so that it behaves nicely and produces beautiful plots. Well, I got tired of tweaking every single figure individually so I wrote this library, &lt;a href="http://olgabot.github.io/prettyplotlib"&gt;&lt;code&gt;prettyplotlib&lt;/code&gt;&lt;/a&gt; to have pretty default plots in Python's &lt;code&gt;matplotlib&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;I truly believe that poor visualizations obstruct scientific progress, and this is my contribution.&lt;/p&gt;
&lt;p&gt;A couple motivating examples are below, but if you just want an overview, check out the &lt;a href="https://github.com/olgabot/prettyplotlib/wiki/Comparison-to-matplotlib"&gt;Comparison to matplotlib defaults&lt;/a&gt;, &lt;a href="https://github.com/olgabot/prettyplotlib/wiki/Gallery"&gt;Examples Gallery&lt;/a&gt;,  and &lt;a href="https://github.com/olgabot/prettyplotlib/wiki/Examples-with-code"&gt;Examples with code&lt;/a&gt; on Github.&lt;/p&gt;
&lt;p&gt;To install, do the usual &lt;code&gt;pip install&lt;/code&gt; stuff:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;prettyplotlib&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I truly hope you enjoy using this library! If you have any comments or suggestions, let me know!&lt;/p&gt;
&lt;h1&gt;&lt;code&gt;prettyplotlib.scatter&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;The default &lt;code&gt;matplotlib&lt;/code&gt; color cycle is not pretty to look at. What's even worse is
that if you just do a &lt;code&gt;scatter&lt;/code&gt; plot, then it doesn't cycle at all through any values&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pyplot&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;
&lt;span class="cp"&gt;# Set the random seed for consistency&lt;/span&gt;
&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# Show the whole color range&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;prettyplotlib&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;nshowing&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="n"&gt;matplotlib&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="err"&gt;`&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;scatter_matplotlib_default&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Matplotlib default scatterplot" src="https://raw.github.com/olgabot/prettyplotlib/master/ipython_notebooks/scatter_matplotlib_default.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Before &lt;code&gt;prettyplotlib&lt;/code&gt;: how to make nice plots&lt;/h2&gt;
&lt;p&gt;Now I'm going to take you through ALL the steps I used to take to make nice
looking plots.&lt;/p&gt;
&lt;p&gt;First, change the colors with &lt;code&gt;brewer2mpl&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# Get &amp;quot;Set2&amp;quot; colors from ColorBrewer (all colorbrewer scales: http:&lt;/span&gt;&lt;span class="c1"&gt;//bl.ocks.org/mbostock/5577023)&lt;/span&gt;
&lt;span class="n"&gt;set2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;brewer2mpl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Set2&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;qualitative&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;mpl_colors&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;set2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;facecolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The full code is,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pyplot&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;brewer2mpl&lt;/span&gt;

&lt;span class="cp"&gt;# Get &amp;quot;Set2&amp;quot; colors from ColorBrewer (all colorbrewer scales: http:&lt;/span&gt;&lt;span class="c1"&gt;//bl.ocks.org/mbostock/5577023)&lt;/span&gt;
&lt;span class="n"&gt;set2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;brewer2mpl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Set2&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;qualitative&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;mpl_colors&lt;/span&gt;

&lt;span class="cp"&gt;# Set the random seed for consistency&lt;/span&gt;
&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# Show the whole color range&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;set2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;scatter_matplotlib_improved_01_changed_colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Matplotlib scatter improved 01: changed colors" src="https://raw.github.com/olgabot/prettyplotlib/master/ipython_notebooks/scatter_matplotlib_improved_01_changed_colors.png" /&gt;&lt;/p&gt;
&lt;p&gt;This looks nice, almost like an impressionist painting, but it's still hard to
see overlaps here. So let's fill the symbols with &lt;code&gt;0.5&lt;/code&gt; opacity using
&lt;code&gt;alpha=0.5&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The full code is,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pyplot&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;brewer2mpl&lt;/span&gt;

&lt;span class="cp"&gt;# Get &amp;quot;Set2&amp;quot; colors from ColorBrewer (all colorbrewer scales: http:&lt;/span&gt;&lt;span class="c1"&gt;//bl.ocks.org/mbostock/5577023)&lt;/span&gt;
&lt;span class="n"&gt;set2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;brewer2mpl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Set2&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;qualitative&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;mpl_colors&lt;/span&gt;

&lt;span class="cp"&gt;# Set the random seed for consistency&lt;/span&gt;
&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# Show the whole color range&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;set2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;scatter_matplotlib_improved_02_added_alpha&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Matplotlib scatter improved 02: added alpha" src="https://raw.github.com/olgabot/prettyplotlib/master/ipython_notebooks/scatter_matplotlib_improved_02_added_alpha.png" /&gt;&lt;/p&gt;
&lt;p&gt;This is still pretty lovely and impressionist-y but I still didn't like that it
was hard to see when the dots overlapped. So let's add a black outline, and
specify that &lt;code&gt;color&lt;/code&gt; is just the &lt;code&gt;facecolor&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;edgecolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;black&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="n"&gt;facecolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The full code is,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pyplot&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;brewer2mpl&lt;/span&gt;

&lt;span class="cp"&gt;# Get &amp;quot;Set2&amp;quot; colors from ColorBrewer (all colorbrewer scales: http:&lt;/span&gt;&lt;span class="c1"&gt;//bl.ocks.org/mbostock/5577023)&lt;/span&gt;
&lt;span class="n"&gt;set2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;brewer2mpl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Set2&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;qualitative&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;mpl_colors&lt;/span&gt;

&lt;span class="cp"&gt;# Set the random seed for consistency&lt;/span&gt;
&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# Show the whole color range&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;set2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;edgecolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;black&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;facecolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;scatter_matplotlib_improved_03_added_outline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Matplotlib scatter improved 03: added black outline" src="https://raw.github.com/olgabot/prettyplotlib/master/ipython_notebooks/scatter_matplotlib_improved_03_added_outline.png" /&gt;&lt;/p&gt;
&lt;p&gt;Ack, but those lines are too thick ... let's think them down to &lt;code&gt;linewidth=0.15&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;edgecolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;black&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="n"&gt;facecolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;linewidth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The full code is,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pyplot&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;brewer2mpl&lt;/span&gt;

&lt;span class="cp"&gt;# Get &amp;quot;Set2&amp;quot; colors from ColorBrewer (all colorbrewer scales: http:&lt;/span&gt;&lt;span class="c1"&gt;//bl.ocks.org/mbostock/5577023)&lt;/span&gt;
&lt;span class="n"&gt;set2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;brewer2mpl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Set2&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;qualitative&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;mpl_colors&lt;/span&gt;

&lt;span class="cp"&gt;# Set the random seed for consistency&lt;/span&gt;
&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# Show the whole color range&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;set2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;edgecolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;black&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;facecolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;linewidth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;scatter_matplotlib_improved_04_thinned_outline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Matplotlib scatter improved 04: thinned out black outline" src="https://raw.github.com/olgabot/prettyplotlib/master/ipython_notebooks/scatter_matplotlib_improved_04_thinned_outline.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Now&lt;/em&gt; we're getting somewhere. This looks very lovely. Don't you want to just
cuddle up with that cute plot?&lt;/p&gt;
&lt;p&gt;What are those top and right axes lines really doing for us? They're boxing the
data in, but we can do that with our eyes from the other axis lines. So let's
remove the top and right axis lines using &lt;code&gt;ax.spines&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# Remove top and right axes lines (&amp;quot;spines&amp;quot;)&lt;/span&gt;
&lt;span class="n"&gt;spines_to_remove&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;spine&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;spines_to_remove&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;spine&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;set_visible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The full code is,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pyplot&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;brewer2mpl&lt;/span&gt;

&lt;span class="cp"&gt;# Get &amp;quot;Set2&amp;quot; colors from ColorBrewer (all colorbrewer scales: http:&lt;/span&gt;&lt;span class="c1"&gt;//bl.ocks.org/mbostock/5577023)&lt;/span&gt;
&lt;span class="n"&gt;set2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;brewer2mpl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Set2&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;qualitative&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;mpl_colors&lt;/span&gt;

&lt;span class="cp"&gt;# Set the random seed for consistency&lt;/span&gt;
&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# Show the whole color range&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;set2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;edgecolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;black&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;facecolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;linewidth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# Remove top and right axes lines (&amp;quot;spines&amp;quot;)&lt;/span&gt;
&lt;span class="n"&gt;spines_to_remove&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;spine&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;spines_to_remove&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;spine&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;set_visible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;scatter_matplotlib_improved_05_removed_top_right_spines&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Matplotlib scatter improved 05: removed top and right axis lines" src="https://raw.github.com/olgabot/prettyplotlib/master/ipython_notebooks/scatter_matplotlib_improved_05_removed_top_right_spines.png" /&gt;&lt;/p&gt;
&lt;p&gt;Oops, but we still have the ticks on the top and right axes. We'll need to get
rid of them. Actually, why don't we just get rid of all ticks altogether? We can
tell by the position of the number where it indicates, so we don't need an
additional tick.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# Get rid of ticks. The position of the numbers is informative enough of&lt;/span&gt;
&lt;span class="cp"&gt;# the position of the value.&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xaxis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_ticks_position&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;none&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yaxis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_ticks_position&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;none&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here's the full code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pyplot&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;brewer2mpl&lt;/span&gt;

&lt;span class="cp"&gt;# Get &amp;quot;Set2&amp;quot; colors from ColorBrewer (all colorbrewer scales: http:&lt;/span&gt;&lt;span class="c1"&gt;//bl.ocks.org/mbostock/5577023)&lt;/span&gt;
&lt;span class="n"&gt;set2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;brewer2mpl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Set2&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;qualitative&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;mpl_colors&lt;/span&gt;

&lt;span class="cp"&gt;# Set the random seed for consistency&lt;/span&gt;
&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# Show the whole color range&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;set2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;edgecolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;black&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;facecolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;linewidth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# Remove top and right axes lines (&amp;quot;spines&amp;quot;)&lt;/span&gt;
&lt;span class="n"&gt;spines_to_remove&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;spine&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;spines_to_remove&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;spine&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;set_visible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# Get rid of ticks. The position of the numbers is informative enough of&lt;/span&gt;
&lt;span class="cp"&gt;# the position of the value.&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xaxis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_ticks_position&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;none&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yaxis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_ticks_position&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;none&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;scatter_matplotlib_improved_06_removed_ticks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Matplotlib scatter improved 06: removed tick marks" src="https://raw.github.com/olgabot/prettyplotlib/master/ipython_notebooks/scatter_matplotlib_improved_06_removed_ticks.png" /&gt;&lt;/p&gt;
&lt;p&gt;Ahh, much better. But we won't stop there. Now we'll tweak the remaining pieces
of the figure. For the rest of the spines, let's thin the line down to &lt;code&gt;0.5&lt;/code&gt;
points instead of the default &lt;code&gt;1.0&lt;/code&gt; points. Also, we'll change it from pure
black to a slightly lighter dark grey. Here they are side by side:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;axes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;set_axis_bgcolor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;black&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;axes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;black&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;white&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fontsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;va&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;axes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;set_axis_bgcolor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;#&lt;/span&gt;&lt;span class="mi"&gt;262626&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;axes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;almost&lt;/span&gt; &lt;span class="n"&gt;black&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fontsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;white&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;va&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;black_vs_almost_black&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Matplotlib scatter improved 06: removed tick marks" src="https://raw.github.com/olgabot/prettyplotlib/master/ipython_notebooks/black_vs_almost_black.png" /&gt;&lt;/p&gt;
&lt;p&gt;So not a &lt;em&gt;huge&lt;/em&gt; difference, and the dark grey still looks pretty black, but it's
&lt;a href="http://ianstormtaylor.com/design-tip-never-use-black/"&gt;a little more pleasant on the eyes&lt;/a&gt; to use a dark grey instead of black. There's very few things in
nature that are truly black. Just look at shadows! They're just dark grey, or
blue, or red or purple. But I digress. Back to plotting libraries...&lt;/p&gt;
&lt;p&gt;To change the x-axis and y-axis line colors, and the outlines of the scatter
symbols from black to dark grey, we'll do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# For remaining spines, thin out their line and change the black to a slightly off-black dark grey&lt;/span&gt;
&lt;span class="n"&gt;almost_black&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;#&lt;/span&gt;&lt;span class="mi"&gt;262626&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;edgecolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;black&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;facecolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;linewidth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;spines_to_keep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;bottom&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;spine&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;spines_to_keep&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;spine&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;set_linewidth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;spine&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;set_color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;almost_black&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The full code is,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pyplot&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;brewer2mpl&lt;/span&gt;

&lt;span class="cp"&gt;# Get &amp;quot;Set2&amp;quot; colors from ColorBrewer (all colorbrewer scales: http:&lt;/span&gt;&lt;span class="c1"&gt;//bl.ocks.org/mbostock/5577023)&lt;/span&gt;
&lt;span class="n"&gt;set2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;brewer2mpl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Set2&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;qualitative&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;mpl_colors&lt;/span&gt;

&lt;span class="cp"&gt;# Set the random seed for consistency&lt;/span&gt;
&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# Save a nice dark grey as a variable&lt;/span&gt;
&lt;span class="n"&gt;almost_black&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;#&lt;/span&gt;&lt;span class="mi"&gt;262626&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# Show the whole color range&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;set2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;edgecolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;almost_black&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;facecolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;linewidth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# Remove top and right axes lines (&amp;quot;spines&amp;quot;)&lt;/span&gt;
&lt;span class="n"&gt;spines_to_remove&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;spine&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;spines_to_remove&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;spine&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;set_visible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# Get rid of ticks. The position of the numbers is informative enough of&lt;/span&gt;
&lt;span class="cp"&gt;# the position of the value.&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xaxis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_ticks_position&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;none&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yaxis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_ticks_position&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;none&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# For remaining spines, thin out their line and change the black to a slightly off-black dark grey&lt;/span&gt;
&lt;span class="n"&gt;spines_to_keep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;bottom&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;spine&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;spines_to_keep&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;spine&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;set_linewidth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;spine&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;set_color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;almost_black&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;scatter_matplotlib_improved_07_axis_black_to_almost_black&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Matplotlib scatter improved 07: changed axis lines from black to almost black" src="https://raw.github.com/olgabot/prettyplotlib/master/ipython_notebooks/scatter_matplotlib_improved_07_axis_black_to_almost_black.png" /&gt;&lt;/p&gt;
&lt;p&gt;This is nice. But if you look closely, the tick labels are still black :(  We
have to change them separately, using&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# Change the labels to the off-black&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xaxis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;almost_black&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yaxis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;almost_black&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And while we're at it, let's add a title and make it dark grey too.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# Change the axis title to off-black&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;almost_black&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;prettyplotlib&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;nshowing&lt;/span&gt; &lt;span class="n"&gt;improved&lt;/span&gt; &lt;span class="n"&gt;matplotlib&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="err"&gt;`&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The full code is,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pyplot&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;brewer2mpl&lt;/span&gt;

&lt;span class="cp"&gt;# Get &amp;quot;Set2&amp;quot; colors from ColorBrewer (all colorbrewer scales: http:&lt;/span&gt;&lt;span class="c1"&gt;//bl.ocks.org/mbostock/5577023)&lt;/span&gt;
&lt;span class="n"&gt;set2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;brewer2mpl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Set2&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;qualitative&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;mpl_colors&lt;/span&gt;

&lt;span class="cp"&gt;# Set the random seed for consistency&lt;/span&gt;
&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# Save a nice dark grey as a variable&lt;/span&gt;
&lt;span class="n"&gt;almost_black&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;#&lt;/span&gt;&lt;span class="mi"&gt;262626&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# Show the whole color range&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;set2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;edgecolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;almost_black&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;facecolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;linewidth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# Remove top and right axes lines (&amp;quot;spines&amp;quot;)&lt;/span&gt;
&lt;span class="n"&gt;spines_to_remove&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;spine&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;spines_to_remove&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;spine&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;set_visible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# Get rid of ticks. The position of the numbers is informative enough of&lt;/span&gt;
&lt;span class="cp"&gt;# the position of the value.&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xaxis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_ticks_position&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;none&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yaxis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_ticks_position&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;none&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# For remaining spines, thin out their line and change the black to a slightly off-black dark grey&lt;/span&gt;
&lt;span class="n"&gt;spines_to_keep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;bottom&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;spine&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;spines_to_keep&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;spine&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;set_linewidth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;spine&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;set_color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;almost_black&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# Change the labels to the off-black&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xaxis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;almost_black&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yaxis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;almost_black&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# Change the axis title to off-black&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;almost_black&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;prettyplotlib&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;nshowing&lt;/span&gt; &lt;span class="n"&gt;improved&lt;/span&gt; &lt;span class="n"&gt;matplotlib&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="err"&gt;`&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;scatter_matplotlib_improved_08_labels_black_to_almost_black&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Matplotlib scatter improved 08: changed labels to almost black" src="https://raw.github.com/olgabot/prettyplotlib/master/ipython_notebooks/scatter_matplotlib_improved_08_labels_black_to_almost_black.png" /&gt;&lt;/p&gt;
&lt;p&gt;If you remember in the original example, we also had an axis legend, using&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So let's add it to this code, too.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pyplot&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;brewer2mpl&lt;/span&gt;

&lt;span class="cp"&gt;# Get &amp;quot;Set2&amp;quot; colors from ColorBrewer (all colorbrewer scales: http:&lt;/span&gt;&lt;span class="c1"&gt;//bl.ocks.org/mbostock/5577023)&lt;/span&gt;
&lt;span class="n"&gt;set2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;brewer2mpl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Set2&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;qualitative&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;mpl_colors&lt;/span&gt;

&lt;span class="cp"&gt;# Set the random seed for consistency&lt;/span&gt;
&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# Save a nice dark grey as a variable&lt;/span&gt;
&lt;span class="n"&gt;almost_black&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;#&lt;/span&gt;&lt;span class="mi"&gt;262626&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# Show the whole color range&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;set2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;edgecolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;almost_black&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;facecolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;linewidth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# Remove top and right axes lines (&amp;quot;spines&amp;quot;)&lt;/span&gt;
&lt;span class="n"&gt;spines_to_remove&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;spine&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;spines_to_remove&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;spine&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;set_visible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# Get rid of ticks. The position of the numbers is informative enough of&lt;/span&gt;
&lt;span class="cp"&gt;# the position of the value.&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xaxis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_ticks_position&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;none&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yaxis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_ticks_position&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;none&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# For remaining spines, thin out their line and change the black to a slightly off-black dark grey&lt;/span&gt;
&lt;span class="n"&gt;almost_black&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;#&lt;/span&gt;&lt;span class="mi"&gt;262626&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;spines_to_keep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;bottom&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;spine&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;spines_to_keep&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;spine&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;set_linewidth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;spine&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;set_color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;almost_black&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# Change the labels to the off-black&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xaxis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;almost_black&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yaxis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;almost_black&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# Change the axis title to off-black&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;almost_black&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;prettyplotlib&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;nshowing&lt;/span&gt; &lt;span class="n"&gt;improved&lt;/span&gt; &lt;span class="n"&gt;matplotlib&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="err"&gt;`&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;scatter_matplotlib_improved_09_ugly_legend&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Matplotlib scatter improved 09: added ugly legend" src="https://raw.github.com/olgabot/prettyplotlib/master/ipython_notebooks/scatter_matplotlib_improved_09_ugly_legend.png" /&gt;&lt;/p&gt;
&lt;p&gt;There are many things I don't like about this legend.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;First of all, why does it have such a thick border line? What does that
really add to our interpretation of the legend? The black line is so thick that
it distracts from what we're trying to portray - which label goes with which
color.&lt;/li&gt;
&lt;li&gt;Why does it show three points? Does this legend think I'm dumb and can't
figure out which symbol goes with which label after one iteration, so it does it
three times?&lt;/li&gt;
&lt;li&gt;Finally, the legend labels are pure black. Maybe you notice it too, after
comparing to x-axis and y-axis lines and labels.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We'll accomplish these three things using this code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# Remove the line around the legend box, and instead fill it with a light grey&lt;/span&gt;
&lt;span class="cp"&gt;# Also only use one point for the scatterplot legend because the user will&lt;/span&gt;
&lt;span class="cp"&gt;# get the idea after just one, they don&amp;#39;t need three.&lt;/span&gt;
&lt;span class="n"&gt;light_grey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;248&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;legend&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frameon&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scatterpoints&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fontcolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;almost_black&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;rect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_frame&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_facecolor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;light_grey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_linewidth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# Change the legend label colors to almost black, too&lt;/span&gt;
&lt;span class="n"&gt;texts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;texts&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;texts&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;almost_black&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now our code is pretty huge ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pyplot&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;brewer2mpl&lt;/span&gt;

&lt;span class="cp"&gt;# Get &amp;quot;Set2&amp;quot; colors from ColorBrewer (all colorbrewer scales: http:&lt;/span&gt;&lt;span class="c1"&gt;//bl.ocks.org/mbostock/5577023)&lt;/span&gt;
&lt;span class="n"&gt;set2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;brewer2mpl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Set2&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;qualitative&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;mpl_colors&lt;/span&gt;

&lt;span class="cp"&gt;# Set the random seed for consistency&lt;/span&gt;
&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# Save a nice dark grey as a variable&lt;/span&gt;
&lt;span class="n"&gt;almost_black&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;#&lt;/span&gt;&lt;span class="mi"&gt;262626&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# Show the whole color range&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;set2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;edgecolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;almost_black&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;facecolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;linewidth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# Remove top and right axes lines (&amp;quot;spines&amp;quot;)&lt;/span&gt;
&lt;span class="n"&gt;spines_to_remove&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;spine&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;spines_to_remove&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;spine&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;set_visible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# Get rid of ticks. The position of the numbers is informative enough of&lt;/span&gt;
&lt;span class="cp"&gt;# the position of the value.&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xaxis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_ticks_position&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;none&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yaxis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_ticks_position&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;none&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# For remaining spines, thin out their line and change the black to a slightly off-black dark grey&lt;/span&gt;
&lt;span class="n"&gt;almost_black&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;#&lt;/span&gt;&lt;span class="mi"&gt;262626&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;spines_to_keep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;bottom&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;spine&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;spines_to_keep&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;spine&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;set_linewidth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;spine&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;set_color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;almost_black&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# Change the labels to the off-black&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xaxis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;almost_black&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yaxis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;almost_black&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# Change the axis title to off-black&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;almost_black&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# Remove the line around the legend box, and instead fill it with a light grey&lt;/span&gt;
&lt;span class="cp"&gt;# Also only use one point for the scatterplot legend because the user will &lt;/span&gt;
&lt;span class="cp"&gt;# get the idea after just one, they don&amp;#39;t need three.&lt;/span&gt;
&lt;span class="n"&gt;light_grey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;248&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;legend&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frameon&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scatterpoints&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;rect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_frame&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_facecolor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;light_grey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_linewidth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# Change the legend label colors to almost black, too&lt;/span&gt;
&lt;span class="n"&gt;texts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;texts&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;texts&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;almost_black&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;prettyplotlib&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;nshowing&lt;/span&gt; &lt;span class="n"&gt;improved&lt;/span&gt; &lt;span class="n"&gt;matplotlib&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="err"&gt;`&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;scatter_matplotlib_improved_10_pretty_legend&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Matplotlib scatter improved 10: beautiful legend" src="https://raw.github.com/olgabot/prettyplotlib/master/ipython_notebooks/scatter_matplotlib_improved_10_pretty_legend.png" /&gt;&lt;/p&gt;
&lt;p&gt;Aaaaaaaaaaand I got tired of doing all those steps, EVERY time I wanted to make a simple scatterplot. So I wrote
&lt;a href="http://github.com/olgabot/prettyplotlib"&gt;&lt;code&gt;prettyplotlib&lt;/code&gt;&lt;/a&gt;. Here's an
illustrative example of how awesome &lt;code&gt;prettyplotlib&lt;/code&gt; is, and how it will save
all the time you spent agonizing over making your &lt;code&gt;matplotlib&lt;/code&gt; plots beautiful.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;prettyplotlib&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;ppl&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;

&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ppl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="cp"&gt;# Set the random seed for consistency&lt;/span&gt;
&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# Show the whole color range&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ppl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;ppl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;prettyplotlib&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;nshowing&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="n"&gt;cycle&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;scatter&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;scatter_prettyplotlib_default&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Matplotlib scatter improved 10: beautiful legend" src="https://raw.github.com/olgabot/prettyplotlib/master/ipython_notebooks/scatter_prettyplotlib_default.png" /&gt;&lt;/p&gt;
&lt;p&gt;The only commands that were different from the very first example with
matplotlib are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ppl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;facecolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;none&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;instead of:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And a different legend command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ppl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;instead of:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you &lt;strong&gt;&lt;em&gt;really&lt;/em&gt;&lt;/strong&gt; want to get the original matplotlib style back in
prettyplotlib, you can do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;prettyplotlib&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;ppl&lt;/span&gt;

&lt;span class="cp"&gt;# Set the random seed for consistency&lt;/span&gt;
&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;#mpl.rcParams[&amp;#39;axis.color_cycle&amp;#39;] = [&amp;#39;blue&amp;#39;]&lt;/span&gt;

&lt;span class="cp"&gt;# Show the whole color range&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;facecolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;blue&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;edgecolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;black&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;linewidth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# Get back the top and right axes lines (&amp;quot;spines&amp;quot;)&lt;/span&gt;
&lt;span class="n"&gt;spines_to_remove&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;spine&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;spines_to_remove&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;spine&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;set_visible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# Get back the ticks. The position of the numbers is informative enough of&lt;/span&gt;
&lt;span class="cp"&gt;# the position of the value.&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xaxis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_ticks_position&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;both&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yaxis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_ticks_position&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;both&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# For all the spines, make their line thicker and return them to be black&lt;/span&gt;
&lt;span class="n"&gt;all_spines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;bottom&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;spine&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;all_spines&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;spine&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;set_linewidth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;spine&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;set_color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;black&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# Change the labels back to black&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xaxis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;black&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yaxis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;black&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# Change the axis title also back to black&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;black&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# Remove the line around the legend box, and instead fill it with a light grey&lt;/span&gt;
&lt;span class="cp"&gt;# Also only use one point for the scatterplot legend because the user will &lt;/span&gt;
&lt;span class="cp"&gt;# get the idea after just one, they don&amp;#39;t need three.&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;prettyplotlib&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;nrevert&lt;/span&gt; &lt;span class="n"&gt;everything&lt;/span&gt; &lt;span class="n"&gt;back&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="n"&gt;matplotlib&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;scatter_prettyplotlib_back_to_matplotlib_default&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Prettyplotlib back to matplotlib" src="https://raw.github.com/olgabot/prettyplotlib/master/ipython_notebooks/scatter_prettyplotlib_back_to_matplotlib_default.png" /&gt;&lt;/p&gt;
&lt;p&gt;Notice that the default calls of &lt;code&gt;ax.scatter&lt;/code&gt; and &lt;code&gt;ax.legend&lt;/code&gt; do the usual
thing. This is important, because for &lt;code&gt;prettyplotlib&lt;/code&gt; to work, you'll need to
use a syntax that's different from the usual &lt;code&gt;matplotlib&lt;/code&gt; one:  &lt;code&gt;ppl.scatter(ax,
x, y...)&lt;/code&gt; instead of &lt;code&gt;ax.scatter(x, y, ...)&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;prettyplotlib.pcolormesh&lt;/code&gt;: Improving heatmaps in &lt;code&gt;matplotlib&lt;/code&gt;&lt;/h2&gt;
&lt;h3&gt;Both positive and negative values&lt;/h3&gt;
&lt;p&gt;The default &lt;code&gt;matplotlib&lt;/code&gt; &lt;code&gt;pcolormesh&lt;/code&gt; heatmaps use a rainbow colormap, which has
been known to mislead data visualization. Specifically, &lt;a href="http://www.jwave.vt.edu/~rkri
z/Projects/create_color_table/color_07.pdf"&gt;&lt;em&gt;"the rainbow color map
is universally inferior to all other color maps"&lt;/em&gt;&lt;/a&gt;. Unfortunately, &lt;code&gt;matplotlib&lt;/code&gt; took
its default colors from MATLAB, and there the default is also rainbow.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pyplot&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;

&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;#ax.pcolor(np.random.randn((10,10)))&lt;/span&gt;
&lt;span class="cp"&gt;#ax.pcolor(np.random.randn(10), np.random.randn(10))&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pcolormesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;colorbar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;pcolormesh_matplotlib_default&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Matplotlib default scatterplot" src="https://raw.github.com/olgabot/prettyplotlib/master/ipython_notebooks/pcolormesh_matplotlib_default.png" /&gt;&lt;/p&gt;
&lt;p&gt;Using the same zero-centered randomly distributed gaussian distribution, we can
plot it using &lt;code&gt;prettyplotlib&lt;/code&gt; with a few modifications in syntax:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ppl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pcolormesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You'll notice that the "hot" (large, positive) color is still red, and the
"cold" (small, negative) color is still blue, but the in between colors are
gradations of red and blue, so it's easier to tell the difference between
values.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;prettyplotlib&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;ppl&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;

&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ppl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;ppl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pcolormesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;pcolormesh_prettyplotlib_default&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Matplotlib default scatterplot" src="https://raw.github.com/olgabot/prettyplotlib/master/ipython_notebooks/pcolormesh_prettyplotlib_default.png" /&gt;&lt;/p&gt;
&lt;p&gt;You may have also noticed similar changes as were made in &lt;code&gt;prettyplotlib.scatter&lt;/code&gt;,
where axis lines were removed, and blacks were changed to almost black.&lt;/p&gt;
&lt;h3&gt;Only positive (or negative) values&lt;/h3&gt;
&lt;p&gt;If your data is only positive (or negative), &lt;code&gt;matplotlib&lt;/code&gt; does nothing to change
the color scale. It's still a rainbow, but look at the colorbar, the range is
different (0 to 1 instead of -2 to +2)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;prettyplotlib&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;ppl&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;

&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ppl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pcolormesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uniform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;colorbar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;pcolormesh_matplotlib_positive_default&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Matplotlib default scatterplot" src="https://raw.github.com/olgabot/prettyplotlib/master/ipython_notebooks/pcolormesh_matplotlib_positive_default.png" /&gt;&lt;/p&gt;
&lt;p&gt;If your data is only positive or negative, then &lt;code&gt;prettyplotlib&lt;/code&gt; will auto-detect
this and use a single-color colormap. The default for positive data is the
&lt;code&gt;reds&lt;/code&gt; colormap.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;prettyplotlib&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;ppl&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;

&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ppl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;ppl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pcolormesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;pcolormesh_prettyplotlib_positive&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Matplotlib default scatterplot" src="https://raw.github.com/olgabot/prettyplotlib/master/ipython_notebooks/pcolormesh_prettyplotlib_positive.png" /&gt;&lt;/p&gt;
&lt;p&gt;And the default for negative data is the &lt;code&gt;blues&lt;/code&gt; colormap.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;prettyplotlib&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;ppl&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;

&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ppl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;ppl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pcolormesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;pcolormesh_prettyplotlib_negative&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Matplotlib default scatterplot" src="https://raw.github.com/olgabot/prettyplotlib/master/ipython_notebooks/pcolormesh_prettyplotlib_negative.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Add x or y tick labels&lt;/h2&gt;
&lt;p&gt;Plus you can add x- and y-ticklabels directly!&lt;/p&gt;
&lt;p&gt;Normally, when you add x- and y-ticklabels on &lt;code&gt;pcolormesh&lt;/code&gt; in &lt;code&gt;matplotlib&lt;/code&gt;,
they're not centered on the blocks, and you have to do a lot of annoying work
just getting a label on each box. You have to specify the xticks explicitly,
since you want to label each box.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;xticks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;yticks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;xticklabels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;yticklabels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lowercase&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_xticks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xticks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_xticklabels&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xticklabels&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_yticks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;yticks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_yticklabels&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;yticklabels&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The full, &lt;code&gt;matplotlib&lt;/code&gt; code is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;prettyplotlib&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;ppl&lt;/span&gt;
&lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;prettyplotlib&lt;/span&gt; &lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;

&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pcolormesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;colorbar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;xticks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;yticks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;xticklabels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;yticklabels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lowercase&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_xticks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xticks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_xticklabels&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xticklabels&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_yticks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;yticks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_yticklabels&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;yticklabels&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;pcolormesh_matplotlib_positive_labels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Matplotlib default scatterplot" src="https://raw.github.com/olgabot/prettyplotlib/master/ipython_notebooks/pcolormesh_matplotlib_positive_labels.png" /&gt;&lt;/p&gt;
&lt;p&gt;But &lt;code&gt;prettyplotlib.pcolormesh&lt;/code&gt; assumes that you want the &lt;code&gt;xticklabels&lt;/code&gt; and
&lt;code&gt;yticklabels&lt;/code&gt; on each block, and makes it easy to specify.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ppl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pcolormesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uniform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
               &lt;span class="n"&gt;xticklabels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
               &lt;span class="n"&gt;yticklabels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lowercase&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The full &lt;code&gt;prettyplotlib&lt;/code&gt; code is,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;prettyplotlib&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;ppl&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;

&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ppl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;ppl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pcolormesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
               &lt;span class="n"&gt;xticklabels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; 
               &lt;span class="n"&gt;yticklabels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lowercase&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;pcolormesh_prettyplotlib_labels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Matplotlib default scatterplot" src="https://raw.github.com/olgabot/prettyplotlib/master/ipython_notebooks/pcolormesh_prettyplotlib_labels.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Custom colormaps&lt;/h3&gt;
&lt;p&gt;Or pick your own colormap! The diverging colormap &lt;code&gt;PRGn&lt;/code&gt; or Purple and Green is
pretty nice. I usually use this website to look up the colormaps: &lt;a href="http://bl.ocks.org/mbostock/5577023"&gt;Every
Colorbrewer Scale&lt;/a&gt; (hover over the colors to get the name of the colormap)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;prettyplotlib&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;ppl&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;brewer2mpl&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;

&lt;span class="n"&gt;green_purple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;brewer2mpl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;PRGn&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;diverging&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;mpl_colormap&lt;/span&gt;

&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ppl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;ppl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pcolormesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
               &lt;span class="n"&gt;xticklabels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; 
               &lt;span class="n"&gt;yticklabels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lowercase&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
               &lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;green_purple&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;pcolormesh_prettyplotlib_labels_other_cmap_diverging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Matplotlib default scatterplot" src="https://raw.github.com/olgabot/prettyplotlib/master/ipython_notebooks/pcolormesh_prettyplotlib_labels_other_cmap_diverging.png" /&gt;&lt;/p&gt;
&lt;p&gt;Or if you want your own colormap for positive-only data:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;prettyplotlib&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;ppl&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;brewer2mpl&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;

&lt;span class="n"&gt;red_purple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;brewer2mpl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;RdPu&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Sequential&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;mpl_colormap&lt;/span&gt;

&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ppl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;ppl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pcolormesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
               &lt;span class="n"&gt;xticklabels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; 
               &lt;span class="n"&gt;yticklabels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lowercase&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
               &lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;red_purple&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;pcolormesh_prettyplotlib_labels_other_cmap_sequential&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Matplotlib default scatterplot" src="https://raw.github.com/olgabot/prettyplotlib/master/ipython_notebooks/pcolormesh_prettyplotlib_labels_other_cmap_sequential.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Log normalization or other parameters&lt;/h3&gt;
&lt;p&gt;Plus, this will take the usual parameters of &lt;code&gt;pcolormesh&lt;/code&gt; like if you want to
rescale your data to log-scale:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt; &lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LogNorm&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;ppl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pcolormesh&lt;/span&gt;&lt;span class="p"&gt;(...,&lt;/span&gt; &lt;span class="n"&gt;norm&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;LogNorm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vmin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;vmax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The full &lt;code&gt;prettyplotlib&lt;/code&gt; code is,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;prettyplotlib&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;ppl&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;brewer2mpl&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;
&lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt; &lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LogNorm&lt;/span&gt;

&lt;span class="n"&gt;red_purple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;brewer2mpl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;RdPu&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Sequential&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;mpl_colormap&lt;/span&gt;

&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ppl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;ppl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pcolormesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="n"&gt;xticklabels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; 
               &lt;span class="n"&gt;yticklabels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lowercase&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
               &lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;red_purple&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
               &lt;span class="n"&gt;norm&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;LogNorm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vmin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;vmax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;pcolormesh_prettyplotlib_labels_lognorm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Log-normalized heatmap" src="https://raw.github.com/olgabot/prettyplotlib/master/ipython_notebooks/pcolormesh_prettyplotlib_labels_lognorm.png" /&gt;&lt;/p&gt;
&lt;p&gt;And now you can easily make beautiful heatmaps!&lt;/p&gt;
&lt;h2&gt;That's all, folks!&lt;/h2&gt;
&lt;p&gt;That's my introduction to &lt;code&gt;prettyplotlib&lt;/code&gt; and why you need it. There are similar
examples for the other functions, but these ones for &lt;code&gt;ppl.scatter&lt;/code&gt; and &lt;code&gt;ppl.pcolormesh&lt;/code&gt; are the most
extensive.&lt;/p&gt;</summary><category term="python"></category><category term="matplotlib"></category><category term="prettyplotlib"></category><category term="programming"></category><category term="data visualization"></category><category term="dataviz"></category></entry><entry><title>The R script that will change your life</title><link href="/blog/2013/05/03/2013-05-03-the-r-script-that-will-change-your-life/" rel="alternate"></link><updated>2013-05-03T10:01:30-07:00</updated><author><name>sciencemeetproductivity</name></author><id>tag:,2013-05-03:blog/2013/05/03/2013-05-03-the-r-script-that-will-change-your-life/</id><summary type="html">&lt;p&gt;If you use the &lt;a href="http://www.r-project.org/"&gt;&lt;code&gt;R&lt;/code&gt;&lt;/a&gt; programming language, you probably know how much of a pain it is to keep your packages updated. You've run &lt;code&gt;update.packages(...)&lt;/code&gt; on the few that you want to keep up to date, but it's a pain in the neck to do that for every package, every time. Thankfully, where there's a will, there's a way!&lt;/p&gt;
&lt;p&gt;When &lt;code&gt;R&lt;/code&gt; starts up, it looks at your &lt;code&gt;.Rprofile&lt;/code&gt; file (if you have one), and runs it. Mine looks like this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#!/usr/bin/Rscript&lt;/span&gt;

&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;repos&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://cran.stat.ucla.edu/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ask&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CvM2SL2Test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;MASS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;verification&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;gtools&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ROCR&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;RColorBrewer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;heatmap.plus&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;gmodels&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;gplots&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;profr&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;proftools&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;colorRamps&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;download&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;which&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;rownames&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;installed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;download&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;download&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This script has three awesome features:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It will update ALL the packages I have without asking.&lt;/li&gt;
&lt;li&gt;It has an A-list of packages that I always want to have.&lt;/li&gt;
&lt;li&gt;It iterates over the A-list and makes sure they're updated.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It may be a little redundant, but having a few fail-safes never hurt anyone.&lt;/p&gt;
&lt;p&gt;Feel free to steal this &lt;code&gt;.Rprofile&lt;/code&gt; for your own usage.&lt;/p&gt;</summary><category term="R"></category><category term="programming"></category><category term="Rprofile"></category><category term="automation"></category><category term="updating packages"></category></entry><entry><title>How to fail (and sometimes win) at graduate fellowships</title><link href="/blog/2013/04/28/2013-04-28-how-to-fail-and-sometimes-win-at-graduate-fellowships/" rel="alternate"></link><updated>2013-04-28T19:02:00-07:00</updated><author><name>sciencemeetproductivity</name></author><id>tag:,2013-04-28:blog/2013/04/28/2013-04-28-how-to-fail-and-sometimes-win-at-graduate-fellowships/</id><summary type="html">&lt;p&gt;The title of this post is rather tongue-in-cheek, but is also meant to be a reality check. In applying to fellowships, you should apply to as many as possible because in all likelihood, you will not get one. You need to try as hard as possible to get one, combing over your essays and reading them aloud before you submit, but keep this reality in mind.&lt;/p&gt;
&lt;p&gt;This year I applied to six (6) graduate fellowships and won one, plus a Finalist for one. Last year I also applied to six (6) and won zero, though got Honorable Mention for one. Below is a table of all the fellowships I've applied to in the past two years, and their results. If the cell is empty, then I did not apply that year. &lt;/p&gt;
&lt;p&gt;In the spirit of sharing, such as those PIs who have &lt;a href="http://jabberwocky.weecology.org/2012/08/10/a-list-of-publicly-available-grant-proposals-in-the-biological-sciences/"&gt;publicly posted&lt;/a&gt; their funded and unfunded grant proposals, I'm posting ALL my essays. For each year I applied, I've put all my documents associated with each application so you can read them and compare the successful and unsuccessful essays. Some are rather personal, but that's the nature of the essay. Also, the NSF one includes a ratings sheet so you can delve into the mind of the assessors as well. I realize the file sizes are huge but blame Microsoft Word 2011, not me.&lt;/p&gt;
&lt;p&gt;After the table, I'll discuss advice for each fellowship.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Fellowship&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;2011-2012&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;2012-2013&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://www.krellinst.org/csgf/"&gt;DOE Computational Science Grad F'ship&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;no award [&lt;a href="https://www.dropbox.com/s/hzea04h10xomfxu/Olga.Botvinnik_DOE.CGSF_2011-2012.pdf"&gt;16.1MB PDF&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;no award [&lt;a href="https://www.dropbox.com/s/0py1vwwzed2t63l/Olga.Botvinnik_DOE.CSGF_2012-2013.pdf"&gt;18.5MB PDF&lt;/a&gt;]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://sites.nationalacademies.org/PGA/FordFellowships/PGA_047958"&gt;Ford Foundation Predoctoral F'ship&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;no award [&lt;a href="https://www.dropbox.com/s/htnj4ordwd1636c/Olga.Botvinnik_Ford_2012-2013_v2.pdf"&gt;94KB PDF&lt;/a&gt;]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://www.hertzfoundation.org/"&gt;Hertz Foundation F'ship&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;no award [&lt;a href="https://www.dropbox.com/s/a1bvcmtejzz2g76/Olga.Botvinnik_Hertz_2011-2012.pdf"&gt;28.8MB PDF&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Finalist&lt;/strong&gt; [&lt;a href="https://www.dropbox.com/s/6i5bi6l0w1w4cp8/Olga%20Botvinnik_Hertz_2012-2013_v6.pdf"&gt;33.2MB PDF&lt;/a&gt;]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://ndseg.asee.org/"&gt;National Defense Sci&amp;amp;Eng Grad F'ship&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;no award [&lt;a href="https://www.dropbox.com/s/cilqjyevprztbq2/Olga.Botvinnik_NDSEG_2011-2012.pdf"&gt;117KB PDF&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Awarded&lt;/strong&gt; [&lt;a href="https://www.dropbox.com/s/pv5tg8we83apa0z/Olga.Botvinnik_NDSEG_2012-2013.pdf"&gt;9.2MB PDF&lt;/a&gt;]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://www.npsc.org/"&gt;National Physical Science Consortium&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;?? [&lt;a href="https://www.dropbox.com/s/0uoa6wj25g8htte/Olga.Botvinnik_NPSC_NSF-style_2012-2013.pdf?m"&gt;10.1MB PDF&lt;/a&gt;]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://www.nsfgrfp.org/"&gt;NSF Grad Research F'ship&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Honorable Mention&lt;/strong&gt; [&lt;a href="https://www.dropbox.com/s/bm8c38810lgwyq4/Olga.Botvinnik_NSF_2011-2012.pdf"&gt;580KB PDF&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://www.pdsoros.org/"&gt;Paul &amp;amp; Daisy Soros F'ship for New Americans&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;no award [&lt;a href="https://www.dropbox.com/s/1l45r4zm7cah8pb/Olga.Botvinnik_PDSoros_2011-2012.pdf?m"&gt;13.1MB&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;no award [&lt;a href="https://www.dropbox.com/s/cr79a1zb7fkfbs0/Olga.Botvinnik_PDSoros_2012-2013_v7.pdf"&gt;661KB PDF&lt;/a&gt;]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://smart.asee.org/"&gt;SMART Scholarship&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;no award  [&lt;a href="https://www.dropbox.com/s/hlkzmkxj5bs704d/Olga.Botvinnik_DoD.SMART_2011-2012.pdf"&gt;115KB PDF&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Below are the tips I have for each of these fellowships, but keep in mind that I did not win most of them.&lt;/p&gt;
&lt;h2&gt;DOE Computational Science Graduate Fellowship&lt;/h2&gt;
&lt;p&gt;I can't give advice for this one, other than to apply. The first time I around I just talked about science, the second year I emphasized how my research needs lots of awesome computers but none of those strategies seemed to work. Those people also require a course plan, so maybe they though mine wasn't serious enough. No clue.&lt;/p&gt;
&lt;p&gt;Honestly I thought I had a pretty good shot at this, since I got to the Finalist stage for the Hertz Fellowship, but it goes to show you that each of these fellowship associations have subtly different standards.&lt;/p&gt;
&lt;h2&gt;Ford Foundation Predoctoral Fellowship&lt;/h2&gt;
&lt;p&gt;This fellowship is aimed at those who are going to increase diversity in the professoriate, whether by being a minority themselves, or by participating in programs that encourage minorities to pursue research and academia. I applied as a member of the latter group.&lt;/p&gt;
&lt;p&gt;I have to admit my mistake on this one. My undergrad can submit transcripts electronically, and I didn't check with them to see if they accepted e-transcripts. I got an email in February saying my application was incomplete, which sent me into a panic and I logged on to the transcripts website and overnighted a transcript to their office. But then I read the email again and saw that they "encourage you to apply and wish you continued success in all of your academic endeavors." :(&lt;/p&gt;
&lt;p&gt;Conclusion: &lt;strong&gt;check with the fellowship organization about their accepted transcript formats and whether they have received all your materials&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Hertz Foundation Fellowship&lt;/h2&gt;
&lt;p&gt;This is definitely one of the most prestigious fellowships. The first year I applied to this, I was not very scientifically mature, which you can see from my application. But in my 2012-2013 application, I had a vivid idea of what I would like to see in the future of science, and how we were going to get there.&lt;/p&gt;
&lt;p&gt;There are very few resources (save for &lt;a href="http://www.pgbovine.net/fellowship-tips.htm"&gt;here&lt;/a&gt;, &lt;a href="http://chemgradschool.blogspot.com/2009/02/shortly-after-submitting-my-application.html"&gt;here&lt;/a&gt;, and &lt;a href="http://djstrouse.com/guide-to-applying-to-us-science-phd-programs-and-fellowships/"&gt;here&lt;/a&gt;) for the Hertz so I'll detail my journey below.&lt;/p&gt;
&lt;p&gt;Note that the filename of the fellowship document is &lt;code&gt;Olga.Botvinnik_Hertz_2012-2013_v6.pdf&lt;/code&gt;. I did, indeed go through six versions.&lt;/p&gt;
&lt;h3&gt;The Interviews&lt;/h3&gt;
&lt;h4&gt;Round 1 Interview&lt;/h4&gt;
&lt;p&gt;On Nov. 16 2012, I received an email indicating I had been selected for a first-round interview! Last year, I received the rejection notice on Nov. 11 2012. Given that their due date is usually Nov 1st, it was nice to at least get a quick turnaround. An excerpt from the "Reject" email:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Thank you for your application to the Hertz Foundation Fellowship Program for graduate study in the applied sciences.  We greatly appreciate your interest in the Hertz Foundation Fellowship Program and we strongly encourage your continuing contributions to science and technology.&lt;/p&gt;
&lt;p&gt;We received over 600 applications this year and were able to choose only about 25% of those for personal interviews.  Unfortunately, we were not able to select you for an interview and therefore, you will not be part of the next round of our selection process.  We regret to inform you of this fact, particularly since the Foundation values the pursuit of applied science and engineering of creative young PhD candidates like yourself.&lt;/p&gt;
&lt;p&gt;Your application was given serious consideration.  In addition to scholastic excellence, there are many other factors associated with the objectives of the Hertz Foundation that we take into account when selecting candidates for interviews.  Our decision was based on the total assessment.&lt;/p&gt;
&lt;p&gt;Thank you for choosing a career in science and technology.  We are sure your efforts will make a difference in the world.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I asked for feedback, especially because one of my recommenders didn't submit their letter on time, but they said they do not reconsider applications and provided this note from the president of the foundation about the decision process:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We do not provide feedback on individual applications.   In our process, two reviewers read each application.  They look for not just academic excellence, but creativity, early demonstration of research capabilities, motivation and confidence, and the strong endorsement of those traits by referees.  We also look for leverage in the use of our resources.  If you are already well along in graduate school, we question what our contribution to an established research program may bring.&lt;/p&gt;
&lt;p&gt;If you were not selected for an interview, it does not mean that there was any defect in your application or that it was not considered and appreciated.  We rarely see an applicant that we would not choose to fund were resources available.   Like Rhodes, Marshall and Churchill, our success ratio is slightly under 3%.  Unlike them, we invest heavily in sequential one-on-one interviews that depend on the volunteer effort of many excellent scientists and engineers.  We must make a hard selection early on to optimize the use of these resources.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And the "Interview" email:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Congratulations! You have been chosen to advance to the interview stage of Hertz Fellowship selection process - as one of slightly more than 20% of this year's applicants. This involves a formal technical interview with one or more of our interviewers - who are in most cases former Hertz Fellows, themselves. This interview generally lasts 45 to 60 minutes. It is patterned after the PhD oral exam and you may be asked to perform calculations, discuss your previous research work, and to demonstrate the breadth and depth of your technical knowledge. Please bring paper and pen in the event you're asked to perform calculations during your interview.&lt;/p&gt;
&lt;p&gt;If you have new scientific papers that were not submitted with your application, please bring 2 copies for your interviewer. The materials will then be added to your file before it is reviewed for consideration for a second interview.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The interview itself in Los Angeles on Jan 26th 2013, and I carpooled there from San Diego with a couple other people at UCSD who also were invited to interview. I dressed in a suit, since they said it will be a &lt;em&gt;formal&lt;/em&gt; interview, and I was crazy nervous. But once I got into the room and started chatting with these crazy smart people, it wasn't that bad. It just felt like a conversation about science. They asked me random questions like about how does Purell work and why it's preferred over hand washing, about hydrogen bonding in glass, and some statistical questions. I had a really good time talking to them! I think being relaxed and taking my time with answering their questions made a huge difference.&lt;/p&gt;
&lt;h4&gt;Round 2 Interview&lt;/h4&gt;
&lt;p&gt;On Feb 1st 2013, I received an email notifying me of my Finalist status. Here's some of the email.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We are pleased to notify you that you have been designated a Hertz Fellowship Finalist - one of 50 selected from a pool of over 700 very talented applicants. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I was so excited! The day that I found out was the first day of my lab's ski/snowboard retreat at &lt;a href="http://www.bigbear.com/"&gt;Big Bear Lake/Mountain&lt;/a&gt;, and we were driving up. I was refreshing my email on my phone constantly until I found out at 11:55am.&lt;/p&gt;
&lt;p&gt;I used Zimride/Craigslist rideshares to get there (I'm having car troubles which is why I'm avoiding driving it long distances). I was a lot more nervous for this one, and I think it showed. They asked me to explain how I "got here," as in what was my journey in science. The questions where I really faltered were about where I have applied my own creativity in research, and some of the physics/stats questions. Though they were impressed that I had applied two years in a row, and pleased that I completely changed my application, because I guess they get people who submit the same thing. Which doesn't make sense to me because if it didn't work the year before, it probably won't work now...&lt;/p&gt;
&lt;p&gt;As they probed me about where I applied my creativity in research, at first I asked if I could talk about a teaching experience because I've taken creative approaches to presenting material. But they said no they weren't really interested because after all it wasn't like I invented inquiry-based learning (!). So then I racked my brain for where I have done something original in my research, and it dawned on me that most of my research has been following someone else's instructions. I've been creative in the implementation of these instructions and coded up nice solutions, but I haven't been the originator of the idea. They said "Impress us. This is where we want you to show off your accomplishments." And.. I didn't. &lt;/p&gt;
&lt;p&gt;After the interview I realized that in my Bioinformatics Algorithms class I formulated a really interesting biological problem as a solid computational problem, and this had never been though of before. So emailed that to them, but maybe it came off as too desperate, or not good enough in the face of the accomplishments of my peers. So in any case, I was in the process of doing something really creative.&lt;/p&gt;
&lt;p&gt;Another question they asked was about where I saw the frontier of science being in the future, and I said "non-destructive single cell genomics." And they they said "Great! So how would you do that?" And I had to invent all kinds of technologies to accomplish this wacky future, on the spot. That was pretty draining.&lt;/p&gt;
&lt;p&gt;With the stats questions, I should have got them because they were simple binomial distribution and heat diffusion through spherical volumes problems, but my brain was so dead from feeling inadequate about my lack of creativity, that I took a really long time to answer them, and then I didn't even get them in the end.&lt;/p&gt;
&lt;h3&gt;Tips from a Hertz Fellow (not me)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Practice some scenarios of questions they may ask of your past research, or a general "tell me about yourself" question. This will help you be less nervous&lt;/li&gt;
&lt;li&gt;Study the publications of your interviewers and try to find something in common. These are people with PhDs who are curious about the world, so it's better to get them thinking about your topic than for them to sit and come up with  &lt;em&gt;"What can we ask that s/he probably doesn't know?"&lt;/em&gt;-type questions, which are no fun.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks to Christian for the tips!&lt;/p&gt;
&lt;h3&gt;Conclusions on Hertz Fellowship&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;You need a strong vision for the future of science, supported by your current research.&lt;/li&gt;
&lt;li&gt;You need to have demonstrated creativity in your field by suggesting a new solution, approach, or technique that people go "wow, why didn't I think of that before?" Simply following instructions to perform other's research is not enough.&lt;/li&gt;
&lt;li&gt;Be quick on your feet with statistics, physics and differential equations.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;National Defense Science and Engineering Graduate (NDSEG) Fellowship&lt;/h2&gt;
&lt;p&gt;Last year I adapted my NSF fellowship for the NDSEG. The NDSEG is more competitive, with ~200 awards out of ~3000 applicants (~6.7%, whereas the NSF is ~2k awards out of 20k applicants, 10%). While by stats the NDSEG is more "prestigious," it is not as well-known. I'm not quite sure what makes a proposal for the NDSEG good, other than similar criteria to the NSF, so I suggest comparing my successful and unsuccessful fellowship applications. I've heard that you should describe potential military applications of your research in the NDSEG applications, but I didn't do that so... who knows.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: Others have informed me that the NDSEG seems to go after recent accomplishments such as publications, whereas the NSF is more about your potential for future research. Thanks to Reid for the tip!&lt;/p&gt;
&lt;h2&gt;National Physical Science Consortium&lt;/h2&gt;
&lt;p&gt;This seems like a relatively unknown fellowship because I discovered it randomly. They also have a terrible website where you generate a key instead of a login, and then the key can change... I had to use 3 different keys for this application. And they basically say to use your NSF essays for this application, which is why the header in the file is "NPSC/NSF-Style."&lt;/p&gt;
&lt;p&gt;As for advice, no idea on this one ... they still haven't gotten back to me (?!), even after I emailed them. So I'm guessing this is a "No."&lt;/p&gt;
&lt;h2&gt;National Science Foundation Graduate Research Fellowship Program (NSF GFRP)&lt;/h2&gt;
&lt;p&gt;In case you're wondering, I didn't apply to the NSF 2012-2013 because I have a Master's degree, which makes the NSF GRFP hate me.&lt;/p&gt;
&lt;p&gt;As the most well known of these fellowships, there are &lt;a href="http://www.alexhunterlang.com/nsf-fellowship"&gt;many&lt;/a&gt; &lt;a href="http://www.pgbovine.net/fellowship-tips.htm"&gt;fantastic&lt;/a&gt; &lt;a href="http://www.jenniferwang.org/nsf.html"&gt;resources&lt;/a&gt; for applying to the NSF GFRP (even more &lt;a href="http://www.profellow.com/tag/nsf-grfp/"&gt;here&lt;/a&gt;, &lt;a href="http://secondcriterion.wordpress.com/2012/10/25/four-tips-on-applying-for-the-nsf-grfp/"&gt;here&lt;/a&gt;, &lt;a href="http://biology.nd.edu/assets/31033/nsf_grf_tips_for_compiling_an_application.pdf"&gt;here&lt;/a&gt;, and &lt;a href="http://www.psychologicalscience.org/index.php/publications/observer/2012/september-12/ten-tips-for-applying-to-the-nsf-graduate-research-fellowship-program.html"&gt;here&lt;/a&gt;), so I will just give some general advice.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Research Proposal&lt;ol&gt;
&lt;li&gt;Speak fluently about your topic. Sound like you actually know what you are doing. This will come when you have many people read your fellowship app and ask questions about the details. The actual topic doesn't matter, but you need to convey that you are competent in your field.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Broader Impacts&lt;/strong&gt;: Your research should be benefitting the scientific community as a whole, whether you are depositing data publicly, contributing to open-source software, or training new people in science.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Personal Statement&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Broader Impacts&lt;/strong&gt;: Make sure you are doing some kind of outreach, either as a TA or a volunteer or something. And don't just do it for the fellowship because that's pretty obvious ... You should have a history of outreach.&lt;/li&gt;
&lt;li&gt;Tell the story of WHO is going to be doing this research. Grad fellowships fund people, not projects.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Previous Research&lt;ol&gt;
&lt;li&gt;If you feel "inadequate" because you didn't do research in undergrad but had classes instead, talk about a class that opened your mind beyond the traditional curriculum and into the unanswered questions of research.&lt;/li&gt;
&lt;li&gt;Again, speak fluently about your topic.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Broader Impacts&lt;/strong&gt;: How have your research experiences benefitted the scientific community, either at large, or a few people? Talk about it.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Thanks to Alex for emphasizing Broader Impacts!&lt;/p&gt;
&lt;p&gt;Outside of those three, the "topic" that you apply to is very important, as that determines who reads your application. In Bioinformatics, we're in a bit of a no-man's land since if we apply to Computer Science then they won't understand the biology and say our algorithm is crap, and if we apply to Biology, then they'll say we don't understand the biology, and gloss over the computational details. So you have to find a delicate balance.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: Finally, the NSF is the &lt;strong&gt;only&lt;/strong&gt; fellowship of these 8 (!) to give feedback, so if you only apply to one thing, apply to the NSF to get a feel for the process, and to receive feedback on your first application. Then in your next application, you will know what's going on and can embark on a more serious application. Thanks to Reid for pointing this out!&lt;/p&gt;
&lt;h2&gt;Paul and Daisy Soros Fellowship for New Americans&lt;/h2&gt;
&lt;p&gt;The PDSoros Fellowship is very difficult to get, and prestigious. It is for immigrants and children of immigrants (I was born in Russia so I count as an immigrant). Like the Hertz Fellowship, they ask you to focus on times when you have applied creativity in your field, and since I've had that realization with the Hertz, they probably also saw that I haven't been that creative. Unlike the Hertz, it is for people pursuing ANY graduate degree, so you are competing with people in law school, medical school, PhD programs, M.A., M.F.A., M.P.H., M.S., M.Eng., etc programs. So it is a very large pool.&lt;/p&gt;
&lt;p&gt;Plus I didn't proofread my essays enough. I looked through them later and saw typos and notes to myself, which is not professional.&lt;/p&gt;
&lt;h2&gt;Science, Mathematics, and Research for Transformation Scholarship&lt;/h2&gt;
&lt;p&gt;No idea. Didn't get any feedback about the first time, only this email:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This message is to inform you that you were not chosen as one of the 130 Round 1 Finalists for this year's award competition. Please note, a second round of up to 20 additional awards may be issued this month. Your application may be reconsidered for an award at that time. ASEE will keep you apprised of your status as new information becomes available. We appreciate your interest in the SMART Scholarship Program.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But I didn't get an award for the second round either. I didn't apply the second time because this fellowship requires a year of service in a Department of Defense lab after you graduate, and I wanted more freedom with my fellowships.&lt;/p&gt;</summary><category term="graduate fellowships"></category><category term="phd"></category><category term="grad school"></category><category term="essays"></category><category term="writing"></category><category term="nsf"></category><category term="ndseg"></category><category term="hertz"></category><category term="doe csgf"></category><category term="interviews"></category><category term="paul and daisy soros"></category><category term="ford foundation"></category></entry><entry><title>Beautiful boxplots and sassy small multiples</title><link href="/blog/2013/04/21/2013-04-21-beautiful-boxplots-and-sassy-small-multiples/" rel="alternate"></link><updated>2013-04-21T21:16:00-07:00</updated><author><name>sciencemeetproductivity</name></author><id>tag:,2013-04-21:blog/2013/04/21/2013-04-21-beautiful-boxplots-and-sassy-small-multiples/</id><summary type="html">&lt;p&gt;Last week, I &lt;a href="http://blog.olgabotvinnik.com/post/47682463203/implementing-graphic-design-principles-in-pythons"&gt;posted&lt;/a&gt; about implementing design principles in Python's graphic library, matplotlib. I received lots of great feedback, and made another tutorial, specifically about boxplots and &lt;a href="http://en.wikipedia.org/wiki/Small_multiple"&gt;&lt;em&gt;"small multiples"&lt;/em&gt;&lt;/a&gt;. Small multiples are a concept coined by Edward Tufte about having many plots using the exact same axes, allowing the reader to discover patterns by eye, though here I also add linear regression to aid the eye.&lt;/p&gt;
&lt;p&gt;Enjoy the tutorial &lt;a href="http://nbviewer.ipython.org/5432378"&gt;here&lt;/a&gt;!&lt;/p&gt;</summary><category term="python"></category><category term="programming"></category><category term="GraphicDesign"></category><category term="edwardtufte"></category><category term="boxplots"></category><category term="small multiples"></category><category term="matplotlib"></category></entry><entry><title>In India, 'no frills' hospitals offer $800 heart surgery</title><link href="/blog/2013/04/21/2013-04-21-in-india-no-frills-hospitals-offer-800-heart/" rel="alternate"></link><updated>2013-04-21T21:06:17-07:00</updated><author><name>sciencemeetproductivity</name></author><id>tag:,2013-04-21:blog/2013/04/21/2013-04-21-in-india-no-frills-hospitals-offer-800-heart/</id><summary type="html">&lt;p&gt;&lt;a href="http://www.globalpost.com/dispatch/news/afp/130421/india-no-frills-hospitals-offer-800-heart-surgery#1"&gt;via&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://nerdneha.tumblr.com/post/48584179572/in-india-no-frills-hospitals-offer-800-heart" class="tumblr_blog"&gt;nerdneha&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;&lt;blockquote class="link_og_blockquote"&gt;
&lt;div&gt;Using pre-fabricated buildings, stripping out air-conditioning and even training visitors to help with post-operative care, the group believes it can cut the cost of heart surgery to an astonishing 800 dollars.&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;It&amp;#8217;s so great to see people making an effort to make healthcare affordable. I can&amp;#8217;t see this catching on in the states (because of malpractice concerns, etc.) but, after reading so many depressing articles about why healthcare costs are so high, people like Narayana Hrudayalayagive me hope!&lt;/p&gt;&lt;/blockquote&gt;</summary></entry><entry><title>Implementing graphic design principles in Python's matplotlib</title><link href="/blog/2013/04/10/2013-04-10-implementing-graphic-design-principles-in-pythons/" rel="alternate"></link><updated>2013-04-10T22:09:00-07:00</updated><author><name>sciencemeetproductivity</name></author><id>tag:,2013-04-10:blog/2013/04/10/2013-04-10-implementing-graphic-design-principles-in-pythons/</id><summary type="html">&lt;p&gt;&lt;a href="http://nbviewer.ipython.org/5357268"&gt;via&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Tired of ugly &lt;a href="http://matplotlib.org/examples/pylab_examples/hist2d_log_demo.html"&gt;2d histograms&lt;/a&gt; and &lt;a href="http://matplotlib.org/examples/pylab_examples/demo_ribbon_box.html"&gt;bar charts&lt;/a&gt; in &lt;a href="http://matplotlib.org/"&gt;matplotlib&lt;/a&gt;? &lt;a href="http://www.amazon.com/Beautiful-Evidence-Edward-R-Tufte/dp/0961392177/ref=pd_sim_b_3"&gt;Read&lt;/a&gt; about &lt;a href="http://www.amazon.com/Visual-Display-Quantitative-Information/dp/0961392142"&gt;good&lt;/a&gt; &lt;a href="http://www.amazon.com/Envisioning-Information-Edward-R-Tufte/dp/0961392118/ref=pd_sim_b_1"&gt;chart&lt;/a&gt; &lt;a href="http://www.amazon.com/Visual-Explanations-Quantities-Evidence-Narrative/dp/0961392126/ref=pd_sim_b_2"&gt;design&lt;/a&gt; but not really sure how to implement it? Check out my talk/tutorial on implementing graphic design principles in Python's matplotlib! I gave this talk on April 10th 2013 to &lt;a href="https://github.com/ucsd-scientific-python"&gt;UCSD's Scientific Python User Group&lt;/a&gt; (aka "Python with Pizza") and used principles from &lt;a href="http://www.edwardtufte.com/"&gt;Edward Tufte&lt;/a&gt;'s books to improve plots in Python's matplotlib. &lt;/p&gt;
&lt;p&gt;Click the title to check it out and let me know what you think!&lt;/p&gt;</summary><category term="python"></category><category term="programming"></category><category term="matplotlib"></category><category term="tutorial"></category><category term="edwardtufte"></category><category term="graphicdesign"></category></entry><entry><title>Single-cell genomics will change the world</title><link href="/blog/2013/03/17/2013-03-17-single-cell-genomics-will-change-the-world/" rel="alternate"></link><updated>2013-03-17T22:06:00-07:00</updated><author><name>sciencemeetproductivity</name></author><id>tag:,2013-03-17:blog/2013/03/17/2013-03-17-single-cell-genomics-will-change-the-world/</id><summary type="html">&lt;p&gt;In the future, you will know exactly which strain of influenza, Hepatitis C, or HIV infected you, and if there are any other parasites floating around in your blood. If you're not sure about the origins of your meat, you could sequence it to check for pathogens, the biodiversity of the cows it came from, and its environment to make sure it was truly grass-fed. When you get your hair dyed or permed, you'll also get a scalp treatment which changes the genetics of your hair so it conforms to whatever change you're getting. Bioterrorism officials will be able to detect virulent threats at the most minuscule amount.&lt;/p&gt;
&lt;p&gt;All this sounds very science-fiction, but I believe we are hurtling towards an exciting future in which biology will play an unprecedented role, due to the current research in single-cell genomics.&lt;/p&gt;
&lt;p&gt;Single cell genomics is an exploding field right now, due to DNA amplification techniques introduced in &lt;a href="http://en.wikipedia.org/wiki/Multiple_displacement_amplification"&gt;2001&lt;/a&gt; improved upon in &lt;a href="http://en.wikipedia.org/wiki/MALBAC"&gt;2012&lt;/a&gt;, and novel &lt;a href="http://www.nanoporetech.com/"&gt;single-molecule sequencing methods&lt;/a&gt; which require no amplification at all. For most high-throughput sequencing, the genome-wide sequencing you may have heard about through large efforts such as the &lt;a href="http://www.personalgenomes.org/"&gt;Personal Genome Project&lt;/a&gt;, the &lt;a href="http://www.genome.gov/10005107"&gt;ENCODE&lt;/a&gt; project, or &lt;a href="http://cancergenome.nih.gov/"&gt;The Cancer Genome Atlas&lt;/a&gt;, you need a large amount of genetic starting material. This means that to get any usable results, you need to take a large population of cells (~100,000), grind them up, make thousands of copies of the DNA, then send the DNA for sequencing.&lt;/p&gt;
&lt;p&gt;Right now we are treating tissues as if they are an entire country like the United States, making stereotypes about everyone that lives here based off a few interactions. But the US is composed of &lt;em&gt;people&lt;/em&gt;, individuals who work hard and make tough decisions every day. We simply cannot assume everyone is exactly the same.&lt;/p&gt;
&lt;p&gt;The advent of single-cell genomics completely changes this paradigm that we need thousands of cells to understand biology. Instead of treating a heterogenous soup of cells such as a tissue as a homogenous population, for example, assuming every cell in the heart or liver or kidney or cancer tumor is exactly the same (which we know from physiology to be completely false), we can study individual cells and their solo struggles. &lt;/p&gt;
&lt;p&gt;From single-cell research, we can finally study tiny amounts of cells. And soon, technology will be good enough that individuals can afford their own sequencers. The &lt;a href="http://www.illumina.com/systems/miseq.ilmn"&gt;Illumina MiSeq&lt;/a&gt; is the closest thing we have right now, but it's still too expensive and the bioinformatics isn't developed enough for a &lt;em&gt;blood sample --&amp;gt; ??? --&amp;gt; profit!&lt;/em&gt;-type experience. In the future, we can sequence individual cells in your blood to predict your current viral load, a key component of health in someone living with HIV. You'll be able to perform your own quality control of the food in your home, even checking which farm those "heirloom" tomatoes came from, or using an advanced protocol to check for environmental effects (pesticides, soil quality, etc) via epigenetics such as &lt;a href="http://en.wikipedia.org/wiki/Bisulfite_sequencing"&gt;bisulfite methylation sequencing of DNA&lt;/a&gt;, &lt;a href="http://en.wikipedia.org/wiki/Histone#Functions_of_histone_modifications"&gt;histone modifications&lt;/a&gt; or &lt;a href="http://www.sciencedaily.com/releases/2012/05/120517131655.htm"&gt;methylated RNA&lt;/a&gt; (high-throughput methods not yet invented!). When you get your hair treated, you'll provide your genome sequence and the hair technician will match your desired hair genes with your current genes, and use that to create a &lt;a href="http://en.wikipedia.org/wiki/Gene_therapy"&gt;gene therapy&lt;/a&gt; so that you don't have to come in for root touch-ups - your roots will already be the correct color or level of curliness! Finally, we'll be able to detect any smidgen of genetic material lying around, and halt any bioterrorism threat in its tracks.&lt;/p&gt;
&lt;p&gt;Single-cell genomics will change the world.&lt;/p&gt;</summary></entry><entry><title>The essence of the problem</title><link href="/blog/2013/03/04/2013-03-04-the-essence-of-the-problem/" rel="alternate"></link><updated>2013-03-04T05:48:00-08:00</updated><author><name>sciencemeetproductivity</name></author><id>tag:,2013-03-04:blog/2013/03/04/2013-03-04-the-essence-of-the-problem/</id><summary type="html">&lt;p&gt;&lt;img alt="" src="http://farm6.staticflickr.com/5071/7233714460_7c670fd26b_z.jpg" /&gt;
&lt;em&gt;Vanilla essence. &lt;a href="http://www.flickr.com/photos/pejrm/7233714460/"&gt;Flickr: pejrm&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In one of my classes, the main project is to formulate a biological problem as a computational problem. This formulation should be such that you can give your computational problem formulation to a "genius computer science slave" (aka you are the slave, and hopefully the genius will come) and they could come up with an algorithm to solve it.&lt;/p&gt;
&lt;p&gt;I'm really excited about my problem formulation, which is a new method of sequence assembly, but every time I met with the professor to discuss my formulation, he wanted me to further simplify the problem. At first, I was too hung up on the quality of the sequencing reads, the fact that they are paired-end, etc. My professor prodded me towards a simpler and simpler formulation, the "essence of the problem." And at this essence of the problem, the solution becomes obvious.&lt;/p&gt;
&lt;p&gt;This reminds me of my &lt;a href="http://blog.olgabotvinnik.com/post/30674921280/how-to-be-fabulously-successful-eric-lander"&gt;post about Eric Lander&lt;/a&gt;, where he talked about "struggling with a problem" in his interview, and that at some point in the struggle, "the structure of the problem becomes clear, and the path through it becomes clear." I couldn't have figured out the essence of the problem without the struggle I went through.&lt;/p&gt;
&lt;p&gt;Similarly, I see the "essence" of cello playing as playing these notes, in this order. I know this is a gross oversimplification, but this what &lt;a href="http://www.celloloft.com/"&gt;my cello teacher&lt;/a&gt; prescribes as the first step in learning a new piece. And I agree with him - if you're not comfortable playing these notes in this order, no amount of musicality or phrasing will save you. Once you have these notes down, you can then add bowings, rhythm, phrasing, etc to create a beautiful piece. Maybe the phrasing and performance just falls into place because of the order and rhythm of the notes. But you had to start at the essence first.&lt;/p&gt;</summary></entry><entry><title>Startups, life, learning and happiness: The Anti-Todo List</title><link href="/blog/2012/11/18/2012-11-18-startups-life-learning-and-happiness-the-anti-todo/" rel="alternate"></link><updated>2012-11-18T06:01:35-08:00</updated><author><name>sciencemeetproductivity</name></author><id>tag:,2012-11-18:blog/2012/11/18/2012-11-18-startups-life-learning-and-happiness-the-anti-todo/</id><summary type="html">&lt;p&gt;&lt;a href="http://joel.is/post/35549504055/the-anti-todo-list"&gt;via&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
Really like this concept of logging your finished items for the day
rather than setting unreasonable goals to accomplish.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://joel.is/post/35549504055/the-anti-todo-list"&gt;joelgascoigne&lt;/a&gt;:&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;
&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="" src="http://joelg.cc/KpQT/anti-todo-list.png" /&gt;&lt;/p&gt;
&lt;p&gt;For some time, I’ve gradually realised that my day is not only
occupied by tasks from my todo list. Often, &lt;strong&gt;there are lots of other
tasks which deserve time in my day just as much as those I have in my
todo list&lt;/strong&gt;. Previously, I found that these extra tasks detracted
massively from my feeling...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/p&gt;

&lt;/p&gt;</summary></entry><entry><title>How to set Helvetica as the default sans-serif font in Matplotlib</title><link href="/blog/2012/11/15/2012-11-15-how-to-set-helvetica-as-the-default-sans-serif-font-in/" rel="alternate"></link><updated>2012-11-15T16:39:00-08:00</updated><author><name>sciencemeetproductivity</name></author><id>tag:,2012-11-15:blog/2012/11/15/2012-11-15-how-to-set-helvetica-as-the-default-sans-serif-font-in/</id><summary type="html">&lt;p&gt;If you're a typography junkie like me, you're probably sick of seeing Bitstream Vera Sans as the typesetting font for &lt;a href="http://python.org/"&gt;Python&lt;/a&gt;'s plotting library, &lt;a href="http://matplotlib.org/"&gt;Matplotlib&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Just look at it:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://media.tumblr.com/tumblr_mdjt6nmDvg1rw6gvj.png" /&gt;&lt;/p&gt;
&lt;p&gt;So ugly, I know.&lt;/p&gt;
&lt;p&gt;While Helvetica is a &lt;a href="http://www.helveticafilm.com/"&gt;controversial&lt;/a&gt; font, it is  simple, clean, and undisputedly easy to read. In my scientific figures, I'm not going for originality in the typography, I just want it clean and readable. And, as I use Helvetica in my own documents, I want my plot text and my document text to match, without having to go into Adobe Illustrator and change it all.&lt;/p&gt;
&lt;h2&gt;If you've tried to add Helvetica by editing your &lt;code&gt;.matplotlibrc&lt;/code&gt; file&lt;/h2&gt;
&lt;p&gt;You've probably seen this error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Library&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Frameworks&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;EPD64&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;framework&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Versions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;7.3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;python2&lt;/span&gt;&lt;span class="mf"&gt;.7&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;font_manager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1216&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UserWarning&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;findfont&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Font&lt;/span&gt; &lt;span class="n"&gt;family&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;sans&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;serif&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Falling&lt;/span&gt; &lt;span class="n"&gt;back&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;Bitstream&lt;/span&gt; &lt;span class="n"&gt;Vera&lt;/span&gt; &lt;span class="n"&gt;Sans&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Adding Helvetica to the default font list&lt;/h2&gt;
&lt;p&gt;Helvetica is stored in OS X as a &lt;code&gt;.dfont&lt;/code&gt; file which is inaccessible to Matplotlib, so we need to make it accessible. We will do this in six (6) steps.&lt;/p&gt;
&lt;h3&gt;1. Download and install &lt;em&gt;Fondu&lt;/em&gt; to convert Mac-Helvetica to ttf-Helvetica&lt;/h3&gt;
&lt;p&gt;EDIT: changed source &lt;code&gt;.tgz&lt;/code&gt; install to homebrew install.&lt;/p&gt;
&lt;p&gt;To install &lt;em&gt;Fondu&lt;/em&gt;, use &lt;a href="http://mxcl.github.io/homebrew/"&gt;&lt;code&gt;homebrew&lt;/code&gt;&lt;/a&gt;, the "missing package manager for OSX." It's really fantastic, downloading and installing dependencies automagically for each package.&lt;/p&gt;
&lt;p&gt;After you install &lt;code&gt;homebrew&lt;/code&gt;, the command  to install &lt;em&gt;Fondu&lt;/em&gt; is,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;fondu&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You may need to &lt;code&gt;brew update&lt;/code&gt; if you are getting an error.&lt;/p&gt;
&lt;h3&gt;2. Find Helvetica on your system&lt;/h3&gt;
&lt;p&gt;Can use 'FontBook.app' to find where Helvetica is on your system, but in all likelihood it's here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Library&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Fonts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Helvetica&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dfont&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Need to convert this font file to &lt;code&gt;.ttf&lt;/code&gt; via &lt;em&gt;Fondu&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;3. Find where matplotlib stores its data&lt;/h3&gt;
&lt;p&gt;To find out where matplotlib stores its data, we use this command. Note that these outputs are specific to my machine and Python installation.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;matplotlib&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matplotlib_fname&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Library&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Frameworks&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;EPD64&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;framework&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Versions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;7.3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;python2&lt;/span&gt;&lt;span class="mf"&gt;.7&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mpl&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;matplotlibrc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We need to put the &lt;code&gt;.ttf&lt;/code&gt; in: &lt;code&gt;matplotlib/mpl-data/fonts/ttf&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Library&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Frameworks&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;EPD64&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;framework&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Versions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;7.3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;python2&lt;/span&gt;&lt;span class="mf"&gt;.7&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mpl&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;fonts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ttf&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;fondu&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Library&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Fonts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Helvetica&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dfont&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;need&lt;/span&gt; &lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;access&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;into&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dfont&lt;/span&gt; &lt;span class="n"&gt;directory&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If this is not your own machine, copy the Helvetica file to somewhere you can edit, and then run fondu:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;font_copies&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;cp&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Library&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Fonts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Helvetica&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dfont&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;font_copies&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Library&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Frameworks&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;EPD64&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;framework&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Versions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;7.3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;python2&lt;/span&gt;&lt;span class="mf"&gt;.7&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mpl&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;fonts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ttf&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;fondu&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;font_copies&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Helvetica&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dfont&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Because we specified &lt;code&gt;-show&lt;/code&gt;, which in this program is the equivalent of &lt;code&gt;--verbose&lt;/code&gt;, we see all the files that are created. I don't know why there's a bunch of "Untitled" files but we'll just leave them there. Now you should have a bunch of &lt;code&gt;Helvetica*.ttf&lt;/code&gt; files in this directory. Let's double-check:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;Helvetica&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;   &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;argument&lt;/span&gt; &lt;span class="n"&gt;forces&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;single&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;
&lt;span class="n"&gt;Helvetica&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ttf&lt;/span&gt;
&lt;span class="n"&gt;HelveticaBold&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ttf&lt;/span&gt;
&lt;span class="n"&gt;HelveticaBoldOblique&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ttf&lt;/span&gt;
&lt;span class="n"&gt;HelveticaLight&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ttf&lt;/span&gt;
&lt;span class="n"&gt;HelveticaLightOblique&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ttf&lt;/span&gt;
&lt;span class="n"&gt;HelveticaOblique&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ttf&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;BUT WAIT. Before you can go on happily using Helvetica, you need to set Helvetica as the default font in your &lt;code&gt;.matplotlibrc&lt;/code&gt; file. Remember we found the location of your &lt;code&gt;matplotlibrc&lt;/code&gt; file using &lt;code&gt;matplotlib.matplotlib_fname()&lt;/code&gt; ?&lt;/p&gt;
&lt;h3&gt;4. Edit your &lt;code&gt;.matplotlibrc&lt;/code&gt; file&lt;/h3&gt;
&lt;p&gt;The &lt;a href="http://matplotlib.org/users/customizing.html"&gt;&lt;code&gt;matplotlibrc&lt;/code&gt;&lt;/a&gt; file gets read in every time you import matplotlib, and this is where you can set customizations such as default fonts and colors. Since we're good computer scientists, we're going to copy the original &lt;code&gt;.matplotlibrc&lt;/code&gt; file into a personal directory so it doesn't get over written when we update &lt;code&gt;matplotlib&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cp&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Library&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Frameworks&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;EPD64&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;framework&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Versions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;7.3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;python2&lt;/span&gt;&lt;span class="mf"&gt;.7&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mpl&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;matplotlibrc&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;matplotlibrc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now use your terminal-based editor of choice (mine is &lt;a href="www.gnu.org/s/emacs/"&gt;Emacs&lt;/a&gt;) to edit the file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;emacs&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;matplotlibrc&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;doesn&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;load&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;emacs&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="n"&gt;which&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;aren&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;compatible&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt; &lt;span class="n"&gt;terminal&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Find the line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#font.sans-serif     : Bitstream Vera Sans, Lucida Grande, Verdana, Geneva, Lucid, Arial, Helvetica, Avant Garde, sans-serif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This list of fonts is ordered in decreasing priority, meaning that Bitstream Vera Sans is used first, but if it's not there, use Lucida Grande, if that's not there, use Verdana, and so on. We want to uncomment it (remove the &lt;code&gt;#&lt;/code&gt;), and make Helvetica the first priority:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sans&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;serif&lt;/span&gt;     &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Helvetica&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Bitstream&lt;/span&gt; &lt;span class="n"&gt;Vera&lt;/span&gt; &lt;span class="n"&gt;Sans&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Lucida&lt;/span&gt; &lt;span class="n"&gt;Grande&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Verdana&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Geneva&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Lucid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Arial&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Helvetica&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Avant&lt;/span&gt; &lt;span class="n"&gt;Garde&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sans&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;serif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can remove Helvetica from the end of the list, but it shouldn't matter because the program will stop searching once it finds a font it knows.&lt;/p&gt;
&lt;h3&gt;5. Force matplotlib to re-scan the font lists and add Helvetica&lt;/h3&gt;
&lt;p&gt;Now we need to force matplotlib to re-create the font lists by removing the files.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;rm&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;fontList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;fontManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ttffont&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;watch&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;imports&lt;/span&gt; &lt;span class="n"&gt;fly&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt;
&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pyplot&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;just&lt;/span&gt; &lt;span class="n"&gt;removed&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I was stuck at this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;dlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/Library/Frameworks/EPD64.framework/Versions/7.3/lib/python2.7/site-packages/matplotlib/ft2font.so&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ft2font&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;dynamically&lt;/span&gt; &lt;span class="n"&gt;loaded&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Library&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Frameworks&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;EPD64&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;framework&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Versions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;7.3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;python2&lt;/span&gt;&lt;span class="mf"&gt;.7&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ft2font&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;for quite some time, but be patient. It &lt;em&gt;will&lt;/em&gt; finish :)&lt;/p&gt;
&lt;h3&gt;6. Plot your figures with Helvetica!&lt;/h3&gt;
&lt;p&gt;Helvetica!&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://media.tumblr.com/tumblr_mdjt64BRCu1rw6gvj.png" /&gt;&lt;/p&gt;
&lt;h2&gt;What if you want to use something &lt;em&gt;other&lt;/em&gt; than Helvetica?&lt;/h2&gt;
&lt;h3&gt;If you have a &lt;code&gt;.ttf&lt;/code&gt; file for the font&lt;/h3&gt;
&lt;p&gt;My favorite fixed-width font is &lt;a href="http://nodnod.net/2009/feb/12/adding-straight-single-and-double-quotes-inconsola/"&gt;Inconsolata-dz&lt;/a&gt; (this fixes the weird quotations of Inconsolata), which I use in all my terminal and code editing programs. If you installed the font before installing &lt;code&gt;matplotlib&lt;/code&gt;, you can probably just use it. Let's check the fontList file just to make sure:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;grep&lt;/span&gt; &lt;span class="n"&gt;Inconsolata&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;fontList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;
&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Inconsolata&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;olgabotvinnik&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Library&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Fonts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Inconsolata&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;otf&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Inconsolata&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dz&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;olgabotvinnik&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Library&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Fonts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Inconsolata&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dz&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;otf&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;aS&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;olgabotvinnik&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Library&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Fonts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Inconsolata&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;otf&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;aS&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;olgabotvinnik&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Library&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Fonts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Inconsolata&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dz&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;otf&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Looks like Inconsolata's there, so let's try it out! To change your default font on the fly, add this to your code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;matplotlib&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;mpl&lt;/span&gt;
&lt;span class="n"&gt;mpl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rcParams&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixed&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Inconsolata&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dz&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;mpl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rcParams&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;family&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;fixed&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;If you do not have a &lt;code&gt;.ttf&lt;/code&gt; file for the font&lt;/h3&gt;
&lt;p&gt;Say you're a huge fan of the sans-serif font &lt;a href="http://www.typography.com/fonts/font_overview.php?productLineID=100008"&gt;Gotham&lt;/a&gt; and want to use it for your plots. It's a proprietary font and will probably not appear as a &lt;code&gt;.ttf&lt;/code&gt; file. Follow the same steps 1-6, but find the location of your font using FontBook.app. Search for your font, and then either hit Command-R or click File --&amp;gt; Show in Finder. Then drag that file into Terminal and you'll get the full path name. I use this Finder-Terminal drag and drop trick all the time!&lt;/p&gt;
&lt;h3&gt;To edit your final &lt;code&gt;.pdf&lt;/code&gt; files in another program such as Illustrator&lt;/h3&gt;
&lt;p&gt;After producing your matplotlib figures, you may still want to tweak the axis or typography. To be able to do that, edit your &lt;code&gt;~/.matplotlibrc&lt;/code&gt; file from:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fonttype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fonttype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And that'll do it! Hat tip to Benjamin Reedlunn!&lt;/p&gt;
&lt;h2&gt;Appendix&lt;/h2&gt;
&lt;p&gt;The code and data used to create these files can be found &lt;a href="https://github.com/olgabot/coding-cucumber/tree/master/helvetica_disordered_protein"&gt;here&lt;/a&gt;. To create the file, run the command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;pondrfit_plots&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pondrfit&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Oct4&lt;/span&gt; &lt;span class="n"&gt;isoform&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;#&lt;/span&gt;&lt;span class="mf"&gt;0080FF&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;One of the hardest parts of this code was figuring out how to extract the start and end of the disordered regions (disorder score&amp;gt;0.5) when all I had was a sequential list of indices for each region. Turns out the trick is using both &lt;code&gt;itertools&lt;/code&gt; and &lt;code&gt;operator&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ranges&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df_disordered&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;inds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;itemgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ranges&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;inds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;inds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Where &lt;code&gt;df_disordered.index&lt;/code&gt; is the indices of all the rows whose disordered score is greater than 0.5. This code is quite magical to me, as I'm still figuring out &lt;code&gt;groupby&lt;/code&gt; and &lt;code&gt;map&lt;/code&gt; but I &lt;em&gt;will&lt;/em&gt; understand it!&lt;/p&gt;
&lt;h3&gt;OSX 10.7 (and older) Lion users&lt;/h3&gt;
&lt;p&gt;Apparently 'fondu' does not install on OSX 10.7 (I'm running 10.8) due to the XCode update in 10.8. One reader suggested &lt;a href="http://fontforge.org/"&gt;FontForge&lt;/a&gt; as an alternative to convert between &lt;code&gt;.dfont&lt;/code&gt; and &lt;code&gt;.ttf&lt;/code&gt; formats. Based on Apple's "Leave old OS's behind" strategy, I'm guessing users of anything older than 10.7 will also need to use FontForge.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; This same user informed me that FontForge does not perform the full conversion necessary for &lt;code&gt;matplotlib&lt;/code&gt; in iPython (below). If you are running into a similar problem, I suggest finding someone with OSX 10.8 and getting them to do it. I cannot post the files myself because Apple technically prohibits tampering with system fonts.&lt;/p&gt;
&lt;h3&gt;iPython&lt;/h3&gt;
&lt;p&gt;If you use &lt;a href="ipython.org"&gt;iPython&lt;/a&gt; notebooks, you may need to take an extra step for your rendered figures in &lt;code&gt;ipython notebook --pylab inline&lt;/code&gt; to appear with Helvetica. I did the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Shutdown and re-open my notebook. This purges all the imports. This can also be accomplished by interrupting and restarting the kernel from within the notebook, but I wanted a full reboot.&lt;/li&gt;
&lt;li&gt;Edit my both my &lt;code&gt;~/.bashrc&lt;/code&gt; and &lt;code&gt;./bash_profile&lt;/code&gt; (since I'm not sure which one matplotlib uses) to include the text: &lt;code&gt;export MPLCONFIGDIR=$HOME/.matplotlib&lt;/code&gt;, which should tell matplotlib to look in that directory for the configuration files, such as your &lt;code&gt;.matplotlibrc&lt;/code&gt; file.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Hope that helps!&lt;/p&gt;
&lt;h2&gt;EDIT: Potential issues with other fonts.&lt;/h2&gt;
&lt;p&gt;Thanks to Benjamin Reedlun about the tips for specifying other fonts - it may not be as straightforward as you hoped.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Olga, here are two other potential issues your readers might run into. I had success using your method with two different TrueType fonts, but then I tried to install TeXGyreHeros, a free Helvetica Clone with additional characters.&lt;/p&gt;
&lt;p&gt;1) I found TeXGyreHeros as OpenType files (.otf extension), so I opened them up using FontForge. When I went to save TeXGyreHeros as .ttf files, FontForge pointed out that, "The convention is that TrueType fonts should have an Em-size which is a power of 2." Each of the .otf font files have sizes of 1000. (In FontForge, Element &amp;gt; Font Info &amp;gt; General) Comparing the character sizes in TeXGyreHeros to those in a Helvetica.ttf, I decided to increase the size to 2^11 = 2048. After doing this, the sizes in TeXGyreHeros and Helvetica matched up reasonably well, so I saved TeXGyreHeros as .ttf files.&lt;/p&gt;
&lt;p&gt;2) I placed the TeXGyreHeros.ttf files in my matplotlib/mpl-data/fonts/ttf directory, rebuilt my font lists, and specified "TeXGyreHeros" as my default font in Matplotlib. However, Matplotlib could not find TeXGyreHeros. After much playing around, I found that the TeXGyreHeros.ttf files had an attribute called "Preferred Family". (In FontForge, go to Element &amp;gt; Font Info &amp;gt; TTF Names.) The "Preferred Family" was "TeX Gyre Heros" (with spaces between each word). I supplied Matplotlib the font filename, "TeXGyreHeros". Once I made the two names match, or deleted the "Preferred Family" attribute, then everything worked correctly. Looking back at the two previous TrueType fonts I installed, neither of them had the "Preferred Family" attribute, so that is why I did not run into this issue before.&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="matplotlib"></category><category term="helvetica"></category><category term="tutorial"></category></entry><entry><title>How to use Google's internet caching to your advantage</title><link href="/blog/2012/11/14/2012-11-14-how-to-use-googles-internet-caching-to-your-advantage/" rel="alternate"></link><updated>2012-11-14T18:47:14-08:00</updated><author><name>sciencemeetproductivity</name></author><id>tag:,2012-11-14:blog/2012/11/14/2012-11-14-how-to-use-googles-internet-caching-to-your-advantage/</id><summary type="html">&lt;p&gt;You've run into this problem: you search for something on the supposedly all-powerful Google search, click the link, but it's dead. Nothing's there. Not even a speck of information.&lt;/p&gt;
&lt;p&gt;But Google said there was!&lt;/p&gt;
&lt;p&gt;I ran into this exact problem for an assignment this week. We were supposed to use the Disordered Protein database &lt;a href="www.disprot.org"&gt;DisProt&lt;/a&gt; and use the &lt;a href="www.disprot.org/pondr-fit.php"&gt;PONDR-FIT&lt;/a&gt; algorithm to find a protein that is predicted to be disordered, but is not in the DisProt database. However, the DisProt servers went down as of noon yesterday. With the assignment due today, what are we to do? Well, the due date was pushed back but I figured out how to search Disprot even though it was down, and learned a bit about Google's &lt;a href="http://www.googleguide.com/cached_pages.html"&gt;internet caching&lt;/a&gt; (aka their plan to save all the knowledge ever publicly posted to the web.) in the process.&lt;/p&gt;
&lt;h2&gt;Viewing cached pages: step-by-step&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Do a Google search as usual&lt;/li&gt;
&lt;li&gt;Hover your cursor over the result you want, and you should see two arrowheads pointing to the right: &amp;gt;&amp;gt;   Click on them.&lt;/li&gt;
&lt;li&gt;A preview of your page should appear on the right.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Below is an example:&lt;/p&gt;
&lt;p&gt;&lt;img alt="How to view cached pages" src="http://media.tumblr.com/tumblr_mdicicTCHG1rw6gvj.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Turn on "Verbatim" mode to narrow your results&lt;/h2&gt;
&lt;p&gt;But what if you need to validate negative results, as we did for our assignment? Use "Verbatim" mode, which will stop auto-correcting your spelling to get you more result hits.&lt;/p&gt;
&lt;h3&gt;Without "Verbatim" mode&lt;/h3&gt;
&lt;p&gt;Without "Verbatim" mode, my "disprot oct4" query gets mangled to "disport oct4" and I get lyrics for some weird band I've never heard of.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://media.tumblr.com/tumblr_mdicq6iryf1rw6gvj.png" /&gt;&lt;/p&gt;
&lt;p&gt;To turn on "Verbatim" mode:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Do a Google search as usual&lt;/li&gt;
&lt;li&gt;Click "Search Tools" in the bar below the search box&lt;/li&gt;
&lt;li&gt;Click "All results" (you want to filter so you &lt;em&gt;don't&lt;/em&gt; get all results)&lt;/li&gt;
&lt;li&gt;Click "Verbatim"&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A visual tutorial is here:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://media.tumblr.com/tumblr_mdicxxZ91H1rw6gvj.png" /&gt;&lt;/p&gt;
&lt;h3&gt;With "Verbatim" mode&lt;/h3&gt;
&lt;p&gt;With "Verbatim" mode on, I get totally weird results which means that "oct4" is indeed nowhere to be found on DisProt!&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://media.tumblr.com/tumblr_mdicz6uC2H1rw6gvj.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Final note&lt;/h2&gt;
&lt;p&gt;Someone may have removed content from the internet for a reason such as copyright infringement. Please respect the owner of the intellectual property and do not use this method to crawl for copyrighted data.&lt;/p&gt;</summary><category term="google"></category><category term="disprot"></category><category term="internet caching"></category><category term="search tricks"></category><category term="tutorial"></category></entry><entry><title>Video</title><link href="/blog/2012/10/18/2012-10-18-arianna-huffington-on-sleep-she-also-reminds-us/" rel="alternate"></link><updated>2012-10-18T21:02:28-07:00</updated><author><name>sciencemeetproductivity</name></author><id>tag:,2012-10-18:blog/2012/10/18/2012-10-18-arianna-huffington-on-sleep-she-also-reminds-us/</id><summary type="html">&lt;p&gt;&lt;a href="None"&gt;via&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Arianna Huffington on sleep. She also reminds us to not &lt;a href="http://blog.olgabotvinnik.com/post/30675190853/glamorized-exhaustion-is-not-productivity"&gt;glamorize exhaustion&lt;/a&gt;! I'm posting this at ~9pm as I'm about to go to sleep. On that note, if you're looking at a computer screen late into the night, you should install &lt;a href="http://stereopsis.com/flux/"&gt;f.lux&lt;/a&gt; which will reduce the blue light your computer emits so you rest better.&lt;iframe src="http://embed.ted.com/talks/arianna_huffington_how_to_succeed_get_more_sleep.html" width="250" height="140" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen&gt;&lt;/iframe&gt;
&lt;iframe src="http://embed.ted.com/talks/arianna_huffington_how_to_succeed_get_more_sleep.html" width="400" height="225" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen&gt;&lt;/iframe&gt;
&lt;iframe src="http://embed.ted.com/talks/arianna_huffington_how_to_succeed_get_more_sleep.html" width="500" height="281" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen&gt;&lt;/iframe&gt;&lt;/p&gt;</summary><category term="glamorized exhaustion"></category><category term="sleep"></category></entry><entry><title>3 boring ways to be productive</title><link href="/blog/2012/09/29/2012-09-29-3-boring-ways-to-be-productive/" rel="alternate"></link><updated>2012-09-29T22:39:00-07:00</updated><author><name>sciencemeetproductivity</name></author><id>tag:,2012-09-29:blog/2012/09/29/2012-09-29-3-boring-ways-to-be-productive/</id><summary type="html">&lt;p&gt;What do President Obama and Facebook CEO Mark Zuckerburg have in common? They both wear basically the &lt;a href="http://www.vanityfair.com/politics/2012/10/michael-lewis-profile-barack-obama"&gt;same&lt;/a&gt; &lt;a href="http://www.quora.com/Mark-Zuckerberg-1/Why-does-Mark-Zuckerberg-always-wear-the-same-shirt"&gt;outfit&lt;/a&gt; every day. When asked why, both have similar answers, "it's one less decision I have to make in a day." [1,2]&lt;/p&gt;
&lt;p&gt;&lt;a href="http://psycnet.apa.org/journals/psp/74/5/1252/"&gt;Studies&lt;/a&gt; &lt;a href="http://www.amazon.com/Honest-Truth-About-Dishonesty-Everyone-Especially/dp/0062183591"&gt;have&lt;/a&gt; &lt;a href="http://psycnet.apa.org/journals/psp/94/5/883/"&gt;shown&lt;/a&gt; that making decisions, even tiny ones, deplete your mental energy for the more important ones [3,4,5]. Even choosing between candy bars takes away from the energy you could have used to solve a crucial problem!&lt;/p&gt;
&lt;p&gt;To put as much of my non-career life on autopilot, here are three habits I've formed that help me increase my productivity.&lt;/p&gt;
&lt;h1&gt;No. 1: Pick out your clothes and pack your bag the night before&lt;/h1&gt;
&lt;p&gt;To follow Obama and Zuckerburg, don't waste your energy on picking what you put on your body. What matters is that it's appropriate and that you're clothed.&lt;/p&gt;
&lt;p&gt;Yes, this is something a parent would say to their child, but it works! By the end of the day my brain is usually pretty drained, but doing something semi-mindless like putting my keys and wallet back into my bag is usually fine. I check the weather for the next day and asses my outfit situation. In the morning, I don't want to be wasting my time thinking about whether my bag is ready or not -- I want to &lt;em&gt;go!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In Southern California, this is usually "short sleeves or long?" But when I was in school in Boston, checking tomorrow's weather answered the more serious question of whether I needed snow boots or not.&lt;/p&gt;
&lt;h1&gt;No. 2: Exercise (almost) every day, at the same time&lt;/h1&gt;
&lt;p&gt;While I'm a morning person, exercising in the morning was completely repulsive to me! That's when my mind is the most fresh and when I can accomplish the most. Exercising in the morning is my body stealing time away from my mind. Until I realized I could work both my mind &lt;em&gt;and&lt;/em&gt; body in the morning! The author of &lt;a href="http://joel.is/post/24064139389/the-exercise-habit"&gt;this blog post&lt;/a&gt; wakes up at 5:50am, works for an hour, then goes to the gym 7am-8am, then comes home, has breakfast, and goes on with his day. (Obama)[] also touts the virtues of daily exercise.&lt;/p&gt;
&lt;p&gt;I experimented with this schedule of waking up, working, exercising, then getting on with the day. The difference in productivity on the days I worked out and the days I didn't was amazing. The days I worked out, I'd get almost 6 hours of serious mental work in. When I didn't, I'd only truly work for about three hours.&lt;/p&gt;
&lt;p&gt;So I decided to keep doing this, and now I'm waking up at  4:50am every weekday, working, then exercising 6am-7am (I started &lt;a href="http://www.beachbody.com/product/fitness_programs/insanity.do"&gt;Insanity&lt;/a&gt; two weeks ago), then getting ready and off for my day. I hate rushed mornings and it  takes me about an hour and a half to eat, make lunch, and get ready, but I'm still in the process of optimizing and parallel-processing my mornings. I'm aiming to get it under an hour, then under 45 minutes so I can catch my bus and get to lab before 8:15.&lt;/p&gt;
&lt;p&gt;It's important to keep your exercise at the same time every day because your body gets used to when it gets physically taxed. It's also been shown that people who exercise in the morning stick to daily workouts for longer.&lt;/p&gt;
&lt;h1&gt;No. 3: Minimize your decisions about food&lt;/h1&gt;
&lt;p&gt;Fortunately for me, I'm getting paid less than $30K a year as a graduate student so I can't afford to go out for meals every day. So I don't have to choose what to eat at lunch every day because it's already been figured out for me.&lt;/p&gt;
&lt;p&gt;I love cooking, but I despise cooking every day because I think it's a waste of time. Last year at Univ. Calif. - Santa Cruz, I would make a large batch of a fried rice or pasta dish each week, and then take those leftovers to lunch with me. I've been doing the same thing here at UC-San Diego. Check out this picture from my fridge:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Olga's refrigerator" src="https://lh6.googleusercontent.com/-EuMSvyu7ySM/UGfFd_Ph8aI/AAAAAAAAI1Y/AyzZB7zNJm0/s1223/IMAG0056.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Yes, my shelf of the fridge is quite stuffed. I went to &lt;a href="http://www.costco.com/"&gt;Costco&lt;/a&gt; today and got a bunch of food. I've annotated the photo, and here are some further details:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Breakfast:&lt;/strong&gt;  I have an amazing &lt;a href="http://www.amazon.com/Zojirushi-NS-LAC05XA-Uncooked-Cooker-Stainless/dp/B000G30ESY"&gt;rice cooker&lt;/a&gt; that has a "porridge" setting and a timer. At night, I pour in my 1/4 cup oatmeal, 1/4 sweetened vanilla almond milk, tablespoon of coconut milk, splash of vanilla (I really like vanilla), some salt, and 1/2 cup water into the rice cooker and set the timer for 7am. When I'm done working out and showering, my food is ready! I also add in a banana, which I cut into the bowl with a spoon, and some walnuts. Very filling.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lunch:&lt;/strong&gt; This week I made a very spicy and delicious ground beef fried rice that was a combination of these &lt;a href="http://chinesefood.about.com/od/ricefried/r/Ground-Beef-Fried-Rice-Recipe.htm"&gt;two&lt;/a&gt; &lt;a href="http://www.food.com/recipe/kittencals-ground-beef-fried-rice-150499"&gt;recipes&lt;/a&gt;. I marinated the beef in soy sauce, toasted sesame oil, chili oil, salt, black pepper, and white pepper, for about 15 or so minutes in the fridge. Then I fried that up in a dutch oven, though I should have fried the chopped onion first. Then added 2 square inches of grated ginger, a whole head of minced garlic, and a tablespoon each of red pepper flakes and cayenne powder. Then came the vegetables - about four cups of frozen Normandy Mix vegetables from Costco, a cup of frozen peas, and a can of baby corn. While the vegetables were cooking, I scrambled eight (8) eggs with salt, pepper, and toasted sesame oil, and added that to the mix. Then I added three cups of brown rice and mixed it all together. Turned out quite well! Then I packed the food into several glass tupperware containers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Post-lunch:&lt;/strong&gt; I like having snacks around but I want them to be pre-portioned out for me. That's probably why the 100-calorie packs have taken off so well. Costco has gigantic bags of baby carrots, sugar snap peas, and broccoli florets that I packed into individual snack packs. This is great because when I pack my lunch bag in the morning, I know that I just need to grab a tupperware and a veggie bag and I'm set.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dinner:&lt;/strong&gt; I don't like eating a lot at night because it makes me feel nauseous when I lie down if I'm full. Using &lt;a href="http://www.amazon.com/dp/1933615486/"&gt;America's Test Kitchen's cookbook&lt;/a&gt; (highly recommended, especially for less-experienced cooks because their explanations are fabulous) as a guideline, I make a salad for dinner just about every night. My favorite is the "Herb Salad" mix from Trader Joe's, a handful of blueberries, 1/4 cup of freshly-toasted almonds (I just toast them in a dry skillet), several strips of parmesan shaved with a vegetable peeler, and some home made balsamic dressing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dessert:&lt;/strong&gt; It's good to indulge. I adore the sweet/salty mix, so there's some dark chocolate with carmel and sea salt not pictured in the freezer (so it doesn't get too gooey). Other times I'll have greek yogurt with honey and blueberries. But I don't always feel like dessert.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Notes and references&lt;/h1&gt;
&lt;p&gt;This post was inspired by the article &lt;a href="http://blogs.hbr.org/hbsfaculty/2012/09/boring-is-productive.html"&gt;Boring is Productive&lt;/a&gt; on the Harvard Business Review.&lt;/p&gt;
&lt;p&gt;Cited links:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Lewis, M. Obama's Way. &lt;em&gt;Vanity Fair&lt;/em&gt; (2012). http://www.vanityfair.com/politics/2012/10/michael-lewis-profile-barack-obama&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Why does Mark Zuckerburg always wear the same shirt?&lt;/em&gt; Answered by: Neel Hajare, Facebook Intern '11. quora.com (2012). http://www.quora.com/Mark-Zuckerberg-1/Why-does-Mark-Zuckerberg-always-wear-the-same-shirt]&lt;/li&gt;
&lt;li&gt;Baumeister RF, Bratslavsky E, Muarven M, Tice DM. Ego depletion: Is the active self a limited resource? &lt;em&gt;J. Personality and Social Psychology&lt;/em&gt;. (1998) http://psycnet.apa.org/journals/psp/74/5/1252/&lt;/li&gt;
&lt;li&gt;Ariley, D. The Honest Truth about Dishonesty. Harper Books (2012). http://www.amazon.com/Honest-Truth-About-Dishonesty-Everyone-Especially/dp/0062183591&lt;/li&gt;
&lt;li&gt;Vohs KD, Baumeister RF, Schmeichel BJ, Twenge JM, Nelson NM, Tice DM. Making choices impairs subsequent self-control: A limited-resource account of decision making, self-regulation, and active initiative. &lt;em&gt;J. Personality and Social Psychology&lt;/em&gt; (2008). http://psycnet.apa.org/journals/psp/94/5/883/&lt;/li&gt;
&lt;/ol&gt;</summary></entry><entry><title>1, 2, 3 ... logistic regression!</title><link href="/blog/2012/09/07/2012-09-07-logistic-regression-tutorial/" rel="alternate"></link><updated>2012-09-07T13:17:00-07:00</updated><author><name>sciencemeetproductivity</name></author><id>tag:,2012-09-07:blog/2012/09/07/2012-09-07-logistic-regression-tutorial/</id><summary type="html">&lt;h2&gt;R Tutorial in Logistic Regression&lt;/h2&gt;
&lt;p&gt;Recently I read a &lt;a href="http://www.nature.com/msb/journal/v3/n1/full/msb4100180.html"&gt;paper&lt;/a&gt; 
that used logistic regression in its methods
and realized I had no idea what logistic regression &lt;em&gt;is&lt;/em&gt;, so I made this tutorial
for myself and others to learn about it. I wanted to create a tutorial that created 
random data that anyone could use, and taught you a bit about R in the process. This 
is my first tutorial and feedback is encouraged.&lt;/p&gt;
&lt;p&gt;This tutorial on the statistical machine-learning method known as Logistic
Regression is implemented in &lt;a href="r-project.org"&gt;R&lt;/a&gt;. Familiarity with programming
syntax, such as vector indexing, is assumed but I tried to make this tutorial
as accessible as possible for those with less programming experience.&lt;/p&gt;
&lt;h1&gt;What in Merlin's beard is &lt;em&gt;logistic regression?&lt;/em&gt;&lt;/h1&gt;
&lt;h2&gt;First, what is &lt;em&gt;regression&lt;/em&gt;?&lt;/h2&gt;
&lt;p&gt;You may have heard of "linear regression," which fits a $y=mx+b$ line to a set of points, such as in the figure below. I'm not going to go into the details of linear regression, but you can &lt;a href="http://www.stat.yale.edu/Courses/1997-98/101/linreg.htm"&gt;read about it&lt;/a&gt; if you like.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Linear regression matches a best-fitting line to a set of data." src="http://media.tumblr.com/tumblr_mdorakn4cw1rw6gvj.png" /&gt;&lt;/p&gt;
&lt;!-- Add description of Logit function --&gt;

&lt;p&gt;Logistic regression is similar, but instead of having two continuous variables as above, one of the variables is binary (0 or 1) and the other is continuous. But we're not fitting a line, we're fitting a &lt;em&gt;logit&lt;/em&gt;, which is a totally different function that estimates probability for a continuous variable rather than assigns classification. For example, we could predict the probability
of cancer relapse given some gene expression values. Or the probability of a heart attack
given a person's cholesterol levels. We would base these probabilities on
previously encountered data, a method of machine learning known as 
"Supervised Learning." You tell the computer what the answer is for many examples, and then the computer has to guess whether the outcome is 0 or 1.&lt;/p&gt;
&lt;p&gt;Think of it this way: you look at hundreds of values representing the number of 
&lt;em&gt;Star Trek: The Next Generation&lt;/em&gt; episodes a person has watched, with a teacher 
peering over your shoulder, and he tells you whether each value is associated 
with attending a &lt;em&gt;Star Trek&lt;/em&gt; convention or not. Then the teacher leaves, and
you're given a new number of &lt;em&gt;Star Trek: TNG&lt;/em&gt; episodes, $x$, and you have to give a 
probability $p$ whether the person who has seen this many episodes has been to a 
convention. The probability of $x$ episodes watched and no convention attendance
is $1-p$, so by knowing $p$, we also know $1-p$ and we only need to specify one value.&lt;/p&gt;
&lt;h2&gt;Regression is not the same thing as classification&lt;/h2&gt;
&lt;p&gt;This is an important distinction between classification and regression. If we were
doing classification, we would just say whether the person who has seen $x$ number 
of episodes has gone to a convention or not. But
we don't always want a binary outcome. The cholesterol-heart attack association is a 
great example of this. You probably don't want to tell a patient, "You &lt;em&gt;will&lt;/em&gt; have a 
heart attack," but rather say "You have an $x$% probability of having a heart
attack, given your current cholesterol levels." Same goes for cancer relapse. A
binary yes/no answer can obscure the data. Also, a probability of 0 is essentially 
impossible. Could you truly, definitively, say that a person will &lt;em&gt;never&lt;/em&gt; have a 
heart attack? Not until their death, but then all possible heart attack events have
already been observed. Sorry for the gruesome-ness.&lt;/p&gt;
&lt;h2&gt;So what about this &lt;em&gt;logisitic&lt;/em&gt; thing?&lt;/h2&gt;
&lt;h3&gt;First, we have to talk about &lt;em&gt;odds&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;We talked about predicting the probability of some event. But we're going to use 
&lt;em&gt;odds&lt;/em&gt; instead. If the probability of having attended a &lt;em&gt;Star Trek: TNG&lt;/em&gt; convention
is $p$, then the odds are:&lt;/p&gt;
&lt;p&gt;$$\text{odds} = \frac{\text{probability of event ocurring}}{\text{probability of event not occuring}} = \frac{p}{1-p}$$&lt;/p&gt;
&lt;p&gt;Say after watching a certain number of episodes, the probability of attending a 
convention is $p=0.7$. Then the odds of attending a convention are &lt;/p&gt;
&lt;p&gt;$$\frac{0.7}{0.3} = 2.333\ldots$$&lt;/p&gt;
&lt;p&gt;But the odds of not attending a convention are &lt;/p&gt;
&lt;p&gt;$$\frac{0.3}{0.7} = 0.4285\ldots$$ &lt;/p&gt;
&lt;p&gt;As you can see, odds and probability are not the same. Odds can be greater than 1, and probability must be between 0 and 1. &lt;/p&gt;
&lt;h3&gt;Next, we have to define &lt;em&gt;log-odds&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;It would be nice if these odds were somehow symmetric and we could intuitively make 
inferences just by looking at the value. This is where the logarithm comes in. If we 
take the &lt;a href="http://en.wikipedia.org/wiki/Natural_logarithm"&gt;natural log&lt;/a&gt; (ln), aka 
$\log_e$ of the odds of attending a convention, we get&lt;/p&gt;
&lt;p&gt;$$\ln \frac{0.7}{0.3} = 0.8472\ldots$$&lt;/p&gt;
&lt;p&gt;And the log-odds of &lt;em&gt;not&lt;/em&gt; attending a convention:&lt;/p&gt;
&lt;p&gt;$$\frac{0.3}{0.7} = -0.8472\ldots$$ &lt;/p&gt;
&lt;p&gt;The opposite of attending a convention is the negative of attending a convention! 
Now let's stop and think. &lt;em&gt;Why&lt;/em&gt; is this? This is because the natural log of 1 is 0,
so it intersects at 0 as in the plot below. Then the natural log of anything smaller 
than 1 is negative, approaching negative infinity as the number gets closer and 
closer to 0. The natural log of anything larger than 1 is positive, and approaches 
positive infinity as the number gets larger and larger, but slower than we approach 
negative infinity from the other side. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Natural log function" src="http://media.tumblr.com/tumblr_mdorb7uHwT1rw6gvj.png" /&gt;&lt;/p&gt;
&lt;p&gt;This symmetry is helpful to guide our intuition about events occurring or not 
occuring.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;FYI:&lt;/em&gt; We used the natural logarithm here because that's the standard. You could
really use any log base you like, even $\log_\pi$ would do, but it's just not
used that often.&lt;/p&gt;
&lt;h3&gt;From log-odds to &lt;em&gt;logits&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;The log-odds are also called the &lt;em&gt;logit&lt;/em&gt; of the probability:&lt;/p&gt;
&lt;p&gt;$$ \log(\text{odds}) = \text{logit}(p) = \ln\left( \frac{p}{1-p} \right) $$&lt;/p&gt;
&lt;p&gt;In logistic regression, we set &lt;/p&gt;
&lt;p&gt;$$\text{logit}(p) = a_0 + a_1x_1 + a_2x_2, \ldots , a_nx_n$$.&lt;/p&gt;
&lt;p&gt;Where $n$ is the number of independent variables you have. In our case, we just have one independent variable, $x = x_1$, the number of &lt;em&gt;Star Trek: TNG&lt;/em&gt; episodes viewed. But we could add to the complexity and also have $x_2$ be the number of &lt;em&gt;Star Trek: The Original Series&lt;/em&gt; (&lt;a href="http://mashable.com/2012/09/07/google-star-trek/"&gt;happy 46th anniversary!&lt;/a&gt;) episodes viewed, $x_3$ be number of &lt;a href="http://en.memory-alpha.org/wiki/Latinum"&gt;latinum strips&lt;/a&gt; owned, and $x_4$ be &lt;a href="http://www.amazon.com/Star-Trek-Conversational-Marc-Okrand/dp/0671797395"&gt;Klingon language proficiency&lt;/a&gt;. But we're going to keep it simple and stick to our one $x$.&lt;/p&gt;
&lt;p&gt;Now we could do regular ol' linear regression on this, but there are several issues.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We have a binary variable for our dependent variable (aka the $y$), and linear regression assumes a continuous distribution for the dependent variable. With probability as the output, we cannot have values less than 0 or greater than 1, and linear regression does not conform to this.&lt;/li&gt;
&lt;li&gt;The variance of $y$ is not constant across values of $x$. The variance is $p(1-p) = pq$ ($q$ is short for $1-p$), and if we have a probability of $0.50$ of attending a &lt;em&gt;Star Trek&lt;/em&gt; convention, then we have $0.5\times 0.5 = 0.25$ odds. But if we have $p=0.9$, then the variance $pq = 0.9\times 0.1 = 0.09$, and $0.25 \neq 0.09$. Thus the assumption that variance of $y$ is constant across values of $x$ is invalid. This is also called &lt;a href="http://blog.minitab.com/blog/statistics-and-quality-data-analysis/dont-be-a-victim-of-statistical-hippopotomonstrosesquipedaliophobia"&gt;homoscedasticity&lt;/a&gt;. &lt;/li&gt;
&lt;li&gt;If you want to do significance testing (you maybe familiar with &lt;em&gt;p&lt;/em&gt;-values or &lt;em&gt;R&lt;/em&gt;-values to describe how significant a result is), the assumption that the errors of prediction, $Y-Y^\prime$ are &lt;a href="http://en.wikipedia.org/wiki/Normal_distribution"&gt;normally distributed&lt;/a&gt; doesn't work. $Y$ only takes on the values 0 and 1, so there's no way you can create a continuous distribution such as a normal distribution with just two values.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Logits are not very intuitive as a unit, even though they are very helpful when looking at odds. But we need to get back to probabilities so we can give a probability of convention attendance. We'll have to exponentiate both sides to get rid of the natural log. I'm going to keep the long-form version of the equation so you can see how it works for more variables.&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
\text{logit}(p) &amp;amp;= \ln\left( \frac{p}{1-p} \right) = a_0 + a_1x_1 + a_2x_2, \ldots , a_nx_n\newline
\frac{p}{1-p} &amp;amp;= e^{a_0 + a_1x_1 + a_2x_2, \ldots , a_nx_n} \newline
p &amp;amp;= (1-p)e^{a_0 + a_1x_1 + a_2x_2, \ldots , a_nx_n} \newline
p + p(e^{-(a_0 + a_1x_1 + a_2x_2, \ldots , a_nx_n)}) &amp;amp;= 1 \newline
1 + e^{`(a_0 + a_1x_1 + a_2x_2, \ldots , a_nx_n)} &amp;amp;= \frac{1}{p}\newline
\frac{1}{1+e^{-(a_0 + a_1x_1 + a_2x_2, \ldots , a_nx_n)}} &amp;amp;= p
\end{align}
$$&lt;/p&gt;
&lt;p&gt;We can multiply the fraction by a clever form of 1, $e^{(a_0 + a_1x_1 + a_2x_2, \ldots , a_nx_n)}/e^{(a_0 + a_1x_1 + a_2x_2, \ldots , a_nx_n)}$ to get&lt;/p&gt;
&lt;p&gt;$$
p = \frac{e^{(a_0 + a_1x_1 + a_2x_2, \ldots , a_nx_n)}}{1+e^{(a_0 + a_1x_1 + a_2x_2, \ldots , a_nx_n)}}.
$$&lt;/p&gt;
&lt;p&gt;If we set $a_1 = 1$ and all other $a_0, a_2, a_3, \ldots = 0$, then we get the general logit cuve below&lt;/p&gt;
&lt;p&gt;&lt;img alt="The logit curve ranges from negative infinity to positive infinity on the x-axis, and from 0 to 1 on the y-axis." src="http://media.tumblr.com/tumblr_mdorbq7Ixx1rw6gvj.png" /&gt;&lt;/p&gt;
&lt;p&gt;So now we have a way of creating a predictor of the probability of a binary variable from a continuous variable. Now let's get started with doing regression.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;PS, if you want to get math typesetting (aka LaTeX) on your blog, I recommend 
&lt;strong&gt;against&lt;/strong&gt; searching for "tumblr latex" and instead checking out &lt;a href="http://checkmyworking.com/2012/01/how-to-get-beautifully-typeset-maths-on-your-blog/"&gt;this tutorial&lt;/a&gt; on installing MathJax on your blog, tumblr or not.&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;Step 1: Get binary data.&lt;/h1&gt;
&lt;h2&gt;Initialize a vector of 0's&lt;/h2&gt;
&lt;p&gt;For this case, we are going to make up some binary data. According to &lt;a href="http://www.statgun.com/tutorials/logistic-regression.html"&gt;a nice explanation of logistic regression&lt;/a&gt;,
logistic regression requires at least 50 data points per classification. Meaning, 
50+ 0's and 50+ 1's. There are 178 total &lt;em&gt;Star Trek: TNG&lt;/em&gt; episodes and lots of bonus 
features and interviews on the DVDs, so let's round up to 200 total &lt;em&gt;TNG&lt;/em&gt; pieces of 
video. In R, &lt;code&gt;rep&lt;/code&gt; is the function to create a vector of repeated values. The
first argument is what you want repeated, and the second argument is how
many times you want to repeat it. You could even have a vector in the first 
argument, such as &lt;code&gt;rep(c("red", "blue"), 30)&lt;/code&gt;, to get a vector of alternating 
strings, "red" and "blue." We could have also made the same vector
with &lt;code&gt;classification = vector(length=200, mode="numeric")&lt;/code&gt;, which initializes
the numeric values at 0, but I decided to do it with &lt;code&gt;rep&lt;/code&gt; instead.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;classification&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;EDIT: I've been informed that at 50+ data points is not always necessary, so take the rule with a grain of salt.&lt;/p&gt;
&lt;h2&gt;Set a random seed&lt;/h2&gt;
&lt;p&gt;Let's set the random seed so we will get consistently the same results, no
matter how many times we run the code. No random number generator is truly random,
and part of the semi-randomness is starting with a seed number, and then doing 
all kinds of transformations to then get a "random" number. So if we make sure
we are always using the same seed, then we will always get the same set of
"random" numbers.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Randomly add 1s to the last part of the vector&lt;/h2&gt;
&lt;p&gt;Now let's randomly add a bunch of 1s to the vector, ramping up the probability of 
getting a one (with hyperbolic growth, if you're being technical) as we get to 
the end of the vector. Let's be interesting and add some noise to the data so 
we don't have not do an equal 50/50 split. We'll use a randomly-generated
probability distribution to assign 0 or 1 to the last 125 values. This way, our
data is a little more realistic and less clean.&lt;/p&gt;
&lt;p&gt;FYI, &lt;code&gt;runif&lt;/code&gt; is the &lt;a href="http://en.wikipedia.org/wiki/Uniform_distribution_(continuous)"&gt;uniform distribution function&lt;/a&gt;
in R, which has an equal probability of obtaining every value between 0 and 1.
It is useful in this assignment because I know that the odds are 50/50 that
the value will be greater than 0.5, so I increased the threshold to &amp;gt;0.6
and added a multiplicative factor, which varies from 1 to 125. This way, the
values near the beginning of the vector have close to a 60/40 chance of being
less than 0.6, but by the end, they are almost certainly all above 0.6.
Take a look below.&lt;/p&gt;
&lt;p&gt;The multiplicative factor:
FYI, the &lt;code&gt;str&lt;/code&gt; function is a method of previewing the first few values of
variables without seeing everything at once. It can be handy. Another method is
&lt;code&gt;head&lt;/code&gt;, which like the *NIX head, shows the first few values, but it can
be annoying if you have a matrix with a large number of columns, say over 100. Then
you get the first 10 values for all 100 columns, which takes up a lot of space. &lt;code&gt;str&lt;/code&gt;
can be more convenient in that case.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;125&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;125&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;125&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mf"&gt;1.01&lt;/span&gt; &lt;span class="mf"&gt;1.02&lt;/span&gt; &lt;span class="mf"&gt;1.02&lt;/span&gt; &lt;span class="mf"&gt;1.03&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Randomly generated values in the uniform distribution:
(Notice that I re-set the random number seed. This is because after
a random seed is used, the random number generator advances to the next seed.)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;runif&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;125&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
 &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;125&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mf"&gt;0.3078&lt;/span&gt; &lt;span class="mf"&gt;0.2577&lt;/span&gt; &lt;span class="mf"&gt;0.5523&lt;/span&gt; &lt;span class="mf"&gt;0.0564&lt;/span&gt; &lt;span class="mf"&gt;0.4685&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Multiplicative factor times the uniform distribution vector:
(For those Linear Algebra lovers out there, we don't get a matrix because by 
default, R multiplies vectors on an element-by-element basis. If you want
the usual vector product, aka the cross product, do &lt;code&gt;vector1 %*% vector2&lt;/code&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;runif&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;125&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;125&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;125&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
 &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;125&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mf"&gt;0.3078&lt;/span&gt; &lt;span class="mf"&gt;0.2598&lt;/span&gt; &lt;span class="mf"&gt;0.5613&lt;/span&gt; &lt;span class="mf"&gt;0.0578&lt;/span&gt; &lt;span class="mf"&gt;0.484&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we can use &lt;code&gt;ifelse&lt;/code&gt; to assign a 0 or 1 based on whether the vector we just
created is greater than 0.6 or not.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;classification&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;76&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ifelse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;runif&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;125&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;125&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;125&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;0.6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;The final binary vector&lt;/h2&gt;
&lt;p&gt;This is what I get for the binary classification vector. Keep in mind that we only 
added 1's to the last 125 values, or from index 76 and up.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;classification&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
 &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;38&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
 &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;112&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;149&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;186&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Step 2: Get some continuous data.&lt;/h1&gt;
&lt;p&gt;We're going to make up continuous data similarly to how we created the binary 
classification vector. This time, we set the next seed so we'd get different 
numbers, and multiplied a uniform distribution by a linear function. Now this isn't
quite enough to make most of the 1's be in the upper numbers and most of the 0's
be in the lower numbers, so we add a linearly increasing amount of Gaussian noise
to the values.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;continuous&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;runif&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;rnorm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;sd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;My continuous vector looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;continuous&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mf"&gt;51.7&lt;/span&gt; &lt;span class="mf"&gt;94.2&lt;/span&gt; &lt;span class="mf"&gt;184.1&lt;/span&gt; &lt;span class="mf"&gt;226.1&lt;/span&gt; &lt;span class="mf"&gt;269.9&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, we have values larger than 200, but we assumed there are 200 pieces of &lt;em&gt;Star Trek: TNG&lt;/em&gt; video media to watch, so we need to normalize it by the max. Now our maximum value is 1, so we multiply by 200 to get a maximum value of 200.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;continuous&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;continuous&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;continuous&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;What does our data look like?&lt;/h2&gt;
&lt;p&gt;Now if we plot the continuous vector vs the binary vector, we'll see that in general,
the 0's occur in the lower end of the continuous spectrum, and the 1's occur in the
higher end of the continuous spectrum.&lt;/p&gt;
&lt;!-- fix data because continuous goes up to 10,000 --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;png&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;~/workspace/tutorials/logistic_regression_points.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;continuous&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;classification&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pch&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;blue&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;off&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="The continuous vector on the x-axis vs the binary vector in the y-axis. Notice that most of the values classified as 0 appear with lower continuous values, and the values classified as 1 appear with higher continuous values." src="http://media.tumblr.com/tumblr_mdorcfiIYs1rw6gvj.png" /&gt;&lt;/p&gt;
&lt;p&gt;So according to our data, there's a lot of people who have seen &lt;em&gt;most&lt;/em&gt; of &lt;em&gt;Star Trek:TNG&lt;/em&gt; and have been to a convention, but there are a few individuals who have seen most of it and yet have not been a convention.&lt;/p&gt;
&lt;h1&gt;Step 3: Do logistic regression!&lt;/h1&gt;
&lt;p&gt;Now you can use generalized linear models to fit to the data. Note: This is one of many methods in R to do logistic regression, and I chose to do the simplest version. Note that &lt;code&gt;classification ~ continuous&lt;/code&gt; is shorthand for &lt;code&gt;y ~ x&lt;/code&gt;, or as the R people say, &lt;code&gt;response ~ terms&lt;/code&gt;. If you had more data points, like Klingon language profiency, you would add this variable by using the &lt;code&gt;cbind&lt;/code&gt; or "column bind" function which would create a 2-column matrix from the two vectors: &lt;code&gt;glm(classification ~ cbind(continuous, klingon), ...)&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;glm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;glm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;classification&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nx"&gt;continuous&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;family&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;binomial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;logit&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nx"&gt;png&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;~/workspace/tutorials/logistic_fitted.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;continuous&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;glm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;out$fitted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;l&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lwd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Logistic function fitted to classification data\nvia a generalized linear model&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;points&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;continuous&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;classification&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;blue&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pch&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;dev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;off&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The plot of the fitted curve looks like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Logistic curve fitted to data." src="http://media.tumblr.com/tumblr_mdorcxMktg1rw6gvj.png" /&gt;&lt;/p&gt;
&lt;h2&gt;So what actually happened here?&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;glm&lt;/code&gt; function found the values of $a_0$ and $a_1$ that minimize the error term. I'm not qualified to describe &lt;code&gt;glm&lt;/code&gt; in gory detail, or all the other possible methods of calculating logistic regression, but &lt;a href="http://www.omidrouhani.com/research/logisticregression/html/logisticregression.htm#_Toc147483467"&gt;this site&lt;/a&gt; gives the mathematics the justice it deserves. You will need to be familiar with linear algebra to fully understand the arguments.&lt;/p&gt;
&lt;h1&gt;FAQ&lt;/h1&gt;
&lt;h2&gt;What if your classification is 1 for the low values and 0 for the high values?&lt;/h2&gt;
&lt;p&gt;You can still use the same steps, but your logit curve will be flipped along the $y$-axis.&lt;/p&gt;
&lt;h2&gt;Have you attended a &lt;em&gt;Star Trek&lt;/em&gt; convention?&lt;/h2&gt;
&lt;p&gt;No, I have not. But I thought it would be a fun binary variable.&lt;/p&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;p&gt;I could not have done this without the help of many different sources.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;http://luna.cas.usf.edu/~mbrannic/files/regression/Logistic.html - the first thing I read, and the primary source for the explanation of logistic regression in the first section (&lt;em&gt;What in Merlin's beard is logistic regression?&lt;/em&gt;). Highly recommended introduction to logistic regression.&lt;/li&gt;
&lt;li&gt;http://en.wikipedia.org/wiki/Logistic_regression - Wikipedia is a great place to start, but it dove into the technical aspects a little too quickly for my taste.&lt;/li&gt;
&lt;li&gt;http://www.statgun.com/tutorials/logistic-regression.html - a great explanation of logistic regression in general.&lt;/li&gt;
&lt;li&gt;http://ww2.coastal.edu/kingw/statistics/R-tutorials/logistic.html - used R to explain logistic regression of a particular dataset.&lt;/li&gt;
&lt;li&gt;http://www.omidrouhani.com/research/logisticregression/html/logisticregression.htm - mathematical derivation of logistic regression&lt;/li&gt;
&lt;li&gt;http://ww2.coastal.edu/kingw/statistics/R-tutorials/logistic.html - explains logistic regression and odds, and implements logistic regression on a particular dataset.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="R"></category><category term="logistic regression"></category><category term="tutorial"></category><category term="star trek"></category></entry><entry><title>How to request a letter of recommendation</title><link href="/blog/2012/08/31/2012-08-31-how-to-request-a-letter-of-recommendation/" rel="alternate"></link><updated>2012-08-31T17:45:00-07:00</updated><author><name>sciencemeetproductivity</name></author><id>tag:,2012-08-31:blog/2012/08/31/2012-08-31-how-to-request-a-letter-of-recommendation/</id><summary type="html">&lt;p&gt;&lt;img alt="Hopefully your recommendation letter is more specific" src="http://farm9.staticflickr.com/8284/7868751548_c8daf5067e_z.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Photo by &lt;a href="http://www.flickr.com/photos/8308527@N02/7868751548/"&gt;tribbles1971&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This post is aimed at undergraduate juniors/seniors who are planning to apply for graduate/professional school in Fall 2012. &lt;strong&gt;Disclaimer: I am not an expert in requesting letters.&lt;/strong&gt; This is a guide from my application experience and advice from faculty, as well as MD and PhD applicants.&lt;/p&gt;
&lt;p&gt;Requesting a letter of recommendation is always a a tricky situation. I'm in this exact situation for fellowship applications this fall.&lt;/p&gt;
&lt;h1&gt;Recommendations: More than just letters&lt;/h1&gt;
&lt;p&gt;The first thing you need to understand about recommendation letters is that it's not just a piece of writing. The faculty have to rank you vs all the other people they've had at your relative position, then vs all undergrads, plus they assess your maturity, character, communication skills, and all that. It's a lot of forms. So you want to make all those steps as easy as possible for your recommender.&lt;/p&gt;
&lt;h1&gt;When to ask: as early as possible (1.5-2+ months in advance)&lt;/h1&gt;
&lt;p&gt;Faculty are busy people. In a recent correspondence with a faculty member, they told me they are traveling for the next eight weeks and I won't be able to make an appointment with them until late October or November. If you are asking a particularly busy faculty, I recommend at &lt;strong&gt;least two months ahead of time.&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;Writing a glowing recommendation about you should be as easy as possible&lt;/h1&gt;
&lt;p&gt;Whoever you ask for your recommendation letters, they are probably people who have positive views of you and your work. However, they may not have the time or energy necessary to write you the glowing recommendation that they think you deserve. So, help them out by doing some of the work yourself!&lt;/p&gt;
&lt;p&gt;When you request a letter of recommendation, you should give them as much information as you can so that &lt;strong&gt;your recommender will write a fantastic letter of recommendation with the least possible friction&lt;/strong&gt;. This information should be in the form of a bound packet. The "packet" idea came from my accomplished friend Jia Zhu, currently in her second year at Harvard Medical School (check out &lt;a href="http://hms.harvard.edu/content/nurturing-passion-research"&gt;her research&lt;/a&gt; from this summer!).&lt;/p&gt;
&lt;h2&gt;What I put in my packet&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Cover page&lt;/li&gt;
&lt;li&gt;Dear Professor X, I am writing to request the possibility of a recommendation ……. Here are all the awesome things I did while working with you&lt;/li&gt;
&lt;li&gt;Table of Contents&lt;/li&gt;
&lt;li&gt;List of schools/fellowships with deadlines&lt;/li&gt;
&lt;li&gt;CV&lt;/li&gt;
&lt;li&gt;Photos of you doing awesome things&lt;/li&gt;
&lt;li&gt;Essay drafts&lt;/li&gt;
&lt;li&gt;Transcripts&lt;/li&gt;
&lt;li&gt;Test scores&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;My packet as an example&lt;/h3&gt;
&lt;p&gt;Here is my packet &lt;a href="http://olgabotvinnik.com/blog_figures/2012-08-31_How_to_ask_for_a_letter_of_recommendation/OlgaBotvinnik_RecommendationPacket.pdf"&gt;[21MB PDF]&lt;/a&gt;, edited for privacy, which I gave to one of my recommenders. You may notice a table of contents. After I printed out the packet, I &lt;a href="http://www.fedex.com/us/office/binding-finishing-laminating.html"&gt;coil-bound it at Kinko's&lt;/a&gt; with a cardstock back and hand-wrote the page numbers on each page. As for the essays in the packet, keep in mind that these were truly draft essays and that my final submissions were quite different. Also, I did not win a Hertz or Paul and Daisy Soros fellowship, so they are not examples of winning essays. I did, however, receive an Honorable Mention for my NSF essays, though the one in here is not the final version. There will be more posts about essay writing later.&lt;/p&gt;
&lt;h2&gt;What you should put in your packet&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Cover page (Fall 2011 Recommendation Packet for [Your Name])&lt;/li&gt;
&lt;li&gt;Dear Professor X, I am writing to request the possibility of a recommendation ……. Here are all the awesome things I did while working with you&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Draft letters&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Table of Contents&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;List of schools/fellowships with deadlines&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;CV&lt;/li&gt;
&lt;li&gt;Photos of you doing awesome things&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Essay drafts&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The &lt;strong&gt;bolded&lt;/strong&gt; items are what I consider to be the most important ones, and I'll tell you why.&lt;/p&gt;
&lt;h3&gt;Draft letters are how you ensure high-quality recommendations&lt;/h3&gt;
&lt;p&gt;Draft letters are &lt;strong&gt;incredibly important&lt;/strong&gt;. Last year was the first time I was asked for a draft letter and it caught me off-guard. Be prepared by writing your own letter of recommendation. As you know from your university writing classes, it is &lt;em&gt;much&lt;/em&gt; easier to edit an existing piece of writing than to start from scratch. What you absolutely do not want is for the professor to say "this person took my course as a junior and received an A."&lt;/p&gt;
&lt;p&gt;You may need to include several different draft letters for your recommenders. For example, maybe you are applying to fellowship &lt;em&gt;A&lt;/em&gt; that emphasizes service, then the draft letter for fellowship &lt;em&gt;A&lt;/em&gt; should talk about the service you performed &lt;em&gt;in relation to the recommender.&lt;/em&gt; You do not want to have your research supervisor speak volumes about your service record when they've never seen you in action. Hopefully you have a recommender who can directly speak about your service work, and then you can emphasize which projects or roles are most pertinent to this fellowship.&lt;/p&gt;
&lt;p&gt;Resources for writing recommendation letters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://isites.harvard.edu/fs/html/icb.topic58474/Verba-recs.html"&gt;Harvard Graduate School of Arts and Sciences for teaching fellows on writing letters of recommendation&lt;/a&gt;. (with example letters)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.yale.edu/yalecollege/academics/fellowships/application/writing.html"&gt;Yale College tips on writing fellowship recommendation letters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.hhmi.org/resources/labmanagement/downloads/letter.pdf"&gt;Howard Hughes Medical Institute: Writing a letter of recommendation (pdf)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cs.washington.edu/homes/mernst/advice/write-recommendation.html"&gt;Michael Ernst at Univ. Washington Computer Science tips on writing letters of recommendation&lt;/a&gt;, which includes the PhD admissions committee perspective, and an example of a bad letter. He also has tips on &lt;a href="http://www.cs.washington.edu/homes/mernst/advice/request-recommendation.html"&gt;requesting letters of recommendation&lt;/a&gt;, which I highly encourage you to read.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cs.brown.edu/~sk/Memos/Grad-School-Recos/"&gt;Shriram Krishnamurthi at Brown Univ. Computer Science's tips on writing letters of recommendation&lt;/a&gt;, with examples and PhD admissions committee perspective.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Essay drafts&lt;/h3&gt;
&lt;p&gt;Essay drafts (even the very beginnings of one!) are very important because they show your recommender why you want to go to graduate school. Your recommender will see how you present yourself to the committee, and can write a complementary letter. I also suggest a conversation with your recommender about your goals for graduate school.&lt;/p&gt;
&lt;h3&gt;Do not assume your recommender/their assistant remembers when all your deadlines are&lt;/h3&gt;
&lt;p&gt;I made this mistake as I emailed a reminder to my very early (October 31st) first fellowship deadline the day before it was due, and turns out some of my recommenders were totally oblivious to when everything was. Even though I e-mailed a fancy spreadsheet with all the deadlines and I put them all in the packet!&lt;/p&gt;
&lt;p&gt;Ideally, the timeline would look like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1-2 months before (aim for 3 months) - Request recommendations via the packet&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If they agree and have not yet submitted:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 month before - remind about deadline, update with anything cool you've done so far&lt;/li&gt;
&lt;li&gt;2 weeks before - remind about deadline&lt;/li&gt;
&lt;li&gt;1 week before - remind about deadline&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course, after they submit, you don't need to remind them anymore.&lt;/p&gt;
&lt;h3&gt;Other (hopefully obvious) tips&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Be honest in your packet and in your application.&lt;/li&gt;
&lt;li&gt;Waive your right to read the letter. The committee will trust the letter more, and the recommender will be free to speak their mind.&lt;/li&gt;
&lt;li&gt;Be courteous in all your interactions with your recommenders and the admissions committees. &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;If there are any faculty reading this post...&lt;/h1&gt;
&lt;p&gt;Can you answer these questions for me?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If someone were to request a letter of recommendation, should they ask by email or by sending the packet? I like the packet because then it shows I really want them but maybe I should request, and THEN send. My strategy this year was to send the packet and then send an email saying I sent a packet to ask for the possibility of a recommendation. Nobody declined but I'm curious.&lt;/li&gt;
&lt;li&gt;Should I update you with my newest drafts of essays? do you care?&lt;/li&gt;
&lt;li&gt;Should I update you with cool things I started doing since I sent you that packet?&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;After you find out about fellowships and/or decide on schools&lt;/h1&gt;
&lt;p&gt;Say "Thank you, thank you, thank you!" Your recommenders did a lot of work for you so make sure you appreciate them, and tell them where you got in! Writing recommendation letters is part of their job, so gifts are not appropriate.&lt;/p&gt;
&lt;h1&gt;It's a lot of work&lt;/h1&gt;
&lt;p&gt;This is a lot of information, and a lot of work. But remember, you want to &lt;strong&gt;make the letter-writing process as easy as possible for your recommender.&lt;/strong&gt; I cannot emphasize this enough. Whoever your recommenders are, they are well-intended busy people who want you to do well, but may not have enough time to write the ideal letter of recommendation. Help them out!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Do you have any suggestions for writing recommendations that I missed? Let me know!&lt;/em&gt;&lt;/p&gt;</summary><category term="letter of recommendation"></category><category term="fellowships"></category><category term="grad school"></category><category term="faculty"></category></entry><entry><title>.bam files --&gt; ??? ---&gt; profit!</title><link href="/blog/2012/08/24/2012-08-24-bam-files-profit/" rel="alternate"></link><updated>2012-08-24T13:22:00-07:00</updated><author><name>sciencemeetproductivity</name></author><id>tag:,2012-08-24:blog/2012/08/24/2012-08-24-bam-files-profit/</id><summary type="html">&lt;div class='posterous_autopost'&gt;&lt;p&gt;
&lt;img src="http://media.tumblr.com/tumblr_mde7hsADmq1rw6gvj.png" alt="The vision for this software" /&gt;&lt;/p&gt;  &lt;h1&gt;RNA-Sequencing results in one step!&lt;/h1&gt;  &lt;p&gt;A departure from the usual productivity theme, I pleased to announce the release of my RNA-Sequencing differential expression (RSDE for short) package, &lt;a href="https://github.com/olgabot/rna-seq-diff-exprn"&gt;available on Github&lt;/a&gt;. I have worked on this package for the past 4 months and have put a lot of effort into making it as easy to use as possible, so please let me know if you run into any issues.&lt;/p&gt;  &lt;p&gt;My vision of how easy it should be to use is outlined in the headline photo and title:&lt;/p&gt;  &lt;blockquote&gt;&lt;p&gt;&lt;code&gt;.bam&lt;/code&gt; files —-&gt; ??? —&gt; Results!&lt;/p&gt;&lt;/blockquote&gt;  &lt;p&gt;Structural variant detection is grey because it is not yet available.&lt;/p&gt;  &lt;p&gt;The example included in the code looks at the differential expression of two prostate cancer cell lines, LNCaP and PrEC. It only includes reads from chromosome 9, an arbitrary choice to reduce the time of running the example. Currently, the example takes 20 minutes to run on my laptop (MacBook Pro, Late 2008 model, 2.4G Hz Intel Core Duo, 4 GB RAM), and this is really supposed to be run on a server that holds all your gigantic (10gb+) &lt;code&gt;.bam&lt;/code&gt; files. If you do choose to run it on your own personal computer, I would recommend leaving your computer alone while it runs, or else your entire machine may crash. Mine has.&lt;/p&gt;  &lt;h1&gt;The inputs&lt;/h1&gt;  &lt;p&gt;Basically, the inputs are (they will be more thoroughly described below):&lt;/p&gt;  &lt;ol&gt; &lt;li&gt;Output directory&lt;/li&gt; &lt;li&gt;Metadata file with the &lt;code&gt;.bam&lt;/code&gt; file locations, sample IDs, and experiment descriptions&lt;/li&gt; &lt;li&gt;Gene transfer format file (GTF file, a subset of the General Feature Format, GFF filetypes) of genes for your species&lt;/li&gt; &lt;li&gt;GTF file processed with DEXSeq, a differential exon usage program.&lt;/li&gt; &lt;li&gt;Browser-extensible data (BED) file of genes for your species. Both the BED and GTF files are needed for the different transcript-counting programs (&lt;code&gt;bedtools Coverage&lt;/code&gt; and &lt;code&gt;htseq-count&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;Transcript ID &amp;ndash; Symbol file (explained below)&lt;/li&gt; &lt;li&gt;&amp;ldquo;Genome&amp;rdquo; file. This is available in your BEDTools distribution for mouse and human (mm8, mm9, hg18 and hg19), and I&amp;rsquo;ll show you an example of one so you can create one for other species, too.&lt;/li&gt; &lt;li&gt;&amp;ldquo;Karyotype&amp;rdquo; file for &lt;a href="http://circos.ca/"&gt;Circos&lt;/a&gt; plotting. This is available in your Circos distribution for mouse and human (mm8, mm9, hg18 and hg19), and again, I&amp;rsquo;ll show you an example so you can create your own.&lt;/li&gt; &lt;li&gt;Gene density file, for &lt;a href="http://circos.ca/"&gt;Circos&lt;/a&gt; plotting. I have created one for humans (hg19) and will give instructions and a script for how to create one on your own.&lt;/li&gt; &lt;li&gt;GC content file, for &lt;a href="http://circos.ca/"&gt;Circos&lt;/a&gt; plotting. I have one for humans, chromosome 9 (it takes a long time to plot if it is very dense, so I chose a subset of the genome), and will show you how to create your own&lt;/li&gt; &lt;li&gt;Number of &amp;ldquo;bunches&amp;rdquo; you&amp;rsquo;d like to create (more on this later)&lt;/li&gt; &lt;/ol&gt;   &lt;h1&gt;The outputs&lt;/h1&gt;  &lt;p&gt;And after submitting all those files and waiting ~20 min for the example to finish, you get:&lt;/p&gt;  &lt;ol&gt; &lt;li&gt;Quality-control plots of the &lt;code&gt;.bam&lt;/code&gt; files, via &lt;a href="http://code.google.com/p/rseqc/"&gt;RSeQC&lt;/a&gt;. Most of the commands listed in the &lt;a href="http://code.google.com/p/rseqc/wiki/Manual"&gt;manual&lt;/a&gt; are performed. In alphabetical order, they are (with documentation copy/pasted from the RSeQC manual):  &lt;ol&gt; &lt;li&gt;&lt;a href="http://code.google.com/p/rseqc/wiki/Manual#clipping_profile.py"&gt;&lt;code&gt;clipping_profile.py&lt;/code&gt;&lt;/a&gt;: This program is used estimate clipping profile of RNA-seq reads from BAM or SAM file. Note that to use this function, CIGAR strings within SAM/BAM file should have &lt;code&gt;S&lt;/code&gt; operation (This means your reads mapper should support clipped mapping).&lt;/li&gt; &lt;li&gt;&lt;a href="http://code.google.com/p/rseqc/wiki/Manual#geneBody_coverage.py"&gt;&lt;code&gt;geneBody_coverage.py&lt;/code&gt;&lt;/a&gt;: Read coverage over gene body. This module is used to check if reads coverage is uniform and if there is any 5’/3’ bias. This module scales all transcripts to 100 nt and calculates the number of reads covering each nucleotide position. Finally, it generates a plot illustrating the coverage profile along the gene body. NOTE: this module requires lots of memory for large BAM files, because it load the entire BAM file into memory.  &lt;ol&gt; &lt;li&gt;This is a VERY useful function to look at how fully covered the transcripts are in your experiment. I highly recommend taking a look at the gene body coverage before interpreting differential expression.&lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="http://code.google.com/p/rseqc/wiki/Manual#geneBody_coverage.py"&gt;&lt;code&gt;infer_experiment.py&lt;/code&gt;&lt;/a&gt;: This program is used to speculate how RNA-seq sequencing were configured, especially how reads were stranded for strand-specific RNA-seq data, through comparing reads' mapping information to the underneath gene model.  &lt;ol&gt; &lt;li&gt;Note: currently, RPKM_count.py does not take in the infer_experiment data but will in the future.&lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="http://code.google.com/p/rseqc/wiki/Manual#inner_distance.py"&gt;&lt;code&gt;inner_distance.py&lt;/code&gt;&lt;/a&gt;: This module is used to calculate the inner distance (or insert size) between two paired RNA reads. The distance is the mRNA length between two paired fragments.&lt;/li&gt; &lt;li&gt;&lt;a href="http://code.google.com/p/rseqc/wiki/Manual#junction_annotation.py"&gt;&lt;code&gt;junction_annotation.py&lt;/code&gt;&lt;/a&gt;: For a given alignment file (&lt;code&gt;-i&lt;/code&gt;) in BAM or SAM format and a reference gene model (&lt;code&gt;-r&lt;/code&gt;) in BED format, this program will compare detected splice junction to reference gene model.&lt;/li&gt; &lt;li&gt;&lt;a href="http://code.google.com/p/rseqc/wiki/Manual#junction_saturation.py"&gt;&lt;code&gt;junction_saturation.py&lt;/code&gt;&lt;/a&gt;: It&amp;rsquo;s very important to check if current sequencing depth is deep enough to perform alternative splicing analyses. For a well annotated organism, the number of expressed genes in particular tissue is almost fixed so the number of splice junctions is also fixed,　all splice junctions can be predetermined according to reference gene model. All (annotated) splice junctions should be rediscovered from a saturated RNA-seq data, otherwise, downstream alternative splicing analysis is problematic because low abundance splice junctions are missing. This module checks for saturation by resampling 5%, 10%, 15%, &amp;hellip;, 95% of total alignments from BAM or SAM file, and then detects splice junctions from each subset and compares them to reference gene model.&lt;/li&gt; &lt;li&gt;&lt;a href="http://code.google.com/p/rseqc/wiki/Manual#read_distribution.py"&gt;&lt;code&gt;read_distribution.py&lt;/code&gt;&lt;/a&gt;: Provided a BAM/SAM file and reference gene model, this module will calculate how mapped reads were distributed over genome feature (like CDS exon, 5'UTR exon, 3' UTR exon, Intron, Intergenic regions). When genome features are overlapped (e.g. a region could be annotated as both exon and intron by two different transcripts) , they are prioritize as: CDS exons &gt; UTR exons &gt; Introns &gt; Intergenic regions, for example,if a read was mapped to both CDS exon and intron, it will be assigned to CDS exons.&lt;/li&gt; &lt;li&gt;&lt;a href="http://code.google.com/p/rseqc/wiki/Manual#read_duplication.py"&gt;&lt;code&gt;read_duplication.py&lt;/code&gt;&lt;/a&gt;: Two strategies were used to determine reads duplication rate:  &lt;ol&gt; &lt;li&gt;Sequence based: reads with exactly the same sequence content are regarded as duplicated reads.&lt;/li&gt; &lt;li&gt;Mapping based: reads mapped to the same genomic location are regarded as duplicated reads. For splice reads, reads mapped to the same starting position and splice the same way are regarded as duplicated reads.&lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="http://code.google.com/p/rseqc/wiki/Manual#read_GC.py"&gt;&lt;code&gt;read_GC.py&lt;/code&gt;&lt;/a&gt;  &lt;ol&gt; &lt;li&gt;Finds the GC content of your reads and outputs a histogram plot.&lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="http://code.google.com/p/rseqc/wiki/Manual#read_NVC.py"&gt;&lt;code&gt;read_NVC.py&lt;/code&gt;&lt;/a&gt;: This module is used to check the nucleotide composition bias. Due to random priming, certain patterns are over represented at the beginning (5'end) of reads. This bias could be easily examined by NVC (Nucleotide versus cycle) plot. NVC plot is generated by overlaying all reads together, then calculating nucleotide composition for each position of read (or each sequencing cycle). In ideal condition (genome is random and RNA-seq reads is randomly sampled from genome), we expect A%=C%=G%=T%=25% at each position of reads.  &lt;ol&gt; &lt;li&gt;I also highly recommend looking at this plot and possibly trimming the first 6-9bp of your reads.&lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="http://code.google.com/p/rseqc/wiki/Manual#read_quality.py"&gt;&lt;code&gt;read_quality.py&lt;/code&gt;&lt;/a&gt;: According to SAM specification, if Q is the character to represent &amp;ldquo;base calling quality&amp;rdquo; in SAM file, then Phred Quality Score = &lt;code&gt;ord(Q) - 33&lt;/code&gt;. Here &lt;code&gt;ord()&lt;/code&gt; is python function that returns an integer representing the Unicode code point of the character when the argument is a unicode object, for example, &lt;code&gt;ord('a')&lt;/code&gt; returns 97. Phred quality score is widely used to measure &amp;ldquo;reliability&amp;rdquo; of base-calling, for example, phred quality score of 20 means there is 1/100 chance that the base-calling is wrong, phred quality score of 30 means there is 1/1000 chance that the base-calling is wrong. In general: Phred quality score = &lt;code&gt;-10*log10P&lt;/code&gt;, here &lt;code&gt;P&lt;/code&gt; is probability that base-calling is wrong.&lt;/li&gt; &lt;li&gt;&lt;a href="http://code.google.com/p/rseqc/wiki/Manual#RPKM_count.py"&gt;&lt;code&gt;RPKM_count.py&lt;/code&gt;&lt;/a&gt;: Given a BAM file and reference gene model, this program will calculate the raw count and RPKM values for transcript at exon, intron and mRNA level. For strand specific RNA-seq data, program will assign read to its parental gene according to strand rule, if you don&amp;rsquo;t know the strand rule, run &lt;code&gt;infer_experiment.py&lt;/code&gt;. Please note that chromosome ID, genome cooridinates should be concordant between BAM and BED files.&lt;/li&gt; &lt;li&gt;&lt;a href="http://code.google.com/p/rseqc/wiki/Manual#RPKM_saturation.py"&gt;&lt;code&gt;RPKM_saturation.py&lt;/code&gt;&lt;/a&gt;: The precision of any sample statitics (RPKM) is affected by sample size (sequencing depth); “resampling” or “jackknifing” is a method to estimate the precision of sample statistics by using subsets of available data. This module will resample a series of subsets from total RNA reads and then calculate RPKM value using each subset. By doing this we are able to check if the current sequencing depth was saturated or not (or if the RPKM values were stable or not) in terms of genes' expression estimation. If sequencing depth was saturated, the estimated RPKM value will be stationary or reproducible. By default, this module will calculate 20 RPKM values (using 5%, 10%, &amp;hellip; , 95%,100% of total reads) for each transcripts. Although people can use KPSS test to determine if the estimated RPKM level is in stationary or not. Visual inspection is more accurate.&lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;li&gt;Genome-wide coverage of all samples, visualized by a &lt;a href="http://circos.ca"&gt;Circos&lt;/a&gt; plot. The example only includes reads mapped to chromosome 9, so the example plot only shows coverage from chromosome 9.&lt;/li&gt; &lt;li&gt;Transcript counts, counted by two methods:  &lt;ol&gt; &lt;li&gt;BEDTools, via &lt;code&gt;bedtools coverage&lt;/code&gt;&lt;/li&gt; &lt;li&gt;HTSeq, via &lt;code&gt;htseq-count&lt;/code&gt;&lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;li&gt;Differential Expression analysis, by &lt;code&gt;DESeq&lt;/code&gt; (in the &lt;code&gt;R&lt;/code&gt; programming language). This include gene lists and heat maps.  &lt;ol&gt; &lt;li&gt;Other differential expression methods (NOISeq, DEXSeq) are in the works&lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;li&gt;(Not yet: Structural Variant detection, e.g. of fusion genes via SVDetect)&lt;/li&gt; &lt;/ol&gt;   &lt;h1&gt;Input files: A thorough description&lt;/h1&gt;  &lt;h2&gt;Output directory&lt;/h2&gt;  &lt;p&gt;This is where all the results files will be. Folders that will be created are:&lt;/p&gt;  &lt;p&gt;The basic directories are:&lt;/p&gt;  &lt;div class="CodeRay"&gt; &lt;div class="code"&gt;&lt;pre&gt;expression/ rseqc/ circos/&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt;   &lt;p&gt;Quality control files go in:&lt;/p&gt;  &lt;div class="CodeRay"&gt; &lt;div class="code"&gt;&lt;pre&gt;rseqc/[all your sample ids]&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt;   &lt;p&gt;Circos files go in:&lt;/p&gt;  &lt;div class="CodeRay"&gt; &lt;div class="code"&gt;&lt;pre&gt;circos/[all your sample ids]&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt;   &lt;p&gt;The counts files will go in:&lt;/p&gt;  &lt;div class="CodeRay"&gt; &lt;div class="code"&gt;&lt;pre&gt;expression/bedtools/[all your sample ids] expression/htseq/[all your sample ids]&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt;   &lt;p&gt;Heatmaps will go:&lt;/p&gt;  &lt;div class="CodeRay"&gt; &lt;div class="code"&gt;&lt;pre&gt;expression/bedtools/figures/ expression/hsteq/figures/&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt;   &lt;h2&gt;Metadata file&lt;/h2&gt;  &lt;ul&gt; &lt;li&gt;What: Description of the input data files, where they are, sample IDs, a &amp;ldquo;group&amp;rdquo; such as a treatment type, and details of the RNA-Seq experiment&lt;/li&gt; &lt;li&gt;Used by: Entire pipeline&lt;/li&gt; &lt;li&gt;Example file: &lt;code&gt;test-data/conditions_chr9.tab&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt;   &lt;p&gt;Text of example file:&lt;/p&gt;  
&lt;div class="CodeRay"&gt; &lt;div class="code"&gt;&lt;pre&gt;# These data are a subset of http://0-www.ncbi.nlm.nih.gov.elis.tmu.edu.tw/geo/query/acc.cgi?acc=GSE27619 from GEO, specifically:
# GSM721116, GSM721117, GSM721118, GSM721119, GSM721123, GSM721124 
## LNCaP and PrEC are the names of prostate cancer cell lines used in this GEO dataset 
## As you may have noticed, any lines starting with a hash (`#') are ignored 
## This file is based on the columns, so if you add extraneous columns, they will not be read into the program (ie you can add comments) 
#### 
# This is a tab-delimited file, with the following columns: 
# bam_prefix     id     group     gender     read_type     strandedness 
## bam_prefix = the filename, without the .bam 
## id = (user-defined, could be anything) 
## group = (user-defined, could be anything) 
## gender = male --or-- female 
## read_type = single_read --or-- paired_end 
## strandedness = whether the cDNA library preparation was strand-specific or not. values = &amp;quot;strand_specific&amp;quot; --or-- &amp;quot;not_strand_specific&amp;quot; 
test-data/GSM721117_mctp_20F0GAAXX_1_chr9_withheader     LNCaP_1     LNCaP     male     single_read     not_strand_specific # (This is a comment) Illumina
test-data/GSM721119_mctp_20F0GAAXX_2_chr9_withheader     LNCaP_2     LNCaP     male     single_read     not_strand_specific     # Illumina 
test-data/GSM721118_mctp_20F0GAAXX_3_chr9_withheader     LNCaP_3     LNCaP     male     single_read     not_strand_specific 
test-data/GSM721116_mctp_20F0GAAXX_4_chr9_withheader     LNCaP_4     LNCaP     male     single_read     not_strand_specific 
test-data/GSM721123_mctp_30CYNAAXX_5_chr9_withheader     PrEC_1     PrEC     male     single_read     not_strand_specific 
test-data/GSM721124_mctp_209ENAAXX_8_chr9_withheader     PrEC_2     PrEC     male     single_read     not_strand_specific&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt;   &lt;p&gt;A tab-delimited file of the conditions of each sample, including:&lt;/p&gt;  &lt;ol&gt; &lt;li&gt;&lt;code&gt;.bam&lt;/code&gt; file location (without the final &lt;code&gt;.bam&lt;/code&gt;, this makes the processing much easier)  &lt;ol&gt; &lt;li&gt;Note: your &lt;code&gt;.bam&lt;/code&gt; files MUST be indexed (have a accompanying &lt;code&gt;.bai&lt;/code&gt; files) for RSeQC&lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;li&gt;sample ID that you can assign to whatever you want&lt;/li&gt; &lt;li&gt;The group or treatment type. In the example, it is the identification of two cell lines, but you may have &amp;ldquo;untreated&amp;rdquo; and &amp;ldquo;treated,&amp;rdquo; for example.&lt;/li&gt; &lt;li&gt;Gender of the sample. This is important for Circos plotting, and whether we need to include or omit the Y chromosome.&lt;/li&gt; &lt;li&gt;Read type, whether the sequencing was single-read or paired-end&lt;/li&gt; &lt;li&gt;Strandedness, whether the cDNA library preparation was strand-specific or not.&lt;/li&gt; &lt;/ol&gt;   &lt;h2&gt;Gene Transfer Format (GTF) file for estimating gene counts&lt;/h2&gt;  &lt;ul&gt; &lt;li&gt;What: GTF (Gene Transfer Format) files that you want to use to estimate gene counts.&lt;/li&gt; &lt;li&gt;Used by: &lt;code&gt;HTSeq&lt;/code&gt; and &lt;code&gt;DEXSeq&lt;/code&gt; (differential exon usage)&lt;/li&gt; &lt;li&gt;Example file: &lt;code&gt;test-data/hg19_ucsc_genes.gtf&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt;   &lt;p&gt;First few lines of example file:&lt;/p&gt;  &lt;div class="CodeRay"&gt; 
&lt;div class="code"&gt;&lt;pre&gt;
chr1     hg19_knownGene     exon     11874     12227     0.000000     +     .     gene_id &amp;quot;uc001aaa.3&amp;quot;; transcript_id &amp;quot;uc001aaa.3&amp;quot;; 
chr1     hg19_knownGene     exon     12613     12721     0.000000     +     .     gene_id &amp;quot;uc001aaa.3&amp;quot;; transcript_id &amp;quot;uc001aaa.3&amp;quot;; 
chr1     hg19_knownGene     exon     13221     14409     0.000000     +     .     gene_id &amp;quot;uc001aaa.3&amp;quot;; transcript_id &amp;quot;uc001aaa.3&amp;quot;; 
chr1     hg19_knownGene     exon     11874     12227     0.000000     +     .     gene_id &amp;quot;uc010nxr.1&amp;quot;; transcript_id &amp;quot;uc010nxr.1&amp;quot;; 
chr1     hg19_knownGene     exon     12646     12697     0.000000     +     .     gene_id &amp;quot;uc010nxr.1&amp;quot;; transcript_id &amp;quot;uc010nxr.1&amp;quot;; 
chr1     hg19_knownGene     exon     13221     14409     0.000000     +     .     gene_id &amp;quot;uc010nxr.1&amp;quot;; transcript_id &amp;quot;uc010nxr.1&amp;quot;; 
chr1     hg19_knownGene     start_codon     12190     12192     0.000000     +     .     gene_id &amp;quot;uc010nxq.1&amp;quot;; transcript_id &amp;quot;uc010nxq.1&amp;quot;; 
chr1     hg19_knownGene     CDS     12190     12227     0.000000     +     0     gene_id &amp;quot;uc010nxq.1&amp;quot;; transcript_id &amp;quot;uc010nxq.1&amp;quot;; 
chr1     hg19_knownGene     exon     11874     12227     0.000000     +     .     gene_id &amp;quot;uc010nxq.1&amp;quot;; transcript_id &amp;quot;uc010nxq.1&amp;quot;; 
chr1     hg19_knownGene     CDS     12595     12721     0.000000     +     1     gene_id &amp;quot;uc010nxq.1&amp;quot;; transcript_id &amp;quot;uc010nxq.1&amp;quot;;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt;

&lt;p&gt;GTF files are a subset of GFF (General Feature Format) files. To get one of these files, follow the following steps: (there is probably a similar method to use the ENSEMBL website, but I am not familiar with it so I am giving these instructions that I myself have followed many times)&lt;/p&gt;  &lt;ol&gt; &lt;li&gt;Go to &lt;a href="http://genome.ucsc.edu/cgi-bin/hgTables"&gt;http://genome.ucsc.edu/cgi-bin/hgTables&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Choose your clade and organism of interest&lt;/li&gt; &lt;li&gt;Choose these settings:  &lt;ol&gt; &lt;li&gt;group: &amp;ldquo;Genes and Gene Prediction Tracks&amp;rdquo;&lt;/li&gt; &lt;li&gt;track: (whatever you want, but these instructions are built on using &amp;ldquo;UCSC Genes.&amp;rdquo; You can use Ensembl or other transcript IDs but then you will need to choose different columns from the kgXref file for the TranscriptID-Symbol file, so I recommend sticking with UCSC IDs for now)&lt;/li&gt; &lt;li&gt;table: &amp;ldquo;knownGene&amp;rdquo;&lt;/li&gt; &lt;li&gt;region: &amp;ldquo;genome&amp;rdquo;&lt;/li&gt; &lt;li&gt;output format: &amp;ldquo;GTF &amp;ndash; gene transfer format&amp;rdquo;&lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;li&gt;output file: (whatever you want, but I suggest something informative like &lt;code&gt;hg19_ucsc_genes.gtf&lt;/code&gt;)  &lt;ol&gt; &lt;li&gt;Make sure to include the file extension (&lt;code&gt;.gtf&lt;/code&gt;) in the filename&lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;li&gt;Press &amp;ldquo;get output&amp;rdquo;  &lt;ol&gt; &lt;li&gt;A file will be downloaded to your &amp;ldquo;Downloads&amp;rdquo; folder that you will need to move to somewhere more permanent, such as where you keep your other gene information files.&lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;/ol&gt;   &lt;h2&gt;GTF file processed with DEXSeq&lt;/h2&gt;  &lt;ul&gt; &lt;li&gt;What: GTF (Gene Transfer Format) file specially formatted for use with DEXSeq, which measures differential exon usage.&lt;/li&gt; &lt;li&gt;Used by: DEXSeq  &lt;ul&gt; &lt;li&gt;[not yet fully running, but you need to specify this so the order of files doesn&amp;rsquo;t get altered from what the program expects]&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Example file: &lt;code&gt;test-data/hg19_ucsc_genes_chr9_dexseq.gtf&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt;   &lt;p&gt;First few lines of example file:&lt;/p&gt;  
&lt;div class="CodeRay"&gt; &lt;div class="code"&gt;&lt;pre&gt;
chr9     hg19_ucsc_genes_chr9.gtf     aggregate_gene     11987     14525     .     +     .     gene_id &amp;quot;uc011llp.1&amp;quot; 
chr9     hg19_ucsc_genes_chr9.gtf     exonic_part     11987     12340     .     +     .     transcripts &amp;quot;uc011llp.1&amp;quot;; exonic_part_number &amp;quot;001&amp;quot;; gene_id &amp;quot;uc011llp.1&amp;quot; 
chr9     hg19_ucsc_genes_chr9.gtf     exonic_part     12726     12834     .     +     .     transcripts &amp;quot;uc011llp.1&amp;quot;; exonic_part_number &amp;quot;002&amp;quot;; gene_id &amp;quot;uc011llp.1&amp;quot; 
chr9     hg19_ucsc_genes_chr9.gtf     exonic_part     13334     14525     .     +     .     transcripts &amp;quot;uc011llp.1&amp;quot;; exonic_part_number &amp;quot;003&amp;quot;; gene_id &amp;quot;uc011llp.1&amp;quot; 
chr9     hg19_ucsc_genes_chr9.gtf     aggregate_gene     14511     29739     .     -     .     gene_id &amp;quot;uc010mgp.1+uc010mgm.1+uc022bcs.1+uc011llq.1+uc003zfu.1&amp;quot; 
chr9     hg19_ucsc_genes_chr9.gtf     exonic_part     14511     14940     .     -     .     transcripts &amp;quot;uc010mgm.1&amp;quot;; exonic_part_number &amp;quot;001&amp;quot;; gene_id &amp;quot;uc010mgp.1+uc010mgm.1+uc022bcs.1+uc011llq.1+uc003zfu.1&amp;quot; 
chr9     hg19_ucsc_genes_chr9.gtf     exonic_part     15081     15149     .     -     .     transcripts &amp;quot;uc010mgm.1+uc022bcs.1&amp;quot;; exonic_part_number &amp;quot;002&amp;quot;; gene_id &amp;quot;uc010mgp.1+uc010mgm.1+uc022bcs.1+uc011llq.1+uc003zfu.1&amp;quot; 
chr9     hg19_ucsc_genes_chr9.gtf     exonic_part     15909     16061     .     -     .     transcripts &amp;quot;uc010mgm.1+uc022bcs.1&amp;quot;; exonic_part_number &amp;quot;003&amp;quot;; gene_id &amp;quot;uc010mgp.1+uc010mgm.1+uc022bcs.1+uc011llq.1+uc003zfu.1&amp;quot; 
chr9     hg19_ucsc_genes_chr9.gtf     exonic_part     16188     16421     .     -     .     transcripts &amp;quot;uc011llq.1&amp;quot;; exonic_part_number &amp;quot;004&amp;quot;; gene_id &amp;quot;uc010mgp.1+uc010mgm.1+uc022bcs.1+uc011llq.1+uc003zfu.1&amp;quot; 
chr9     hg19_ucsc_genes_chr9.gtf     exonic_part     16718     16876     .     -     .     transcripts &amp;quot;uc010mgm.1+uc022bcs.1+uc011llq.1&amp;quot;; exonic_part_number &amp;quot;005&amp;quot;; gene_id &amp;quot;uc010mgp.1+uc010mgm.1+uc022bcs.1+uc011llq.1+uc003zfu.1&amp;quot;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt;   &lt;p&gt;To create this file, You need a GTF file (which can be obtained as described in the GTF section), and then use the script included in &lt;code&gt;rna-seq-diff-exprn/scripts/external/dexseq_prepare_annotation.py&lt;/code&gt;:&lt;/p&gt;  &lt;div class="CodeRay"&gt; &lt;div class="code"&gt;&lt;pre&gt;$ python2.7 scripts/external/dexseq_prepare_annotation.py test-data/hg19_ucsc_genes.gtf test-data/hg19_ucsc_genes_dexseq.gtf&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt;   &lt;p&gt;The dollar sign &lt;code&gt;$&lt;/code&gt; indicates a bash shell and shows that we are using a command-line interface, as opposed to a command embedded in source code such as this document.&lt;/p&gt;  &lt;h2&gt;Browser extensible data (BED) files, again for estimating gene counts&lt;/h2&gt;  &lt;ul&gt; &lt;li&gt;What: BED (Browser Extensible Data) files that you want to use to estimate gene counts.&lt;/li&gt; &lt;li&gt;Used by: &lt;code&gt;bedtools coverage&lt;/code&gt;&lt;/li&gt; &lt;li&gt;Example file: &lt;code&gt;test-data/hg19_ucsc_genes.bed&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt;   &lt;p&gt;First few lines of example file:&lt;/p&gt;  &lt;div class="CodeRay"&gt; 

&lt;div class="code"&gt;&lt;pre&gt;track name=&amp;quot;tb_knownGene&amp;quot; description=&amp;quot;table browser query on knownGene&amp;quot; visibility=3 url= 
chr1     11873     14409     uc001aaa.3     0     +     11873     11873     0     3     354,109,1189,     0,739,1347, 
chr1     11873     14409     uc010nxr.1     0     +     11873     11873     0     3     354,52,1189,     0,772,1347, 
chr1     11873     14409     uc010nxq.1     0     +     12189     13639     0     3     354,127,1007,     0,721,1529, 
chr1     14361     16765     uc009vis.3     0     -     14361     14361     0     4     468,69,147,159,     0,608,1434,2245, 
chr1     16857     17751     uc009vjc.1     0     -     16857     16857     0     2     198,519,     0,375, 
chr1     15795     18061     uc009vjd.2     0     -     15795     15795     0     5     152,159,198,136,456,     0,811,1062,1437,1810, 
chr1     14361     19759     uc009vit.3     0     -     14361     14361     0     9     468,69,152,159,198,510,147,99,847,     0,608,1434,2245,2496,2871,3553,3906,4551, 
chr1     14361     19759     uc009viu.3     0     -     14361     14361     0     10     468,69,152,159,198,510,147,102,54,847,     0,608,1434,2245,2496,2871,3553,3906,4139,4551, 
chr1     14361     19759     uc001aae.4     0     -     14361     14361     0     10     468,69,152,159,198,136,137,147,99,847,     0,608,1434,2245,2496,2871,3244,3553,3906,4551,&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt;

&lt;p&gt;&lt;p&gt;To get one of these files, do the following steps: (there is probably a similar method to use the ENSEMBL website, but I am not familiar with it so I am giving these instructions that I myself have followed many times and can help you out with if you are stuck)&lt;/p&gt;  &lt;ol&gt; &lt;li&gt;Go to &lt;a href="http://genome.ucsc.edu/cgi-bin/hgTables"&gt;http://genome.ucsc.edu/cgi-bin/hgTables&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Choose your clade and organism of interest&lt;/li&gt; &lt;li&gt;Choose these settings:  &lt;ol&gt; &lt;li&gt;group: &amp;ldquo;Genes and Gene Prediction Tracks&amp;rdquo;&lt;/li&gt; &lt;li&gt;track: (whatever you want, but these instructions are built on using &amp;ldquo;UCSC Genes.&amp;rdquo; You can use Ensembl or other transcript IDs but then you will need to choose different columns from the kgXref file for the &lt;code&gt;TranscriptID-Symbol&lt;/code&gt; file, so I recommend sticking with UCSC IDs for now)&lt;/li&gt; &lt;li&gt;table: &amp;ldquo;knownGene&amp;rdquo;&lt;/li&gt; &lt;li&gt;region: &amp;ldquo;genome&amp;rdquo;&lt;/li&gt; &lt;li&gt;output format: &amp;ldquo;BED &amp;ndash; browser extensible data&amp;rdquo;&lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;li&gt;output file: (whatever you want, but I suggest something informative like &lt;code&gt;hg19_ucsc_genes.bed&lt;/code&gt;)  &lt;ol&gt; &lt;li&gt;Make sure to include the file extension (&lt;code&gt;.bed&lt;/code&gt;) in the filename&lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;li&gt;Press &amp;ldquo;get output&amp;rdquo;  &lt;ol&gt; &lt;li&gt;A file will be downloaded to your &amp;ldquo;Downloads&amp;rdquo; folder that you will need to move to somewhere more permanent, such as where you keep your other gene information files.&lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;/ol&gt;   &lt;p&gt;If you have an existing BED file, make sure the first line has &lt;code&gt;track name=….&lt;/code&gt; or else RSeQC gets mad.&lt;/p&gt;  &lt;h2&gt;TranscriptID-Symbol file&lt;/h2&gt;  &lt;ul&gt; &lt;li&gt;What: Tab-delimited file with the transcript ID in column 1 and the gene symbols you&amp;rsquo;d like to use in column 2, without a header line.&lt;/li&gt; &lt;li&gt;Used by: the pipeline to create a table of gene counts&lt;/li&gt; &lt;li&gt;Example file: &lt;code&gt;test-data/hg19_id_symbol.txt&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt;   &lt;p&gt;First few lines of example file:&lt;/p&gt;&lt;br /&gt;
&lt;div class="CodeRay"&gt; &lt;div class="code"&gt;&lt;pre&gt;
uc001aaa.3     DDX11L1 
uc010nxr.1     DDX11L1 
uc010nxq.1     DDX11L9 
uc001aal.1     OR4F5 
uc001aaq.2     DQ597235 
uc001aar.2     DQ599768 
uc001aau.3     LOC100132287 
uc021oeh.1     LOC100133331 
uc009vjk.2     LOC100133331 
uc021oei.1     LOC388312&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt;   &lt;p&gt;You can get one of these files by:&lt;/p&gt;  &lt;ol&gt; &lt;li&gt;Go to &lt;a href="http://genome.ucsc.edu/cgi-bin/hgTables"&gt;http://genome.ucsc.edu/cgi-bin/hgTables&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Choose your clade and organism of interest&lt;/li&gt; &lt;li&gt;Choose these settings:  &lt;ol&gt; &lt;li&gt;group: &amp;ldquo;Genes and Gene Prediction Tracks&amp;rdquo;&lt;/li&gt; &lt;li&gt;track: (whatever you want, but these instructions are built on using &amp;ldquo;UCSC Genes.&amp;rdquo; You can use Ensembl or other transcript IDs but then you will need to choose different columns from the kgXref file for the &lt;code&gt;TrascriptID-Symbol&lt;/code&gt; file, so I recommend sticking with UCSC IDs for now)&lt;/li&gt; &lt;li&gt;table: &amp;ldquo;kgXref&amp;rdquo;&lt;/li&gt; &lt;li&gt;region: &amp;ldquo;genome&amp;rdquo;&lt;/li&gt; &lt;li&gt;output format: &amp;ldquo;GTF &amp;ndash; gene transfer format&amp;rdquo;&lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;li&gt;output file: (whatever you want, but I suggest something informative like &lt;code&gt;hg19_kgXref.txt&lt;/code&gt;)  &lt;ol&gt; &lt;li&gt;Make sure to include the file extension (&lt;code&gt;.txt&lt;/code&gt;, for example) in the filename&lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;li&gt;Press &amp;ldquo;get output&amp;rdquo;&lt;/li&gt; &lt;li&gt;Now you need to take an extra step to get just the UCSC IDs, e.g. &lt;code&gt;uc002gig.1&lt;/code&gt; (column 1 in the kgXref file) and the gene symbols, e.g. &lt;code&gt;TP53&lt;/code&gt; (column 5 in the kgXref file), a known tumor suppressor gene.&lt;/li&gt; &lt;/ol&gt;   &lt;p&gt;&lt;strong&gt;But wait! You&amp;rsquo;re not done yet!&lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;You need to remove the first line, the header of the file that explains what is in which column.&lt;/p&gt;  &lt;p&gt;You could do this in Microsoft Excel, but the human file (for example) has 80,923 lines in it and will crash Excel. For organisms with fewer documented genes, using Excel to push columns around may be just fine.&lt;/p&gt;  &lt;p&gt;The Linux/UNIX (lovingly called &amp;ldquo;*NIX&amp;rdquo;) commands to take columns is called &amp;ldquo;cut&amp;rdquo; (there is also &amp;ldquo;paste&amp;rdquo; to put together columns from different files but that&amp;rsquo;s out of the scope of what we&amp;rsquo;re doing here) We want columns 1 and 5 (the UCSC ID and the gene symbol &amp;ndash; take a peek at the file by typing &lt;code&gt;head hg19_kgXref.txt&lt;/code&gt; on the command line in the directory &amp;ndash; this will show the first 10 lines of the file), so we&amp;rsquo;ll say &lt;code&gt;cut -f 1,5&lt;/code&gt; where the &lt;code&gt;-f&lt;/code&gt; indicates the &amp;ldquo;fields&amp;rdquo; we want to &lt;code&gt;cut&lt;/code&gt;. Then we use &lt;code&gt;sed 1d&lt;/code&gt; to skip the first line (skipping more than one line has a slighly different command, check out &lt;a href="http://www.grymoire.com/Unix/Sed.html"&gt;my favorite Sed tutorial&lt;/a&gt; if you&amp;rsquo;re interested in learning more). And the &lt;code&gt;&amp;lt;&lt;/code&gt; indicates the input file, the &lt;code&gt;|&lt;/code&gt; indicates that the output of the previous command is treated as input to the next command, and the &lt;code&gt;&amp;gt;&lt;/code&gt; indicates the output file. Note that we created a &lt;em&gt;new&lt;/em&gt; file and did not overwrite the old one. In general, it is best practices to create a new file rather than overwrite the old one. Also, if you try to make your input and output files the same, the commands may get confused and you could lose your original data. :(&lt;/p&gt;  &lt;div class="CodeRay"&gt; &lt;div class="code"&gt;&lt;pre&gt;$ cut -f 1,5 &amp;lt; hg19_kgXref.txt | sed 1d &amp;gt; hg19_id_symbol.txt&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt;   &lt;p&gt;Or, if you want to create a chromosome-specific file like I did, use your &lt;code&gt;.bed&lt;/code&gt; file to search through your kgXref file:&lt;/p&gt;  &lt;div class="CodeRay"&gt; &lt;div class="code"&gt;&lt;pre&gt;$ cut -f 4 hg19_ucsc_genes_chr9.bed | grep --fixed-strings - hg19_kgXref.txt &amp;gt;hg19_kgXref_chr9.txt&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt;   &lt;p&gt;Then do the same as above, but with your chr9 file:&lt;/p&gt;  &lt;div class="CodeRay"&gt; &lt;div class="code"&gt;&lt;pre&gt;$ cut -f 1,5 &amp;lt; hg19_kgXref_chr9.txt | sed 1d &amp;gt; hg19_id_symbol_chr9.txt&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt;   &lt;h2&gt;Genome file&lt;/h2&gt;&lt;/p&gt;
&lt;ul&gt; &lt;li&gt; What: This &amp;quot;Genome&amp;quot; file really just says how long each chromosome is. &lt;/li&gt;
&lt;li&gt; Used by: `genomeCoverageBed` &lt;/li&gt;
&lt;li&gt; Example file: `test-data/human.hg19.genome`&lt;/li&gt;
&lt;/ul

&lt;p&gt;First few lines of example file:&lt;/p&gt;  
&lt;div class="CodeRay"&gt; &lt;div class="code"&gt;&lt;pre&gt;
chr1     249250621 
chr2     243199373 
chr3     198022430 
chr4     191154276 
chr5     180915260 
chr6     171115067 
chr7     159138663 
chrX     155270560 
chr8     146364022 
chr9     141213431&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt;   
&lt;p&gt;Besides the example files, you can also use ones shipped with BEDTools. On my machine, these files are located in &lt;code&gt;~/packages/BEDTools/genomes&lt;/code&gt;:&lt;/p&gt;  &lt;div class="CodeRay"&gt; &lt;div class="code"&gt;&lt;pre&gt;$ ls ~/packages/BEDTools-Version-2.16.2/genomes/ human.hg18.genome human.hg19.genome mouse.mm8.genome  mouse.mm9.genome&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt;   &lt;p&gt;As to how to create these files for non-mouse or human organisms, my suggestion (while rather unwieldy) is to:&lt;/p&gt;  &lt;ol&gt; &lt;li&gt;Go to &lt;a href="http://genome.ucsc.edu/cgi-bin/hgTables"&gt;http://genome.ucsc.edu/cgi-bin/hgTables&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Choose your clade and organism of interest&lt;/li&gt; &lt;li&gt;Choose these settings:  &lt;ol&gt; &lt;li&gt;group: &amp;ldquo;All Tables&amp;rdquo;&lt;/li&gt; &lt;li&gt;table: &amp;ldquo;chromInfo&amp;rdquo;&lt;/li&gt; &lt;li&gt;output format: &amp;ldquo;all fields from selected table&amp;rdquo;&lt;/li&gt; &lt;li&gt;output file: (anything you want, but preferably something informative like platypus.ornAna1.genome)&lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;li&gt;Press &amp;ldquo;get output&amp;rdquo;&lt;/li&gt; &lt;li&gt;Remove the first line and the third column of the file, which you could do in Microsoft Excel (since this file will be comparatively small), or by using this shell command: &lt;code&gt;$ cut -f 1,2 &amp;lt; platypus.ornAna1.genome | sed 1d &amp;gt; platypus.ornAna1.genome.fixed&lt;/code&gt;&lt;/li&gt; &lt;/ol&gt;   &lt;h2&gt;Karyotype file&lt;/h2&gt;  &lt;ul&gt; &lt;li&gt;What: Another &amp;ldquo;this is how long all the chromosomes are&amp;rdquo; file, but formatted so Circos can use it&lt;/li&gt; &lt;li&gt;Used by: Circos&lt;/li&gt; &lt;li&gt;Example file: &lt;code&gt;test-data/karyotype/karyotype.human.hg19.txt&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt;   &lt;p&gt;This file looks like:&lt;/p&gt;  

&lt;div class="CodeRay"&gt; &lt;div class="code"&gt;&lt;pre&gt;
chr - chr1 chr1 0 249250621 chr1 
chr - chr2 chr2 0 243199373 chr2 
chr - chr3 chr3 0 198022430 chr3 
chr - chr4 chr4 0 191154276 chr4 
chr - chr5 chr5 0 180915260 chr5 
chr - chr6 chr6 0 171115067 chr6 
chr - chr7 chr7 0 159138663 chr7 
chr - chr8 chr8 0 146364022 chr8 
chr - chr9 chr9 0 141213431 chr9&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt;   

&lt;p&gt;Karyotype file used by Circos, which specifies the chromosome lengths. The third column, the chromosome name, MUST use &lt;code&gt;chr1&lt;/code&gt;-type notation, and not the typical &lt;code&gt;hs1&lt;/code&gt; notation for Homo sapiens chromosome 1. This is because &lt;code&gt;bedtools&lt;/code&gt; and friends use &lt;code&gt;chr1&lt;/code&gt; notation, but I didn&amp;rsquo;t want to require the organism name and then lookup the conversion. Presumably, you would have samples from all the same organism since you are comparing gene expression and coverage across different treatments, so I felt this was a safe assumption. I also didn&amp;rsquo;t want to lock you into ONLY using human data, because there are plenty of interesting organisms out there.&lt;/p&gt;  &lt;h2&gt;GC Content file&lt;/h2&gt;  &lt;ul&gt; &lt;li&gt;What: Percentage of Guanine and Cytosine (GC) bases per some distance (I recommend at least 1000 bases, or else it will take a VERY long time to plot). This is an important quantity because the GC base pairing has three hydrogen bonds instead of two like AT, is known to be a stronger bond, and genes are also known to be GC-rich.&lt;/li&gt; &lt;li&gt;Used by: Circos&lt;/li&gt; &lt;li&gt;Example file: &lt;code&gt;test-data/hg19_gc_content_circos_chr9.txt&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt;   &lt;p&gt;First few lines of example file:&lt;/p&gt;  

&lt;div class="CodeRay"&gt; &lt;div class="code"&gt;&lt;pre&gt;
chr9     10000     10999     58 
chr9     11000     11999     58 
chr9     12000     12999     57.9 
chr9     13000     13999     57.9 
chr9     14000     14999     58 
chr9     15000     15999     60.7 
chr9     16000     16999     56.9 
chr9     17000     17999     61.3 
chr9     18000     18999     60.7 
chr9     19000     19999     57.7&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt;   

&lt;p&gt;This GC content file can be created by converting a &lt;code&gt;.wig&lt;/code&gt; (wiggle) format file that&amp;rsquo;s used for a genome browser into a circus format using:&lt;/p&gt;  &lt;div class="CodeRay"&gt; &lt;div class="code"&gt;&lt;pre&gt;../scripts/wig_to_circos.R hg19_gc1000Base.txt hg19_gc_content.circos&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt;   &lt;h2&gt;Number of bunches&lt;/h2&gt;  &lt;ul&gt; &lt;li&gt;What: Merges samples of the same group, e.g. &lt;em&gt;untreated&lt;/em&gt; into &amp;ldquo;bunches,&amp;rdquo; or mergings of several samples.  &lt;ul&gt; &lt;li&gt;For example, in the example data provided, there are four samples of the LNCaP prostate cancer cell line, and two of the PrEC prostate cancer cell line.&lt;/li&gt; &lt;li&gt;In the provided example, two bunches are specified. This means that in addition to calculating the gene counts for &lt;code&gt;LNCaP_1&lt;/code&gt;, &lt;code&gt;LNCaP_2&lt;/code&gt;, &lt;code&gt;LNCaP_3&lt;/code&gt;, &lt;code&gt;LNCaP_4&lt;/code&gt;, &lt;code&gt;PrEC_1&lt;/code&gt;, &lt;code&gt;PrEC_2&lt;/code&gt;, the pipeline will also create  &lt;ul&gt; &lt;li&gt;&lt;code&gt;LNCaP_bunch1of2&lt;/code&gt;, containing &lt;code&gt;LNCaP_1&lt;/code&gt; and &lt;code&gt;LNCaP_2&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code&gt;LNCaP_bunch2of2&lt;/code&gt;, containing &lt;code&gt;LNCaP_3&lt;/code&gt; and &lt;code&gt;LNCaP_4&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code&gt;PrEC_bunch1of2&lt;/code&gt;, containing &lt;code&gt;PrEC_1&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code&gt;PrEC_bunch2of2&lt;/code&gt;, containing &lt;code&gt;PrEC_2&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;Why this is useful:&lt;/strong&gt; Originally, this pipeline was written for single-cell RNA-Seq analysis and we found that while it is very interesting to look at the genes expressed in a single cell, we saw significantly more signal by merging treatment groups into bunches, and performing differential expression analysis on these bunches.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Used by: Entire pipeline&lt;/li&gt; &lt;li&gt;Example: 2&lt;/li&gt; &lt;/ul&gt;   &lt;p&gt;To change the ordering of samples, change the conditions file, as that is the basis of the bunching order.&lt;/p&gt;  &lt;p&gt;If you don&amp;rsquo;t want &lt;strong&gt;any&lt;/strong&gt; bunches, omit this variable from the command line.&lt;/p&gt;  &lt;h1&gt;Dependencies&lt;/h1&gt;  &lt;p&gt;These are programs you must have installed before attempting to run the code. Note: This may seem like a lot, but if you are in biomedical research, it is likely that the servers at your institution already have most of these installed.&lt;/p&gt;  &lt;ol&gt; &lt;li&gt;&lt;a href="http://www.python.org/getit/releases/2.7/"&gt;Python 2.7&lt;/a&gt; &amp;ndash; for RSeQC and HTSeq, #2 and #3  &lt;ol&gt; &lt;li&gt;&lt;a href="http://www.cython.org/#download"&gt;Cython&lt;/a&gt; &amp;ndash; required for pybedtools below&lt;/li&gt; &lt;li&gt;&lt;a href="http://packages.python.org/pybedtools/"&gt;pybedtools&lt;/a&gt; &amp;ndash; required for HTSeq&lt;/li&gt; &lt;li&gt;&lt;a href="http://www-huber.embl.de/users/anders/HTSeq/doc/overview.html"&gt;HTSeq&lt;/a&gt; &amp;ndash; Another method of calculating gene expression counts, in addition to BEDTools Coverage. Installed via python2.7, i.e. instead of typing &lt;code&gt;python setup.py install&lt;/code&gt; Say: &lt;code&gt;python2.7 setup.py install&lt;/code&gt;&lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="http://code.google.com/p/rseqc/downloads/list"&gt;RSeQC, Version 2.3 or later&lt;/a&gt;, RNA-Sequencing Quality Control software&lt;/li&gt; &lt;li&gt;&lt;a href="http://code.google.com/p/bedtools/downloads/list"&gt;BEDTools&lt;/a&gt;, version 2.16.2 or greater&lt;/li&gt; &lt;li&gt;Perl 5.8.x or newer (for Circos, #6) Linux and Mac users: &lt;a href="http://www.perl.org/get.html"&gt;http://www.perl.org/get.html&lt;/a&gt; Windows users: &lt;a href="http://strawberryperl.com/"&gt;http://strawberryperl.com/&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://circos.ca"&gt;Circos&lt;/a&gt;, version 0.60 or later (for plotting genome coverage data) Note: Circos has a number of Perl package dependencies that take some time to make sure they are all properly installed on your system. &lt;code&gt;http://circos.ca/software/download/circos&lt;/code&gt; Aliased such that &lt;code&gt;circos&lt;/code&gt; will run the program On my machine, this is accomplished by adding this line to the file in &lt;code&gt;/Users/olgabotvinnik/.bashrc&lt;/code&gt;, or my &lt;code&gt;~/.bashrc&lt;/code&gt; file: &lt;code&gt;PATH=$PATH:/usr/bin/circos/bin ; export PATH&lt;/code&gt; Which means that when you run commands, the computer will know to look in &lt;code&gt;/usr/bin/circos/bin&lt;/code&gt; for potential executable files. /usr/bin/circos Is where I personally installed Circos. On the server that I use, for example, it is installed in: &lt;code&gt;/share/apps/circos-0.60/bin&lt;/code&gt; So then my &lt;code&gt;~/.bashrc&lt;/code&gt; file on the server looks like: &lt;code&gt;PATH=$PATH:/share/apps/circos-0.60/bin ; export PATH&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://www.r-project.org/"&gt;R, 2.14.2 or later&lt;/a&gt;  &lt;ol&gt; &lt;li&gt;&lt;a href="http://www-huber.embl.de/users/anders/DESeq/"&gt;DESeq&lt;/a&gt;. For differential expression analysis.&lt;/li&gt; &lt;li&gt;&lt;a href="http://bioinfo.cipf.es/noiseq/doku.php?id=downloads"&gt;NOISeq&lt;/a&gt;. Another type of differential expression analysis software. You don&amp;rsquo;t need to download this as it is included in this software, but I figured I should mention it.&lt;/li&gt; &lt;li&gt;&lt;a href="http://bioconductor.org/packages/release/bioc/html/DEXSeq.html"&gt;DEXSeq&lt;/a&gt;. Differential exon usage analysis&lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;/ol&gt;   &lt;h1&gt;How to run the example code&lt;/h1&gt;  &lt;h2&gt;Before running, make sure you have everything in place&lt;/h2&gt;  &lt;p&gt;Before running, make sure you add these to your path: &lt;code&gt;python2.7&lt;/code&gt;, &lt;code&gt;BEDTools&lt;/code&gt;, &lt;code&gt;SAMTools&lt;/code&gt;, &lt;code&gt;RSeQC&lt;/code&gt; in &lt;code&gt;python2.7&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;For example, for me, these are the locations of these packages on my computer. Add these lines, modified to the locations on your computer, below to your &lt;code&gt;~/.bashrc&lt;/code&gt; file and then &amp;ldquo;source&amp;rdquo; it: &lt;code&gt;source ~/.bashrc&lt;/code&gt;. FYI: the colon character, &amp;ldquo;:&amp;rdquo; is the delimiter between places to look for binary executables files.&lt;/p&gt;  &lt;div class="CodeRay"&gt; &lt;div class="code"&gt;&lt;pre&gt;export PATH=/usr/local/bin/python2.7:$PATH export PATH=$PATH:/share/apps/samtools-0.1.18:/share/apps/BEDTools-Version-2.15.0/ export PYTHONPATH=/share/apps/RSeQC/usr/local/lib/python2.7/site-packages:$PYTHONPATH export PATH=/share/apps/RSeQC/usr/local/bin:$PATH&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt;   &lt;h2&gt;The example run&lt;/h2&gt;  &lt;p&gt;An example run looks like this (yes it is a very long command):&lt;/p&gt;  &lt;div class="CodeRay"&gt; &lt;div class="code"&gt;&lt;pre&gt;scripts/pipeline.sh test-results test-data/conditions_chr9.tab test-data/hg19_ucsc_genes.gtf test-data/hg19_ucsc_genes_chr9_dexseq.gtf test-data/hg19_ucsc_genes.bed test-data/hg19_id_symbol.txt test-data/human.hg19.genome test-data/karyotype/karyotype.human.hg19.txt test-data/hg19_gene_density_1e5bins.txt test-data/hg19_gc_content_circos_chr9.txt 2&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt;   &lt;p&gt;Or, using the keywords we&amp;rsquo;ve discussed:![](http://media.tumblr.com/tumblr_mde7gmsVr81rw6gvj.png)&lt;/p&gt;  &lt;div class="CodeRay"&gt; &lt;div class="code"&gt;&lt;pre&gt;scripts/pipeline.sh [output directory] [metadata] [.gtf] [dexseq-processed .gtf] [.bed] [transcriptID-symbol] [genome] [karyotype] [gene density] [gc content] [number of bunches]&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;</summary></entry><entry><title>Ziv Bar-Joseph: Marathons and computational biology</title><link href="/blog/2012/07/18/2012-07-18-ziv-bar-joseph-marathons-and-computational-biology/" rel="alternate"></link><updated>2012-07-18T09:52:00-07:00</updated><author><name>sciencemeetproductivity</name></author><id>tag:,2012-07-18:blog/2012/07/18/2012-07-18-ziv-bar-joseph-marathons-and-computational-biology/</id><summary type="html">&lt;div class='posterous_autopost'&gt;&lt;p class="p1" style="padding: 0px; margin: 15px 0px 18px; color: #333333; font-family: Georgia, Times New Roman, Times, serif; font-size: 14px; line-height: 22px; text-align: justify;"&gt;&lt;div class='p_embed p_image_embed'&gt; &lt;a href="http://getfile1.posterous.com/getfile/files.posterous.com/temp-2012-07-18/oFrydnHtzEdskcpbvmqIocvhIuCyDlhrbtabjjmIjcgBcFyCfucxjxIqmFnI/run.jpg.scaled1000.jpg"&gt;&lt;img alt="Run" height="375" src="http://getfile9.posterous.com/getfile/files.posterous.com/temp-2012-07-18/oFrydnHtzEdskcpbvmqIocvhIuCyDlhrbtabjjmIjcgBcFyCfucxjxIqmFnI/run.jpg.scaled500.jpg" width="500" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/p&gt;  &lt;p class="p1" style="padding: 0px; margin: 15px 0px 18px; color: #333333; font-family: Georgia, Times New Roman, Times, serif; font-size: 14px; line-height: 22px; text-align: justify;"&gt;The largest computational biology conference in the world is happening just finished in Long Beach, CA, and I had the privilege of being here to witness its 20th anniversary.&lt;a href="http://www.iscb.org/ismb2012" style="padding: 0px; margin: 0px; color: #000000;"&gt;&amp;nbsp;Intelligent Systems for Molecular Biology (ISMB)&lt;/a&gt;&amp;nbsp;Is a fantastic conference, and one of the great aspects of this conference is the&amp;nbsp;&lt;a href="http://www.iscb.org/iscb-awards/overton-prize" style="padding: 0px; margin: 0px; color: #000000;"&gt;Overton Prize&lt;/a&gt;, which honors the contributions of early-career computational biologists, typically those who are within 3-5 years of their first professorship, and are typically untenured. This year, the Overton prize winner is&amp;nbsp;&lt;a href="http://www.iscb.org/iscb-awards/1224" style="padding: 0px; margin: 0px; color: #000000;"&gt;Ziv Bar-Joseph&lt;/a&gt;,&amp;nbsp;&lt;a href="http://www.cs.cmu.edu/~zivbj/" style="padding: 0px; margin: 0px; color: #000000;"&gt;assistant professor at Carnegie-Mellon University&lt;/a&gt;&amp;nbsp;and avid runner.&amp;nbsp;&lt;/p&gt;  &lt;p class="p1" style="padding: 0px; margin: 15px 0px 18px; color: #333333; font-family: Georgia, Times New Roman, Times, serif; font-size: 14px; line-height: 22px; text-align: justify;"&gt;Bar-Joseph's love of running is often mentioned in his talks, but I think it is extremely relevant to his career as a scientist. He has the dedication to run nearly every day&amp;nbsp;&lt;em style="padding: 0px; margin: 0px;"&gt;and&lt;/em&gt;&amp;nbsp;have a very substantial research portfolio. In short, Bar-Joseph has mastered the art of balancing life and work.&amp;nbsp;&lt;/p&gt;  &lt;p class="p1" style="padding: 0px; margin: 15px 0px 18px; color: #333333; font-family: Georgia, Times New Roman, Times, serif; font-size: 14px; line-height: 22px; text-align: justify;"&gt;To encourage young scientists, he analogized his success to a 50-mile run he recently finished. He showed the racecourse and a photo of himself smiling with an age-group award, saying that his smiling face doesn't tell the whole story. Just as when you see the CVs of people who win awards like the Overton, you see an intimidating list of papers, accolades, and accomplishments. But a CV is just the end result.&lt;/p&gt;  &lt;p class="p1" style="padding: 0px; margin: 15px 0px 18px; color: #333333; font-family: Georgia, Times New Roman, Times, serif; font-size: 14px; line-height: 22px; text-align: justify;"&gt;&amp;nbsp;&lt;/p&gt;  &lt;p class="p2" style="padding: 0px; margin: 15px 0px 18px; color: #333333; font-family: Georgia, Times New Roman, Times, serif; font-size: 14px; line-height: 22px; text-align: justify;"&gt;&lt;span style="padding: 0px; margin: 0px; font-size: medium;"&gt;&lt;strong style="padding: 0px; margin: 0px;"&gt;What happened along the way?&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;  &lt;p class="p1" style="padding: 0px; margin: 15px 0px 18px; color: #333333; font-family: Georgia, Times New Roman, Times, serif; font-size: 14px; line-height: 22px; text-align: justify;"&gt;He then showed a photo of himself at the 20-mile mark, looking decidedly unhappy. He said, "there is struggle that you do not see when you just see the end the final results." He had lost his glasses at the beginning of the race, so he could not see the signposts he was supposed to follow. So he wandered around for five miles without knowing where he was, and then he finally hit the 20-mile mark and realized he had wandered around fruitlessly. Frustrated, but he persevered and went on to win his age category.&lt;/p&gt;  &lt;p class="p1" style="padding: 0px; margin: 15px 0px 18px; color: #333333; font-family: Georgia, Times New Roman, Times, serif; font-size: 14px; line-height: 22px; text-align: justify;"&gt;&amp;nbsp;&lt;/p&gt;  &lt;p class="p1" style="padding: 0px; margin: 15px 0px 18px; color: #333333; font-family: Georgia, Times New Roman, Times, serif; font-size: 14px; line-height: 22px; text-align: justify;"&gt;&lt;span style="padding: 0px; margin: 0px; font-size: medium;"&gt;&lt;strong style="padding: 0px; margin: 0px;"&gt;Perseverance, or "Stick-to-it-ive-ness" as my middle school teacher called it&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;  &lt;p class="p1" style="padding: 0px; margin: 15px 0px 18px; color: #333333; font-family: Georgia, Times New Roman, Times, serif; font-size: 14px; line-height: 22px; text-align: justify;"&gt;His message was simple: perseverance.&amp;nbsp;Maybe you have a similar experience in your past, present, or future, where you thought you were getting somewhere only to realize later on that time was wasted. But in reality, it wasn't wasted. Those extra five miles Bar-Joseph ran made him stronger for the next race, and those few months (or years) you spent mastering a technique taught you diligence and patience, skills that will serve you far better than any single technique.&lt;/p&gt;  &lt;p class="p2" style="padding: 0px; margin: 15px 0px 18px; color: #333333; font-family: Georgia, Times New Roman, Times, serif; font-size: 14px; line-height: 22px; text-align: justify;"&gt;&amp;nbsp;&lt;/p&gt;  &lt;p class="p1" style="padding: 0px; margin: 15px 0px 18px; color: #333333; font-family: Georgia, Times New Roman, Times, serif; font-size: 14px; line-height: 22px; text-align: justify;"&gt;More on Bar-Joseph and his fellow Overton Prize colleagues soon.&lt;/p&gt;  &lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/div&gt;</summary></entry><entry><title>How to be fabulously successful: Eric Lander</title><link href="/blog/2012/01/11/2012-01-11-how-to-be-fabulously-successful-eric-lander/" rel="alternate"></link><updated>2012-01-11T16:01:00-08:00</updated><author><name>sciencemeetproductivity</name></author><id>tag:,2012-01-11:blog/2012/01/11/2012-01-11-how-to-be-fabulously-successful-eric-lander/</id><summary type="html">&lt;div class='posterous_autopost'&gt;&lt;p&gt;Eric Lander, the visionary behind the &lt;a href="http://www.ornl.gov/sci/techresources/Human_Genome/project/about.shtml"&gt;Human Genome Project&lt;/a&gt;, a Professor of Biology at MIT and Systems Biology at Harvard, recipient of a MacArthur "genius" grant, and director of a world-renowned &lt;a href="http://www.broadinstitute.org/"&gt;genome research institute&lt;/a&gt;, was recently&amp;nbsp;&lt;a href="http://www.nytimes.com/2012/01/03/science/broad-institute-director-finds-power-in-numbers.html?pagewanted=all"&gt;&lt;span class="s1"&gt;interviewed&lt;/span&gt;&lt;/a&gt;&amp;nbsp;for the New York Times newspaper. As a computational biologist and an avid fan of his, I devoured the article and hungrily watched the video interview. His story is remarkable: genius mathematician, frustrated with the solitude of mathematics, stumbles upon biology and changes the field forever by applying math to understand genes and disease.&lt;/p&gt;  &lt;p class="p1"&gt;At first, it seems like bunch of chance circumstances that are completely unique to Prof. Lander, such as teaching economics at Harvard, exposing him to a brilliant scientific community that supported his endeavors in biology. Or happening&lt;span style="font-size: small;"&gt; to atten&lt;/span&gt;d the one talk at the one conference where the idea of mapping all the genes in the human genome was first suggested. But if I aim to someday impact bioinformatics research at the same level as Lander, I want to know exactly what he did, day by day, to accomplish all that he has. So I delved deeper.&lt;/p&gt;  &lt;p class="p1"&gt;&lt;span style="font-size: medium;"&gt;&lt;strong&gt;1. Be stubborn through struggle&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;  &lt;p class="p2"&gt;Watch the below interview with Eric Lander from the New York Times (&lt;a href="http://video.nytimes.com/video/2012/01/02/science/100000001255558/eric-lander.html"&gt;link&lt;/a&gt;).&lt;/p&gt;  &lt;p&gt;&lt;iframe scrolling="no" marginheight="0" marginwidth="0" src="http://graphics8.nytimes.com/bcvideo/1.0/iframe/embed.html?videoId=100000001255558&amp;amp;playerType=embed" frameborder="0" height="373" width="480"&gt;&lt;/iframe&gt;&lt;/p&gt;  &lt;p class="p1"&gt;Lander emphasizes the social aspect of science, which as a computational biologist, a field which is defined as an intersection of disciplines, I wholeheartedly support&amp;nbsp;collaboration&amp;nbsp;as an integral part of modern science. However, I want to highlight what he said at the end (emphasis mine):&lt;/p&gt;  &lt;p style="padding-left: 30px;"&gt;"A lot of times in my life, when I've been casting about, trying to figure out what's the next step, what's bothering me, where to go. In a way, it's not so different from working on a math problem, where if you try to take it head on, you usually can't make progress. But when you take on a challenge like 'what do I want to go do now?' or 'what's the field got to do right now?' or 'what's the big issue in cancer,' whatever.&amp;nbsp;&lt;strong&gt;You keep struggling with it, and eventually, the structure of the problem becomes clear&lt;/strong&gt;. And then &lt;strong&gt;the path through it becomes clear&lt;/strong&gt;. But all those &lt;strong&gt;moments of insight come from long periods of casting about and seeing all the pieces&lt;/strong&gt;. You just have to be &lt;strong&gt;patient enough to wait until all the pieces really come together&lt;/strong&gt;. You gotta be stubborn."&lt;/p&gt;  &lt;p class="p1"&gt;This last note is exactly what I mean by "constancy and moderation."&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;Here is a man who is, by all standards, is a genius. And yet he describes &lt;strong&gt;struggling&lt;/strong&gt;&amp;nbsp;with a problem. Really getting to know it, spending time with this problem and thinking about all its parts. This can be done alone or collaboratively, but the struggle must happen.&amp;nbsp;In &lt;a href="http://www.amazon.com/Outliers-Story-Success-Malcolm-Gladwell/dp/0316017922"&gt;Outliers&lt;/a&gt; by Malcolm Gladwell, he discussed case studies of seemingly chance successes only to uncover the pattern of consistent opportunities to practice. For example, the Beatles performed&amp;nbsp;&lt;em&gt;eight hours a night&lt;/em&gt;&amp;nbsp;at a club in Hamburg, Germany. Eight hours! Before, they had prepared an hour's worth of material for gigs and initially, the group struggled to find enough to play for such a long period of time. These huge stretches forced the group to constantly change their sound and have long, dynamic set lists to keep their audience engaged. They struggled through eight hour set lists and eventually became the legendary band they are today.&lt;/p&gt;  &lt;p class="p1"&gt;Cal Newport,&amp;nbsp;author of&amp;nbsp;&lt;a href="http://calnewport.com/blog/"&gt;&lt;span class="s1"&gt;Study Hacks&lt;/span&gt;&lt;/a&gt;, has written about&amp;nbsp;&lt;a href="http://calnewport.com/blog/2009/06/22/on-the-value-of-hard-focus/"&gt;&lt;span class="s1"&gt;the value of hard focus&lt;/span&gt;&lt;/a&gt;&amp;nbsp;such as this, which&amp;nbsp;Lander exemplifies in his description of struggle.&amp;nbsp;As a result of his struggles, Lander attained huge amounts of practice in mathematics as evidenced by his high school math team and leading up to his doctorate in mathematics, which qualified him to teach at an major research institution such as Harvard and be surrounded by experts in every possible discipline. &lt;strong&gt;The "chance circumstances" Lander experienced were as a result of his grit and persistence through mathematics.&lt;/strong&gt;&lt;/p&gt;  &lt;p class="p1"&gt;And then, there are some &lt;strong&gt;moments of insight&lt;/strong&gt;, which come from these struggles, come from putting in the time and energy onto a problem. The Beatles improvised, invented, and found their sound that led to them to become one of the most successful and prolific bands of all time. Lander worked with colleagues to invent new methods of analyzing biological information.&lt;/p&gt;  &lt;p class="p1"&gt;&lt;span style="font-size: medium;"&gt;&lt;strong&gt;2. Have a reasonable workday&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;  &lt;p class="p1"&gt;Let's dig deeper into how he actually accomplishes this. From&amp;nbsp;the&amp;nbsp;&lt;a href="http://www.nytimes.com/2012/01/03/science/broad-institute-director-finds-power-in-numbers.html?pagewanted=all"&gt;&lt;span class="s1"&gt;accompanying article&lt;/span&gt;&lt;/a&gt;, Lander's workday doesn't seem so remarkable:&lt;/p&gt;  &lt;p class="p1" style="padding-left: 30px;"&gt;"After his morning workout, he sometimes goes to a local bakery where he can work quietly. He arrives at the Broad between 8 and 10 a.m. In the fall, he teaches introductory biology to a class of 700 M.I.T. students on Monday, Wednesday and Friday mornings. He often meets with graduate students and postdoctoral fellows in the afternoon to discuss their work.&lt;/p&gt;  &lt;p class="p1" style="padding-left: 30px;"&gt;Then he has his administrative duties and his meetings with philanthropists, trying to raise more money. He also spends 20 percent of his time in yet another role, as co-chairman of President Obama&amp;rsquo;s Council of Advisers on Science and Technology, which deals with topics like influenza vaccines, health information technology, science education and energy policy.&lt;/p&gt;  &lt;p class="p1" style="padding-left: 30px;"&gt;In the evening, around 6:30 or 7, he has dinner with his family."&lt;/p&gt;  &lt;p class="p1"&gt;So how does he accomplish such remarkable things? Despite the apparent normality of this schedule, it has several gems.&amp;nbsp;&lt;/p&gt;  &lt;p class="p1"&gt;&lt;span style="font-size: medium;"&gt;&lt;strong&gt;3. Hard focus first&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;  &lt;p class="p1"&gt;First,&amp;nbsp;I'm guessing he uses the morning bakery time to "&lt;em&gt;work quietly"&lt;/em&gt;&amp;nbsp;on his hardest task. The one where he must make a creative leap from old paradigms to new ideas, which requires a great deal of focus and energy. This is in line with Leo Babauta,&amp;nbsp;author of&amp;nbsp;&lt;a href="http://zenhabits.net/"&gt;&lt;span class="s1"&gt;Zen Habits&lt;/span&gt;&lt;/a&gt;, advises to work on your&amp;nbsp;&lt;a href="http://zenhabits.net/tada/"&gt;&lt;span class="s1"&gt;most important thing&lt;/span&gt;&lt;/a&gt;&amp;nbsp;first thing in the morning, before any interruptions might come up.&amp;nbsp;Lander does exactly this. He could be&amp;nbsp;writing a manuscript, thinking about a problem that a graduate student proposed, or preparing a brand-new lecture.&amp;nbsp;He's refreshed after his morning workout and probably getting some calories and caffeine - a great recipe for focus.&amp;nbsp;&lt;/p&gt;  &lt;p class="p1"&gt;In any case, Lander's definitely not checking his facebook or email first thing in the morning. And if you want to be successful like Eric Lander, you shouldn't, either.&lt;/p&gt;  &lt;p class="p1"&gt;Second, he then does less "hard focus" tasks. He then teaches, which is probably building from his many previous lessons, so he's well prepared. Then he meets with graduate students/post-docs/collaborators, which is certainly intellectually stimulating but probably doesn't require quite as much energy as his morning task. If him and his colleagues hit a wall, he can always think about it in the next morning or meet up again later.&lt;/p&gt;  &lt;p class="p1"&gt;Finally, he gets some rest. He finishes his day at a reasonable time and has dinner with his family. Connecting with his family stimulates his social mind and rejuvenates his analytical brain. He doesn't expect to work late into the night, because he knows he already accomplished his most important thing in the morning. He touched base with his graduate students and connected with his colleagues.&amp;nbsp;&lt;/p&gt;  &lt;p class="p1"&gt;&amp;nbsp;&lt;/p&gt;  &lt;p class="p1"&gt;Day by day, and little by little, Lander builds his success through daily focus, struggle, and he does it for those moments of insight that transform a field forever. And that's what I'll be doing.&lt;/p&gt;&lt;/div&gt;</summary><category term="advice"></category><category term="bioinformatics"></category><category term="case study"></category><category term="computational biology"></category><category term="eric lander"></category><category term="hard focus"></category><category term="most important thing"></category><category term="productivity"></category></entry><entry><title>Constancy and moderation wins the race</title><link href="/blog/2011/12/23/2011-12-23-constancy-and-moderation-wins-the-race/" rel="alternate"></link><updated>2011-12-23T09:14:00-08:00</updated><author><name>sciencemeetproductivity</name></author><id>tag:,2011-12-23:blog/2011/12/23/2011-12-23-constancy-and-moderation-wins-the-race/</id><summary type="html">&lt;div class='posterous_autopost'&gt;&lt;p&gt;&lt;div class='p_embed p_image_embed'&gt; &lt;a href="http://getfile6.posterous.com/getfile/files.posterous.com/temp-2011-12-22/HFmhvHlyxeGHCaBnvqpDexicIlvnupvBlevkegqdIDGtdhenctvuwydhehoB/the_tortoise_and_the_hare.jpeg.scaled1000.jpg"&gt;&lt;img alt="The_tortoise_and_the_hare" height="500" src="http://getfile8.posterous.com/getfile/files.posterous.com/temp-2011-12-22/HFmhvHlyxeGHCaBnvqpDexicIlvnupvBlevkegqdIDGtdhenctvuwydhehoB/the_tortoise_and_the_hare.jpeg.scaled500.jpg" width="500" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/p&gt;  &lt;p&gt;&lt;em&gt;&lt;span style="color: #888888;"&gt;Photo credit:&amp;nbsp;&lt;a href="http://www.flickr.com/photos/esoule/2439356229/"&gt;esoule&lt;/a&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;  &lt;p&gt;  &lt;p class="p3"&gt;As a first year graduate student reading&amp;nbsp;&lt;a href="http://www.amazon.com/Advice-Faculty-Members-Robert-Boice/dp/0205281591"&gt;&lt;span class="s3"&gt;Advice for New Faculty&lt;/span&gt;&lt;/a&gt;&amp;nbsp;by Robert Boice,&amp;nbsp;you may think I'm getting ahead of myself since I have a long way to go before I become Professor Olga. But besides advice for the ivory tower, this book has great&amp;nbsp;&lt;em&gt;life&lt;/em&gt;&amp;nbsp;advice. This guy is a psychologist and spent years studying exemplary new faculty and what sets them apart. The book emphasizes "&lt;strong&gt;constancy and moderation&lt;/strong&gt;," essentially "slow and steady wins the race."&lt;/p&gt;  &lt;p class="p3"&gt;The originator of "slow and steady wins the race" is Aesop's fable "The Tortoise and the Hare." The Tortoise puts in steady work, constantly working a little bit towards the goal. The Hare, on the other hand, procrastinates until the last minute and is forced to sprint to a low-quality product&amp;mdash;losing the race when the Hare is clearly the faster runner.&lt;/p&gt;  &lt;p class="p3"&gt;Like many of us, I sympathize with the hare. When faced with a new project I think to myself, "I'm smart. I could finish this in a night." I procrastinate until a few days before, then rush to get everything done, realizing the project was much bigger than I thought, and I end up with a B- on something I could have earned A+.&lt;/p&gt;  &lt;p class="p3"&gt;As a nerd, I love data and graphs and what struck me about &lt;span class="s2"&gt;Advice for New Faculty&lt;/span&gt; were the charts of input and output of "exemplary quick-starting" new faculty and their less exemplary peers, shown in &lt;em&gt;Figure 15.2&lt;/em&gt;&amp;nbsp;below. The "quick-starting" faculty (labeled &lt;em&gt;Moderates&lt;/em&gt;) worked consistently on writing throughout the week and produced many more pages of writing per week than their peers (labeled &lt;em&gt;Romantics&lt;/em&gt;). These less productive faculty romanticized the impulsiveness of binges, ie misguided statements such as "True genius is inspired,"&amp;nbsp;"I have to wait until the perfect moment to work," "That's what divine madness means."&lt;/p&gt;  &lt;div class='p_embed p_image_embed'&gt; &lt;a href="http://getfile4.posterous.com/getfile/files.posterous.com/temp-2011-12-23/jBpddgyDFGmvisEJuGiICxzhBnAwpCDcGhbrFwfbhDgDsJbtCtgrADEobByc/Photo_Dec_21_17_19_18.jpg.scaled1000.jpg"&gt;&lt;img alt="Photo_dec_21_17_19_18" height="460" src="http://getfile3.posterous.com/getfile/files.posterous.com/temp-2011-12-23/jBpddgyDFGmvisEJuGiICxzhBnAwpCDcGhbrFwfbhDgDsJbtCtgrADEobByc/Photo_Dec_21_17_19_18.jpg.scaled500.jpg" width="500" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class='p_embed p_image_embed'&gt; &lt;a href="http://getfile1.posterous.com/getfile/files.posterous.com/temp-2011-12-23/eskncBeJjczGgongeHyuItpFFmvDzHxdChvroFhaCpfIchkkmAxymrDDCqEv/Photo_Dec_21_17_19_38.jpg.scaled1000.jpg"&gt;&lt;img alt="Photo_dec_21_17_19_38" height="427" src="http://getfile7.posterous.com/getfile/files.posterous.com/temp-2011-12-23/eskncBeJjczGgongeHyuItpFFmvDzHxdChvroFhaCpfIchkkmAxymrDDCqEv/Photo_Dec_21_17_19_38.jpg.scaled500.jpg" width="500" /&gt;&lt;/a&gt; &lt;/div&gt;   &lt;p class="p3"&gt;How does this affect me, and more importantly, you? Boice suggests tackling difficult tasks such as writing in&amp;nbsp;&lt;em&gt;brief, daily sessions&lt;/em&gt; (BDSs) lasting as few as 15 minutes and as many as 90 minutes. &lt;strong&gt;Why brief?&lt;/strong&gt;&amp;nbsp;Brevity is essential as you work while you are fresh and able, not until you're exhausted (see:&amp;nbsp;&lt;a href="http://blog.olgabotvinnik.com/glamorized-exhaustion-is-not-productivity"&gt;&lt;span class="s3"&gt;glamorized exhaustion&lt;/span&gt;&lt;/a&gt;).&amp;nbsp;&lt;strong&gt;Why daily?&lt;/strong&gt;&amp;nbsp;By working on your projects daily, you keep them fresh in your mind and which allows connections to appear, almost effortlessly.&lt;/p&gt;  &lt;p class="p3"&gt;But BDSs apply to more than just writing. They are perfect for your most paralyzing activity, the activity&amp;nbsp;or task you know you have to do but you can't seem to muster the motivation.&amp;nbsp;Ask yourself:&amp;nbsp;&lt;strong&gt;what is my most paralyzing activity?&lt;/strong&gt;&amp;nbsp;For computer scientists, it could be the [intolerable] biology class. For biologists, it could be the dreaded calculus homework. It could be learning a new programming language, writing your thesis, exercising, or mastering an instrument. For me, it's PhD and fellowship applications.&lt;/p&gt;  &lt;p class="p3"&gt;Next, &lt;strong&gt;schedule this activity at your peak time&lt;/strong&gt;. For many people (including myself), this is first thing in the morning. Before you check your email or read your blogs. It doesn't have to be for very long, even a focused 15-minute push can greatly advance a project. If you're deeper into the project, you could go for as long as 90 minutes. By the time the rest of the world wakes up, you'll have accomplished your hardest task.&lt;/p&gt;  &lt;p class="p3"&gt;Lastly, &lt;strong&gt;begin before feeling ready. &lt;/strong&gt;Before you get that surge of inspiration you're waiting for, start putting words or code or brushstrokes down. The inspiration will come as you work. More on this in future posts.&lt;/p&gt;  &lt;p class="p3"&gt;For example, last quarter I had 5 fellowship applications and 7 PhD school applications to submit with deadlines of November 1st, November 18th, and December 1st. Doesn't sound so bad until you see how much writing you have to do. 2000 words for one fellowship, 5000 characters for another.&amp;nbsp;&lt;strong&gt;The amount of writing paralyzed me&lt;/strong&gt;.&amp;nbsp;Of course, I could use materials from finished apps, but first I had to &lt;em&gt;finish&lt;/em&gt;&amp;nbsp;them. Over October and November, I worked on my applications every day in the morning. &lt;strong&gt;It was incredibly liberating to know that my paralyzing work was underway.&lt;/strong&gt;&lt;/p&gt;  &lt;p class="p3"&gt;&lt;strong&gt;You can do this.&lt;/strong&gt;&amp;nbsp;Comment or&amp;nbsp;&lt;a href="mailto:olga@olgabotvinnik.com"&gt;&lt;span class="s3"&gt;send me an email&lt;/span&gt;&lt;/a&gt;&amp;nbsp;about what is your most paralyzing activity, and how you're going to fight/combat its influence over you.&lt;/p&gt;  &lt;/p&gt;&lt;/div&gt;</summary><category term="advice"></category><category term="advice for new faculty"></category><category term="BDSs"></category><category term="begin before feeling ready"></category><category term="constancy and moderation"></category></entry><entry><title>Glamorized exhaustion is not productivity</title><link href="/blog/2011/12/14/2011-12-14-glamorized-exhaustion-is-not-productivity/" rel="alternate"></link><updated>2011-12-14T13:24:00-08:00</updated><author><name>sciencemeetproductivity</name></author><id>tag:,2011-12-14:blog/2011/12/14/2011-12-14-glamorized-exhaustion-is-not-productivity/</id><summary type="html">&lt;div class='posterous_autopost'&gt;&lt;p&gt;&lt;div class='p_embed p_image_embed'&gt; &lt;a href="http://getfile4.posterous.com/getfile/files.posterous.com/temp-2011-12-14/fvtzaEwAnoApEgJmhbmfIJjiiGgvyDoAwqqaHepErAnaGdjDAlbJDoobyvna/2404849371_02a88db594_o.jpg.scaled1000.jpg"&gt;&lt;img alt="2404849371_02a88db594_o" height="317" src="http://getfile4.posterous.com/getfile/files.posterous.com/temp-2011-12-14/fvtzaEwAnoApEgJmhbmfIJjiiGgvyDoAwqqaHepErAnaGdjDAlbJDoobyvna/2404849371_02a88db594_o.jpg.scaled500.jpg" width="500" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/p&gt;  &lt;p class="p1"&gt;&lt;em&gt;Photo courtesy of&amp;nbsp;&lt;a href="http://www.flickr.com/photos/beforethecoffee/" style="text-decoration: none; color: #0063dc; font-size: 12px; line-height: 18px; text-align: left; background-color: #fefefe;"&gt;beforethecoffee&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;  &lt;p class="p1"&gt;MIT is the epitome of glamorized exhaustion.&amp;nbsp;&lt;/p&gt;  &lt;p class="p1"&gt;"I've gotten 8 hours of sleep in the past three days," they brag.&lt;/p&gt;  &lt;p class="p1"&gt;"Oh yeah? I've been working on this project for 12 hours nonstop."&amp;nbsp;&lt;/p&gt;  &lt;p class="p1"&gt;But this attitude and work style just isn't effective. I'm determined to change how I work to be more effective and more productive.&lt;/p&gt;  &lt;p class="p1"&gt;This realization has not come easily.&amp;nbsp;I used to live and breathe exhaustion. In high school, I had days where I had school 7:45am-3:15pm, then crew (rowing - I was a coxswain) practice 4pm-7pm, then orchestra rehearsal until 9pm. Then homework! In undergrad, I double majored in addition to my many activities, and I was constantly tired.&lt;/p&gt;  &lt;p class="p1"&gt;Last year, something changed. I worked at a research institution, focused on the tasks and projects I needed to accomplish, and worked consistently to achieve these goals. I exercised almost daily. I cooked almost all my meals. And I was the most productive I have ever been.&lt;/p&gt;  &lt;p class="p1"&gt;If a job is easy, what makes the student life so difficult? When you're done with your job, you're done. Working at home is not necessary, any work you do is bonus points. But as a student, the structure doesn't exist. You have classes and deadlines. Go. But to succeed and be happy while you do it, you must create your own schedule.&lt;/p&gt;  &lt;p class="p1"&gt;University students everywhere cram for their exams, then feel miserable and perform poorly. The problem derives not from mental ability, but a lack of consistent time scheduling to activities. At MIT, a typical course is 12 "units," where a "unit" is an hour of work expected per week. An introductory biology course divides its units to 5 in lecture, 0 in lab, and 7 studying at home, or 5-0-7. Why didn't I harness this knowledge to plan my week and execute homework with efficient precision? A number of excuses come to mind, I was lazy, I didn't feel like starting problem sets so early, but the biggest reason was &lt;strong&gt;that's what I always did&lt;/strong&gt;.&lt;/p&gt;  &lt;p class="p1"&gt;I could get away with these study habits in high school and do well, but college was a whole different ballgame. Even so, if you walk into the reading room/library before 5pm, you'll see nary a soul. But from 7pm on, the desks are packed with people studying at a time where their brain is far too tired. They end up sleeping in the reading room. During the day, these students fill the hallways, glamorizing their exhaustion and out-suffering their friends. It's pitiful.&lt;/p&gt;  &lt;p class="p1"&gt;I'm determined to change the way students approach work. Instead of bingeing and writing a paper in a 14-hour marathon, mindfully gather your ideas and craft a well-thought essay. Rather than waiting until the last minute to start your programming assignment, prime your mind early on by thinking through the pseudocode and produce a nicely commented program.&lt;/p&gt;  &lt;p class="p1"&gt;In my last year of undergrad, I used these strategies increased both my GPA and my relaxation time. Starting early really works!&lt;/p&gt;  &lt;p class="p1"&gt;Next time, I'll discuss the book &lt;a href="http://www.amazon.com/Advice-Faculty-Members-Robert-Boice/dp/0205281591"&gt;Advice for New Faculty Members&lt;/a&gt; and why it applies to you, regardless of whether you are in academia or not.&lt;/p&gt;&lt;/div&gt;</summary><category term="glamorized exhaustion"></category><category term="MIT"></category><category term="productivity"></category></entry></feed>